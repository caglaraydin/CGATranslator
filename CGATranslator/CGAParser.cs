//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3 2017-03-19 13:27:16

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace CGATranslator
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class CGAParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "Annotation", "Attr", "BAR", "BooleanLiteral", "CASE", "CBODY", "CEXPR", "COLON", "COMBINE", "COMP", "CPROB", "DEFR", "DIV", "ELSE", "EQUAL", "EQUALS", "ERROR", "EXTENDS", "EscapeSequence", "Exponent", "FloatingPointLiteral", "GEQUAL", "GT", "HexDigit", "IDDigit", "IMPORT", "IRECT", "Identifier", "LEQUAL", "LT", "Letter", "MINUS", "MOD", "MULT", "NEQUAL", "NIL", "NOT", "NOTCOMB", "OPSEQ", "OR", "OctalEscape", "PCLOSE", "PLUS", "POPEN", "ProbabilityLiteral", "RULE_DEFINITION", "SCAT", "SEL", "SETB", "SET_OP", "SHPL", "SHPO", "SHPU", "SNAP_SPLIT", "SPLIT", "SPLIT_AREA", "SPOP", "SPUSH", "SP_OP", "STACKED", "STYLE", "S_OP", "ScaleFloat", "ScaleRatio", "ScaleRelative", "SignatureIdentifier", "SignatureIdentifierWS", "StringLiteral", "TILEUV", "T_OP", "UMINUS", "UnicodeEscape", "VERSION", "WS", "','", "'^'", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int AND=4;
	public const int Annotation=5;
	public const int Attr=6;
	public const int BAR=7;
	public const int BooleanLiteral=8;
	public const int CASE=9;
	public const int CBODY=10;
	public const int CEXPR=11;
	public const int COLON=12;
	public const int COMBINE=13;
	public const int COMP=14;
	public const int CPROB=15;
	public const int DEFR=16;
	public const int DIV=17;
	public const int ELSE=18;
	public const int EQUAL=19;
	public const int EQUALS=20;
	public const int ERROR=21;
	public const int EXTENDS=22;
	public const int EscapeSequence=23;
	public const int Exponent=24;
	public const int FloatingPointLiteral=25;
	public const int GEQUAL=26;
	public const int GT=27;
	public const int HexDigit=28;
	public const int IDDigit=29;
	public const int IMPORT=30;
	public const int IRECT=31;
	public const int Identifier=32;
	public const int LEQUAL=33;
	public const int LT=34;
	public const int Letter=35;
	public const int MINUS=36;
	public const int MOD=37;
	public const int MULT=38;
	public const int NEQUAL=39;
	public const int NIL=40;
	public const int NOT=41;
	public const int NOTCOMB=42;
	public const int OPSEQ=43;
	public const int OR=44;
	public const int OctalEscape=45;
	public const int PCLOSE=46;
	public const int PLUS=47;
	public const int POPEN=48;
	public const int ProbabilityLiteral=49;
	public const int RULE_DEFINITION=50;
	public const int SCAT=51;
	public const int SEL=52;
	public const int SETB=53;
	public const int SET_OP=54;
	public const int SHPL=55;
	public const int SHPO=56;
	public const int SHPU=57;
	public const int SNAP_SPLIT=58;
	public const int SPLIT=59;
	public const int SPLIT_AREA=60;
	public const int SPOP=61;
	public const int SPUSH=62;
	public const int SP_OP=63;
	public const int STACKED=64;
	public const int STYLE=65;
	public const int S_OP=66;
	public const int ScaleFloat=67;
	public const int ScaleRatio=68;
	public const int ScaleRelative=69;
	public const int SignatureIdentifier=70;
	public const int SignatureIdentifierWS=71;
	public const int StringLiteral=72;
	public const int TILEUV=73;
	public const int T_OP=74;
	public const int UMINUS=75;
	public const int UnicodeEscape=76;
	public const int VERSION=77;
	public const int WS=78;

	public CGAParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public CGAParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[189+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return CGAParser.tokenNames; } }
	public override string GrammarFileName { get { return "/Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_cga();
	partial void LeaveRule_cga();
	// $ANTLR start "cga"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:26:8: public cga : ( versionStatement )? ( ( importStatement | style | annotation | functionDefintion | ruleDefinition ) )* EOF ;
	[GrammarRule("cga")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> cga()
	{
		EnterRule_cga();
		EnterRule("cga", 1);
		TraceIn("cga", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int cga_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF7 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> versionStatement1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> importStatement2 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> style3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> annotation4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> functionDefintion5 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> ruleDefinition6 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EOF7_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cga");
		DebugLocation(26, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:27:2: ( ( versionStatement )? ( ( importStatement | style | annotation | functionDefintion | ruleDefinition ) )* EOF )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:27:4: ( versionStatement )? ( ( importStatement | style | annotation | functionDefintion | ruleDefinition ) )* EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(27, 4);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:27:4: ( versionStatement )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==VERSION))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:27:4: versionStatement
				{
				DebugLocation(27, 4);
				PushFollow(Follow._versionStatement_in_cga129);
				versionStatement1=versionStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, versionStatement1.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(27, 22);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:27:22: ( ( importStatement | style | annotation | functionDefintion | ruleDefinition ) )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==Annotation||LA3_1==IMPORT||LA3_1==STYLE||LA3_1==SignatureIdentifier))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:27:23: ( importStatement | style | annotation | functionDefintion | ruleDefinition )
					{
					DebugLocation(27, 23);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:27:23: ( importStatement | style | annotation | functionDefintion | ruleDefinition )
					int alt2=5;
					try { DebugEnterSubRule(2);
					try { DebugEnterDecision(2, false);
					switch (input.LA(1))
					{
					case IMPORT:
						{
						alt2 = 1;
						}
						break;
					case STYLE:
						{
						alt2 = 2;
						}
						break;
					case Annotation:
						{
						alt2 = 3;
						}
						break;
					case SignatureIdentifier:
						{
						switch (input.LA(2))
						{
						case POPEN:
							{
							int LA2_3 = input.LA(3);

							if ((LA2_3==Identifier))
							{
								int LA2_4 = input.LA(4);

								if ((EvaluatePredicate(synpred5_CGA_fragment)))
								{
									alt2 = 4;
								}
								else if ((true))
								{
									alt2 = 5;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 2, 8, input, 4);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else if ((LA2_3==PCLOSE))
							{
								int LA2_4 = input.LA(4);

								if ((EvaluatePredicate(synpred5_CGA_fragment)))
								{
									alt2 = 4;
								}
								else if ((true))
								{
									alt2 = 5;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 2, 9, input, 4);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 2, 5, input, 3);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case EQUALS:
							{
							alt2 = 4;
							}
							break;
						case RULE_DEFINITION:
							{
							alt2 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 2, 4, input, 2);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(2); }
					switch (alt2)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:27:25: importStatement
						{
						DebugLocation(27, 25);
						PushFollow(Follow._importStatement_in_cga135);
						importStatement2=importStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, importStatement2.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:27:43: style
						{
						DebugLocation(27, 43);
						PushFollow(Follow._style_in_cga139);
						style3=style();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, style3.Tree);

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:27:51: annotation
						{
						DebugLocation(27, 51);
						PushFollow(Follow._annotation_in_cga143);
						annotation4=annotation();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, annotation4.Tree);

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:27:64: functionDefintion
						{
						DebugLocation(27, 64);
						PushFollow(Follow._functionDefintion_in_cga147);
						functionDefintion5=functionDefintion();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, functionDefintion5.Tree);

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:27:84: ruleDefinition
						{
						DebugLocation(27, 84);
						PushFollow(Follow._ruleDefinition_in_cga151);
						ruleDefinition6=ruleDefinition();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, ruleDefinition6.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(27, 104);
			EOF7=(CommonToken)Match(input,EOF,Follow._EOF_in_cga158); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EOF7_tree = (CommonTree)adaptor.Create(EOF7);
			adaptor.AddChild(root_0, EOF7_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cga", 1);
			LeaveRule("cga", 1);
			LeaveRule_cga();
			if (state.backtracking > 0) { Memoize(input, 1, cga_StartIndex); }

		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "cga"); }
		return retval;

	}
	// $ANTLR end "cga"

	partial void EnterRule_signature();
	partial void LeaveRule_signature();
	// $ANTLR start "signature"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:32:1: signature : SignatureIdentifier ^ ( '(' ! ( Identifier ( ',' ! Identifier )* )? ')' !)? ;
	[GrammarRule("signature")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> signature()
	{
		EnterRule_signature();
		EnterRule("signature", 2);
		TraceIn("signature", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int signature_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken SignatureIdentifier8 = default(CommonToken);
		CommonToken char_literal9 = default(CommonToken);
		CommonToken Identifier10 = default(CommonToken);
		CommonToken char_literal11 = default(CommonToken);
		CommonToken Identifier12 = default(CommonToken);
		CommonToken char_literal13 = default(CommonToken);

		CommonTree SignatureIdentifier8_tree = default(CommonTree);
		CommonTree char_literal9_tree = default(CommonTree);
		CommonTree Identifier10_tree = default(CommonTree);
		CommonTree char_literal11_tree = default(CommonTree);
		CommonTree Identifier12_tree = default(CommonTree);
		CommonTree char_literal13_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "signature");
		DebugLocation(32, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:33:2: ( SignatureIdentifier ^ ( '(' ! ( Identifier ( ',' ! Identifier )* )? ')' !)? )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:33:4: SignatureIdentifier ^ ( '(' ! ( Identifier ( ',' ! Identifier )* )? ')' !)?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(33, 23);
			SignatureIdentifier8=(CommonToken)Match(input,SignatureIdentifier,Follow._SignatureIdentifier_in_signature171); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SignatureIdentifier8_tree = (CommonTree)adaptor.Create(SignatureIdentifier8);
			root_0 = (CommonTree)adaptor.BecomeRoot(SignatureIdentifier8_tree, root_0);
			}
			DebugLocation(33, 25);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:33:25: ( '(' ! ( Identifier ( ',' ! Identifier )* )? ')' !)?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==POPEN))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:33:27: '(' ! ( Identifier ( ',' ! Identifier )* )? ')' !
				{
				DebugLocation(33, 30);
				char_literal9=(CommonToken)Match(input,POPEN,Follow._POPEN_in_signature176); if (state.failed) return retval;
				DebugLocation(33, 32);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:33:32: ( Identifier ( ',' ! Identifier )* )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==Identifier))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:33:34: Identifier ( ',' ! Identifier )*
					{
					DebugLocation(33, 34);
					Identifier10=(CommonToken)Match(input,Identifier,Follow._Identifier_in_signature181); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Identifier10_tree = (CommonTree)adaptor.Create(Identifier10);
					adaptor.AddChild(root_0, Identifier10_tree);
					}
					DebugLocation(33, 45);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:33:45: ( ',' ! Identifier )*
					try { DebugEnterSubRule(4);
					while (true)
					{
						int alt4=2;
						try { DebugEnterDecision(4, false);
						int LA4_1 = input.LA(1);

						if ((LA4_1==79))
						{
							alt4 = 1;
						}


						} finally { DebugExitDecision(4); }
						switch ( alt4 )
						{
						case 1:
							DebugEnterAlt(1);
							// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:33:46: ',' ! Identifier
							{
							DebugLocation(33, 49);
							char_literal11=(CommonToken)Match(input,79,Follow._79_in_signature184); if (state.failed) return retval;
							DebugLocation(33, 51);
							Identifier12=(CommonToken)Match(input,Identifier,Follow._Identifier_in_signature187); if (state.failed) return retval;
							if (state.backtracking == 0) {
							Identifier12_tree = (CommonTree)adaptor.Create(Identifier12);
							adaptor.AddChild(root_0, Identifier12_tree);
							}

							}
							break;

						default:
							goto loop4;
						}
					}

					loop4:
						;

					} finally { DebugExitSubRule(4); }


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(33, 70);
				char_literal13=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_signature194); if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("signature", 2);
			LeaveRule("signature", 2);
			LeaveRule_signature();
			if (state.backtracking > 0) { Memoize(input, 2, signature_StartIndex); }

		}
		DebugLocation(34, 1);
		} finally { DebugExitRule(GrammarFileName, "signature"); }
		return retval;

	}
	// $ANTLR end "signature"

	partial void EnterRule_identifier();
	partial void LeaveRule_identifier();
	// $ANTLR start "identifier"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:36:1: identifier : Identifier ^;
	[GrammarRule("identifier")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> identifier()
	{
		EnterRule_identifier();
		EnterRule("identifier", 3);
		TraceIn("identifier", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int identifier_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken Identifier14 = default(CommonToken);

		CommonTree Identifier14_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "identifier");
		DebugLocation(36, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:37:5: ( Identifier ^)
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:37:7: Identifier ^
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(37, 17);
			Identifier14=(CommonToken)Match(input,Identifier,Follow._Identifier_in_identifier212); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Identifier14_tree = (CommonTree)adaptor.Create(Identifier14);
			root_0 = (CommonTree)adaptor.BecomeRoot(Identifier14_tree, root_0);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifier", 3);
			LeaveRule("identifier", 3);
			LeaveRule_identifier();
			if (state.backtracking > 0) { Memoize(input, 3, identifier_StartIndex); }

		}
		DebugLocation(38, 4);
		} finally { DebugExitRule(GrammarFileName, "identifier"); }
		return retval;

	}
	// $ANTLR end "identifier"

	partial void EnterRule_versionStatement();
	partial void LeaveRule_versionStatement();
	// $ANTLR start "versionStatement"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:41:1: versionStatement : VERSION ^ StringLiteral ;
	[GrammarRule("versionStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> versionStatement()
	{
		EnterRule_versionStatement();
		EnterRule("versionStatement", 4);
		TraceIn("versionStatement", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int versionStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken VERSION15 = default(CommonToken);
		CommonToken StringLiteral16 = default(CommonToken);

		CommonTree VERSION15_tree = default(CommonTree);
		CommonTree StringLiteral16_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "versionStatement");
		DebugLocation(41, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:42:5: ( VERSION ^ StringLiteral )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:42:7: VERSION ^ StringLiteral
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(42, 14);
			VERSION15=(CommonToken)Match(input,VERSION,Follow._VERSION_in_versionStatement231); if (state.failed) return retval;
			if (state.backtracking == 0) {
			VERSION15_tree = (CommonTree)adaptor.Create(VERSION15);
			root_0 = (CommonTree)adaptor.BecomeRoot(VERSION15_tree, root_0);
			}
			DebugLocation(42, 16);
			StringLiteral16=(CommonToken)Match(input,StringLiteral,Follow._StringLiteral_in_versionStatement234); if (state.failed) return retval;
			if (state.backtracking == 0) {
			StringLiteral16_tree = (CommonTree)adaptor.Create(StringLiteral16);
			adaptor.AddChild(root_0, StringLiteral16_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("versionStatement", 4);
			LeaveRule("versionStatement", 4);
			LeaveRule_versionStatement();
			if (state.backtracking > 0) { Memoize(input, 4, versionStatement_StartIndex); }

		}
		DebugLocation(43, 4);
		} finally { DebugExitRule(GrammarFileName, "versionStatement"); }
		return retval;

	}
	// $ANTLR end "versionStatement"

	partial void EnterRule_importStatement();
	partial void LeaveRule_importStatement();
	// $ANTLR start "importStatement"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:45:1: importStatement : IMPORT ^ ( ( annotation )? Identifier ( '(' ! ( Identifier ( ',' ! Identifier )* )? ')' !)? ':' ! StringLiteral ( POPEN ( attrOverwrite ( ',' ! attrOverwrite )* )? PCLOSE )? )+ ;
	[GrammarRule("importStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> importStatement()
	{
		EnterRule_importStatement();
		EnterRule("importStatement", 5);
		TraceIn("importStatement", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int importStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IMPORT17 = default(CommonToken);
		CommonToken Identifier19 = default(CommonToken);
		CommonToken char_literal20 = default(CommonToken);
		CommonToken Identifier21 = default(CommonToken);
		CommonToken char_literal22 = default(CommonToken);
		CommonToken Identifier23 = default(CommonToken);
		CommonToken char_literal24 = default(CommonToken);
		CommonToken char_literal25 = default(CommonToken);
		CommonToken StringLiteral26 = default(CommonToken);
		CommonToken POPEN27 = default(CommonToken);
		CommonToken char_literal29 = default(CommonToken);
		CommonToken PCLOSE31 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> annotation18 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> attrOverwrite28 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> attrOverwrite30 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IMPORT17_tree = default(CommonTree);
		CommonTree Identifier19_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree Identifier21_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree Identifier23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree StringLiteral26_tree = default(CommonTree);
		CommonTree POPEN27_tree = default(CommonTree);
		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree PCLOSE31_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "importStatement");
		DebugLocation(45, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:5: ( IMPORT ^ ( ( annotation )? Identifier ( '(' ! ( Identifier ( ',' ! Identifier )* )? ')' !)? ':' ! StringLiteral ( POPEN ( attrOverwrite ( ',' ! attrOverwrite )* )? PCLOSE )? )+ )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:7: IMPORT ^ ( ( annotation )? Identifier ( '(' ! ( Identifier ( ',' ! Identifier )* )? ')' !)? ':' ! StringLiteral ( POPEN ( attrOverwrite ( ',' ! attrOverwrite )* )? PCLOSE )? )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(46, 13);
			IMPORT17=(CommonToken)Match(input,IMPORT,Follow._IMPORT_in_importStatement251); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IMPORT17_tree = (CommonTree)adaptor.Create(IMPORT17);
			root_0 = (CommonTree)adaptor.BecomeRoot(IMPORT17_tree, root_0);
			}
			DebugLocation(46, 15);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:15: ( ( annotation )? Identifier ( '(' ! ( Identifier ( ',' ! Identifier )* )? ')' !)? ':' ! StringLiteral ( POPEN ( attrOverwrite ( ',' ! attrOverwrite )* )? PCLOSE )? )+
			int cnt14=0;
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==Annotation))
				{
					int LA14_2 = input.LA(2);

					if ((LA14_2==POPEN))
					{
						switch (input.LA(3))
						{
						case Identifier:
							{
							int LA14_4 = input.LA(4);

							if ((EvaluatePredicate(synpred17_CGA_fragment)))
							{
								alt14 = 1;
							}


							}
							break;
						case ProbabilityLiteral:
							{
							int LA14_4 = input.LA(4);

							if ((EvaluatePredicate(synpred17_CGA_fragment)))
							{
								alt14 = 1;
							}


							}
							break;
						case CASE:
							{
							int LA14_4 = input.LA(4);

							if ((EvaluatePredicate(synpred17_CGA_fragment)))
							{
								alt14 = 1;
							}


							}
							break;
						case PLUS:
							{
							int LA14_4 = input.LA(4);

							if ((EvaluatePredicate(synpred17_CGA_fragment)))
							{
								alt14 = 1;
							}


							}
							break;
						case POPEN:
							{
							int LA14_4 = input.LA(4);

							if ((EvaluatePredicate(synpred17_CGA_fragment)))
							{
								alt14 = 1;
							}


							}
							break;
						case FloatingPointLiteral:
							{
							int LA14_4 = input.LA(4);

							if ((EvaluatePredicate(synpred17_CGA_fragment)))
							{
								alt14 = 1;
							}


							}
							break;
						case SEL:
							{
							int LA14_4 = input.LA(4);

							if ((EvaluatePredicate(synpred17_CGA_fragment)))
							{
								alt14 = 1;
							}


							}
							break;
						case MINUS:
							{
							int LA14_4 = input.LA(4);

							if ((EvaluatePredicate(synpred17_CGA_fragment)))
							{
								alt14 = 1;
							}


							}
							break;
						case StringLiteral:
							{
							int LA14_4 = input.LA(4);

							if ((EvaluatePredicate(synpred17_CGA_fragment)))
							{
								alt14 = 1;
							}


							}
							break;
						case BooleanLiteral:
							{
							int LA14_4 = input.LA(4);

							if ((EvaluatePredicate(synpred17_CGA_fragment)))
							{
								alt14 = 1;
							}


							}
							break;
						case NOT:
							{
							int LA14_4 = input.LA(4);

							if ((EvaluatePredicate(synpred17_CGA_fragment)))
							{
								alt14 = 1;
							}


							}
							break;
						case 81:
							{
							int LA14_4 = input.LA(4);

							if ((EvaluatePredicate(synpred17_CGA_fragment)))
							{
								alt14 = 1;
							}


							}
							break;
						case PCLOSE:
							{
							int LA14_4 = input.LA(4);

							if ((EvaluatePredicate(synpred17_CGA_fragment)))
							{
								alt14 = 1;
							}


							}
							break;
						}

					}
					else if ((LA14_2==Identifier))
					{
						alt14 = 1;
					}


				}
				else if ((LA14_1==Identifier))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:17: ( annotation )? Identifier ( '(' ! ( Identifier ( ',' ! Identifier )* )? ')' !)? ':' ! StringLiteral ( POPEN ( attrOverwrite ( ',' ! attrOverwrite )* )? PCLOSE )?
					{
					DebugLocation(46, 17);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:17: ( annotation )?
					int alt7=2;
					try { DebugEnterSubRule(7);
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if ((LA7_1==Annotation))
					{
						alt7 = 1;
					}
					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:17: annotation
						{
						DebugLocation(46, 17);
						PushFollow(Follow._annotation_in_importStatement256);
						annotation18=annotation();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, annotation18.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(7); }

					DebugLocation(46, 29);
					Identifier19=(CommonToken)Match(input,Identifier,Follow._Identifier_in_importStatement259); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Identifier19_tree = (CommonTree)adaptor.Create(Identifier19);
					adaptor.AddChild(root_0, Identifier19_tree);
					}
					DebugLocation(46, 40);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:40: ( '(' ! ( Identifier ( ',' ! Identifier )* )? ')' !)?
					int alt10=2;
					try { DebugEnterSubRule(10);
					try { DebugEnterDecision(10, false);
					int LA10_1 = input.LA(1);

					if ((LA10_1==POPEN))
					{
						alt10 = 1;
					}
					} finally { DebugExitDecision(10); }
					switch (alt10)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:42: '(' ! ( Identifier ( ',' ! Identifier )* )? ')' !
						{
						DebugLocation(46, 45);
						char_literal20=(CommonToken)Match(input,POPEN,Follow._POPEN_in_importStatement263); if (state.failed) return retval;
						DebugLocation(46, 47);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:47: ( Identifier ( ',' ! Identifier )* )?
						int alt9=2;
						try { DebugEnterSubRule(9);
						try { DebugEnterDecision(9, false);
						int LA9_1 = input.LA(1);

						if ((LA9_1==Identifier))
						{
							alt9 = 1;
						}
						} finally { DebugExitDecision(9); }
						switch (alt9)
						{
						case 1:
							DebugEnterAlt(1);
							// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:49: Identifier ( ',' ! Identifier )*
							{
							DebugLocation(46, 49);
							Identifier21=(CommonToken)Match(input,Identifier,Follow._Identifier_in_importStatement268); if (state.failed) return retval;
							if (state.backtracking == 0) {
							Identifier21_tree = (CommonTree)adaptor.Create(Identifier21);
							adaptor.AddChild(root_0, Identifier21_tree);
							}
							DebugLocation(46, 60);
							// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:60: ( ',' ! Identifier )*
							try { DebugEnterSubRule(8);
							while (true)
							{
								int alt8=2;
								try { DebugEnterDecision(8, false);
								int LA8_1 = input.LA(1);

								if ((LA8_1==79))
								{
									alt8 = 1;
								}


								} finally { DebugExitDecision(8); }
								switch ( alt8 )
								{
								case 1:
									DebugEnterAlt(1);
									// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:61: ',' ! Identifier
									{
									DebugLocation(46, 64);
									char_literal22=(CommonToken)Match(input,79,Follow._79_in_importStatement271); if (state.failed) return retval;
									DebugLocation(46, 66);
									Identifier23=(CommonToken)Match(input,Identifier,Follow._Identifier_in_importStatement274); if (state.failed) return retval;
									if (state.backtracking == 0) {
									Identifier23_tree = (CommonTree)adaptor.Create(Identifier23);
									adaptor.AddChild(root_0, Identifier23_tree);
									}

									}
									break;

								default:
									goto loop8;
								}
							}

							loop8:
								;

							} finally { DebugExitSubRule(8); }


							}
							break;

						}
						} finally { DebugExitSubRule(9); }

						DebugLocation(46, 85);
						char_literal24=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_importStatement281); if (state.failed) return retval;

						}
						break;

					}
					} finally { DebugExitSubRule(10); }

					DebugLocation(46, 94);
					char_literal25=(CommonToken)Match(input,COLON,Follow._COLON_in_importStatement288); if (state.failed) return retval;
					DebugLocation(46, 96);
					StringLiteral26=(CommonToken)Match(input,StringLiteral,Follow._StringLiteral_in_importStatement291); if (state.failed) return retval;
					if (state.backtracking == 0) {
					StringLiteral26_tree = (CommonTree)adaptor.Create(StringLiteral26);
					adaptor.AddChild(root_0, StringLiteral26_tree);
					}
					DebugLocation(46, 110);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:110: ( POPEN ( attrOverwrite ( ',' ! attrOverwrite )* )? PCLOSE )?
					int alt13=2;
					try { DebugEnterSubRule(13);
					try { DebugEnterDecision(13, false);
					int LA13_1 = input.LA(1);

					if ((LA13_1==POPEN))
					{
						alt13 = 1;
					}
					} finally { DebugExitDecision(13); }
					switch (alt13)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:112: POPEN ( attrOverwrite ( ',' ! attrOverwrite )* )? PCLOSE
						{
						DebugLocation(46, 112);
						POPEN27=(CommonToken)Match(input,POPEN,Follow._POPEN_in_importStatement295); if (state.failed) return retval;
						if (state.backtracking == 0) {
						POPEN27_tree = (CommonTree)adaptor.Create(POPEN27);
						adaptor.AddChild(root_0, POPEN27_tree);
						}
						DebugLocation(46, 118);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:118: ( attrOverwrite ( ',' ! attrOverwrite )* )?
						int alt12=2;
						try { DebugEnterSubRule(12);
						try { DebugEnterDecision(12, false);
						int LA12_1 = input.LA(1);

						if ((LA12_1==Identifier))
						{
							alt12 = 1;
						}
						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:120: attrOverwrite ( ',' ! attrOverwrite )*
							{
							DebugLocation(46, 120);
							PushFollow(Follow._attrOverwrite_in_importStatement299);
							attrOverwrite28=attrOverwrite();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, attrOverwrite28.Tree);
							DebugLocation(46, 134);
							// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:134: ( ',' ! attrOverwrite )*
							try { DebugEnterSubRule(11);
							while (true)
							{
								int alt11=2;
								try { DebugEnterDecision(11, false);
								int LA11_1 = input.LA(1);

								if ((LA11_1==79))
								{
									alt11 = 1;
								}


								} finally { DebugExitDecision(11); }
								switch ( alt11 )
								{
								case 1:
									DebugEnterAlt(1);
									// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:135: ',' ! attrOverwrite
									{
									DebugLocation(46, 138);
									char_literal29=(CommonToken)Match(input,79,Follow._79_in_importStatement302); if (state.failed) return retval;
									DebugLocation(46, 140);
									PushFollow(Follow._attrOverwrite_in_importStatement305);
									attrOverwrite30=attrOverwrite();
									PopFollow();
									if (state.failed) return retval;
									if (state.backtracking == 0) adaptor.AddChild(root_0, attrOverwrite30.Tree);

									}
									break;

								default:
									goto loop11;
								}
							}

							loop11:
								;

							} finally { DebugExitSubRule(11); }


							}
							break;

						}
						} finally { DebugExitSubRule(12); }

						DebugLocation(46, 159);
						PCLOSE31=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_importStatement312); if (state.failed) return retval;
						if (state.backtracking == 0) {
						PCLOSE31_tree = (CommonTree)adaptor.Create(PCLOSE31);
						adaptor.AddChild(root_0, PCLOSE31_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(13); }


					}
					break;

				default:
					if (cnt14 >= 1)
						goto loop14;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee14 = new EarlyExitException( 14, input );
					DebugRecognitionException(eee14);
					throw eee14;
				}
				cnt14++;
			}
			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importStatement", 5);
			LeaveRule("importStatement", 5);
			LeaveRule_importStatement();
			if (state.backtracking > 0) { Memoize(input, 5, importStatement_StartIndex); }

		}
		DebugLocation(47, 4);
		} finally { DebugExitRule(GrammarFileName, "importStatement"); }
		return retval;

	}
	// $ANTLR end "importStatement"

	partial void EnterRule_style();
	partial void LeaveRule_style();
	// $ANTLR start "style"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:49:1: style : STYLE ^ Identifier ( EXTENDS ! Identifier )? ;
	[GrammarRule("style")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> style()
	{
		EnterRule_style();
		EnterRule("style", 6);
		TraceIn("style", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int style_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken STYLE32 = default(CommonToken);
		CommonToken Identifier33 = default(CommonToken);
		CommonToken EXTENDS34 = default(CommonToken);
		CommonToken Identifier35 = default(CommonToken);

		CommonTree STYLE32_tree = default(CommonTree);
		CommonTree Identifier33_tree = default(CommonTree);
		CommonTree EXTENDS34_tree = default(CommonTree);
		CommonTree Identifier35_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "style");
		DebugLocation(49, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:50:5: ( STYLE ^ Identifier ( EXTENDS ! Identifier )? )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:50:7: STYLE ^ Identifier ( EXTENDS ! Identifier )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(50, 12);
			STYLE32=(CommonToken)Match(input,STYLE,Follow._STYLE_in_style334); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STYLE32_tree = (CommonTree)adaptor.Create(STYLE32);
			root_0 = (CommonTree)adaptor.BecomeRoot(STYLE32_tree, root_0);
			}
			DebugLocation(50, 14);
			Identifier33=(CommonToken)Match(input,Identifier,Follow._Identifier_in_style337); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Identifier33_tree = (CommonTree)adaptor.Create(Identifier33);
			adaptor.AddChild(root_0, Identifier33_tree);
			}
			DebugLocation(50, 25);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:50:25: ( EXTENDS ! Identifier )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==EXTENDS))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:50:27: EXTENDS ! Identifier
				{
				DebugLocation(50, 34);
				EXTENDS34=(CommonToken)Match(input,EXTENDS,Follow._EXTENDS_in_style341); if (state.failed) return retval;
				DebugLocation(50, 36);
				Identifier35=(CommonToken)Match(input,Identifier,Follow._Identifier_in_style344); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Identifier35_tree = (CommonTree)adaptor.Create(Identifier35);
				adaptor.AddChild(root_0, Identifier35_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("style", 6);
			LeaveRule("style", 6);
			LeaveRule_style();
			if (state.backtracking > 0) { Memoize(input, 6, style_StartIndex); }

		}
		DebugLocation(51, 4);
		} finally { DebugExitRule(GrammarFileName, "style"); }
		return retval;

	}
	// $ANTLR end "style"

	partial void EnterRule_annotation();
	partial void LeaveRule_annotation();
	// $ANTLR start "annotation"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:53:1: annotation : Annotation ^ ( annotationArguments )? ;
	[GrammarRule("annotation")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> annotation()
	{
		EnterRule_annotation();
		EnterRule("annotation", 7);
		TraceIn("annotation", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int annotation_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken Annotation36 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> annotationArguments37 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Annotation36_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotation");
		DebugLocation(53, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:54:5: ( Annotation ^ ( annotationArguments )? )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:54:7: Annotation ^ ( annotationArguments )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(54, 17);
			Annotation36=(CommonToken)Match(input,Annotation,Follow._Annotation_in_annotation364); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Annotation36_tree = (CommonTree)adaptor.Create(Annotation36);
			root_0 = (CommonTree)adaptor.BecomeRoot(Annotation36_tree, root_0);
			}
			DebugLocation(54, 19);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:54:19: ( annotationArguments )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==POPEN))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:54:19: annotationArguments
				{
				DebugLocation(54, 19);
				PushFollow(Follow._annotationArguments_in_annotation367);
				annotationArguments37=annotationArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationArguments37.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotation", 7);
			LeaveRule("annotation", 7);
			LeaveRule_annotation();
			if (state.backtracking > 0) { Memoize(input, 7, annotation_StartIndex); }

		}
		DebugLocation(55, 4);
		} finally { DebugExitRule(GrammarFileName, "annotation"); }
		return retval;

	}
	// $ANTLR end "annotation"

	partial void EnterRule_functionDefintion();
	partial void LeaveRule_functionDefintion();
	// $ANTLR start "functionDefintion"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:59:1: functionDefintion : signature EQUALS functionBody -> ^( EQUALS signature functionBody ) ;
	[GrammarRule("functionDefintion")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> functionDefintion()
	{
		EnterRule_functionDefintion();
		EnterRule("functionDefintion", 8);
		TraceIn("functionDefintion", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int functionDefintion_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS39 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> signature38 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> functionBody40 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS39_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleSubtreeStream stream_signature=new RewriteRuleSubtreeStream(adaptor,"rule signature");
		RewriteRuleSubtreeStream stream_functionBody=new RewriteRuleSubtreeStream(adaptor,"rule functionBody");
		try { DebugEnterRule(GrammarFileName, "functionDefintion");
		DebugLocation(59, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:60:2: ( signature EQUALS functionBody -> ^( EQUALS signature functionBody ) )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:60:4: signature EQUALS functionBody
			{
			DebugLocation(60, 4);
			PushFollow(Follow._signature_in_functionDefintion384);
			signature38=signature();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_signature.Add(signature38.Tree);
			DebugLocation(60, 14);
			EQUALS39=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_functionDefintion386); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS39);

			DebugLocation(60, 21);
			PushFollow(Follow._functionBody_in_functionDefintion388);
			functionBody40=functionBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_functionBody.Add(functionBody40.Tree);


			{
			// AST REWRITE
			// elements: EQUALS, signature, functionBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 60:34: -> ^( EQUALS signature functionBody )
			{
				DebugLocation(60, 37);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:60:37: ^( EQUALS signature functionBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(60, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EQUALS.NextNode(), root_1);

				DebugLocation(60, 46);
				adaptor.AddChild(root_1, stream_signature.NextTree());
				DebugLocation(60, 56);
				adaptor.AddChild(root_1, stream_functionBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDefintion", 8);
			LeaveRule("functionDefintion", 8);
			LeaveRule_functionDefintion();
			if (state.backtracking > 0) { Memoize(input, 8, functionDefintion_StartIndex); }

		}
		DebugLocation(61, 1);
		} finally { DebugExitRule(GrammarFileName, "functionDefintion"); }
		return retval;

	}
	// $ANTLR end "functionDefintion"

	partial void EnterRule_attrOverwrite();
	partial void LeaveRule_attrOverwrite();
	// $ANTLR start "attrOverwrite"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:63:1: attrOverwrite : ( identifier -> ^( EQUALS identifier ) | identifier EQUALS functionBody -> ^( EQUALS identifier functionBody ) );
	[GrammarRule("attrOverwrite")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> attrOverwrite()
	{
		EnterRule_attrOverwrite();
		EnterRule("attrOverwrite", 9);
		TraceIn("attrOverwrite", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int attrOverwrite_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS43 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> identifier41 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> identifier42 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> functionBody44 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS43_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_functionBody=new RewriteRuleSubtreeStream(adaptor,"rule functionBody");
		try { DebugEnterRule(GrammarFileName, "attrOverwrite");
		DebugLocation(63, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:64:5: ( identifier -> ^( EQUALS identifier ) | identifier EQUALS functionBody -> ^( EQUALS identifier functionBody ) )
			int alt17=2;
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==Identifier))
			{
				int LA17_2 = input.LA(2);

				if ((LA17_2==EOF||LA17_2==PCLOSE||LA17_2==79))
				{
					alt17 = 1;
				}
				else if ((LA17_2==EQUALS))
				{
					alt17 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:64:7: identifier
				{
				DebugLocation(64, 7);
				PushFollow(Follow._identifier_in_attrOverwrite412);
				identifier41=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_identifier.Add(identifier41.Tree);


				{
				// AST REWRITE
				// elements: identifier
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 64:38: -> ^( EQUALS identifier )
				{
					DebugLocation(64, 41);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:64:41: ^( EQUALS identifier )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(64, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EQUALS, "EQUALS"), root_1);

					DebugLocation(64, 50);
					adaptor.AddChild(root_1, stream_identifier.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:65:7: identifier EQUALS functionBody
				{
				DebugLocation(65, 7);
				PushFollow(Follow._identifier_in_attrOverwrite448);
				identifier42=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_identifier.Add(identifier42.Tree);
				DebugLocation(65, 18);
				EQUALS43=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_attrOverwrite450); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EQUALS.Add(EQUALS43);

				DebugLocation(65, 25);
				PushFollow(Follow._functionBody_in_attrOverwrite452);
				functionBody44=functionBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_functionBody.Add(functionBody44.Tree);


				{
				// AST REWRITE
				// elements: identifier, EQUALS, functionBody
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 65:38: -> ^( EQUALS identifier functionBody )
				{
					DebugLocation(65, 41);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:65:41: ^( EQUALS identifier functionBody )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(65, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_EQUALS.NextNode(), root_1);

					DebugLocation(65, 50);
					adaptor.AddChild(root_1, stream_identifier.NextTree());
					DebugLocation(65, 61);
					adaptor.AddChild(root_1, stream_functionBody.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attrOverwrite", 9);
			LeaveRule("attrOverwrite", 9);
			LeaveRule_attrOverwrite();
			if (state.backtracking > 0) { Memoize(input, 9, attrOverwrite_StartIndex); }

		}
		DebugLocation(66, 4);
		} finally { DebugExitRule(GrammarFileName, "attrOverwrite"); }
		return retval;

	}
	// $ANTLR end "attrOverwrite"

	partial void EnterRule_elseToken();
	partial void LeaveRule_elseToken();
	// $ANTLR start "elseToken"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:70:1: elseToken : ELSE ;
	[GrammarRule("elseToken")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> elseToken()
	{
		EnterRule_elseToken();
		EnterRule("elseToken", 10);
		TraceIn("elseToken", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int elseToken_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken ELSE45 = default(CommonToken);

		CommonTree ELSE45_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "elseToken");
		DebugLocation(70, 16);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:70:11: ( ELSE )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:70:13: ELSE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(70, 13);
			ELSE45=(CommonToken)Match(input,ELSE,Follow._ELSE_in_elseToken477); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ELSE45_tree = (CommonTree)adaptor.Create(ELSE45);
			adaptor.AddChild(root_0, ELSE45_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elseToken", 10);
			LeaveRule("elseToken", 10);
			LeaveRule_elseToken();
			if (state.backtracking > 0) { Memoize(input, 10, elseToken_StartIndex); }

		}
		DebugLocation(70, 16);
		} finally { DebugExitRule(GrammarFileName, "elseToken"); }
		return retval;

	}
	// $ANTLR end "elseToken"

	partial void EnterRule_functionBody();
	partial void LeaveRule_functionBody();
	// $ANTLR start "functionBody"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:72:1: functionBody : expression ;
	[GrammarRule("functionBody")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> functionBody()
	{
		EnterRule_functionBody();
		EnterRule("functionBody", 11);
		TraceIn("functionBody", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int functionBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> expression46 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "functionBody");
		DebugLocation(72, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:73:5: ( expression )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:73:7: expression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(73, 7);
			PushFollow(Follow._expression_in_functionBody489);
			expression46=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression46.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionBody", 11);
			LeaveRule("functionBody", 11);
			LeaveRule_functionBody();
			if (state.backtracking > 0) { Memoize(input, 11, functionBody_StartIndex); }

		}
		DebugLocation(74, 4);
		} finally { DebugExitRule(GrammarFileName, "functionBody"); }
		return retval;

	}
	// $ANTLR end "functionBody"

	partial void EnterRule_ruleDefinition();
	partial void LeaveRule_ruleDefinition();
	// $ANTLR start "ruleDefinition"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:78:8: public ruleDefinition : signature RULE_DEFINITION ruleBody -> ^( RULE_DEFINITION signature ruleBody ) ;
	[GrammarRule("ruleDefinition")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> ruleDefinition()
	{
		EnterRule_ruleDefinition();
		EnterRule("ruleDefinition", 12);
		TraceIn("ruleDefinition", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int ruleDefinition_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken RULE_DEFINITION48 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> signature47 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> ruleBody49 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree RULE_DEFINITION48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RULE_DEFINITION=new RewriteRuleITokenStream(adaptor,"token RULE_DEFINITION");
		RewriteRuleSubtreeStream stream_signature=new RewriteRuleSubtreeStream(adaptor,"rule signature");
		RewriteRuleSubtreeStream stream_ruleBody=new RewriteRuleSubtreeStream(adaptor,"rule ruleBody");
		try { DebugEnterRule(GrammarFileName, "ruleDefinition");
		DebugLocation(78, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:79:2: ( signature RULE_DEFINITION ruleBody -> ^( RULE_DEFINITION signature ruleBody ) )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:79:4: signature RULE_DEFINITION ruleBody
			{
			DebugLocation(79, 4);
			PushFollow(Follow._signature_in_ruleDefinition507);
			signature47=signature();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_signature.Add(signature47.Tree);
			DebugLocation(79, 14);
			RULE_DEFINITION48=(CommonToken)Match(input,RULE_DEFINITION,Follow._RULE_DEFINITION_in_ruleDefinition509); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RULE_DEFINITION.Add(RULE_DEFINITION48);

			DebugLocation(79, 30);
			PushFollow(Follow._ruleBody_in_ruleDefinition511);
			ruleBody49=ruleBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ruleBody.Add(ruleBody49.Tree);


			{
			// AST REWRITE
			// elements: ruleBody, signature, RULE_DEFINITION
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 79:39: -> ^( RULE_DEFINITION signature ruleBody )
			{
				DebugLocation(79, 42);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:79:42: ^( RULE_DEFINITION signature ruleBody )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(79, 44);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_RULE_DEFINITION.NextNode(), root_1);

				DebugLocation(79, 60);
				adaptor.AddChild(root_1, stream_signature.NextTree());
				DebugLocation(79, 70);
				adaptor.AddChild(root_1, stream_ruleBody.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ruleDefinition", 12);
			LeaveRule("ruleDefinition", 12);
			LeaveRule_ruleDefinition();
			if (state.backtracking > 0) { Memoize(input, 12, ruleDefinition_StartIndex); }

		}
		DebugLocation(80, 1);
		} finally { DebugExitRule(GrammarFileName, "ruleDefinition"); }
		return retval;

	}
	// $ANTLR end "ruleDefinition"

	partial void EnterRule_ruleCase();
	partial void LeaveRule_ruleCase();
	// $ANTLR start "ruleCase"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:82:1: ruleCase : ( (p+= ProbabilityLiteral COLON b+= ruleBody )+ p+= ELSE COLON b+= ruleBody -> {$p==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) ) | ( CASE e+= booleanExpression COLON b+= ruleBody )+ e+= elseToken COLON b+= ruleBody -> {$e==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) ) );
	[GrammarRule("ruleCase")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> ruleCase()
	{
		EnterRule_ruleCase();
		EnterRule("ruleCase", 13);
		TraceIn("ruleCase", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int ruleCase_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken COLON50 = default(CommonToken);
		CommonToken COLON51 = default(CommonToken);
		CommonToken CASE52 = default(CommonToken);
		CommonToken COLON53 = default(CommonToken);
		CommonToken COLON54 = default(CommonToken);
		CommonToken p = default(CommonToken);
		List<CommonToken> list_p = null;
		List<CommonTree> list_b = null;
		List<CommonTree> list_e = null;
		AstParserRuleReturnScope<CommonTree, CommonToken> b = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> e = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		CommonTree COLON50_tree = default(CommonTree);
		CommonTree COLON51_tree = default(CommonTree);
		CommonTree CASE52_tree = default(CommonTree);
		CommonTree COLON53_tree = default(CommonTree);
		CommonTree COLON54_tree = default(CommonTree);
		CommonTree p_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ProbabilityLiteral=new RewriteRuleITokenStream(adaptor,"token ProbabilityLiteral");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_ruleBody=new RewriteRuleSubtreeStream(adaptor,"rule ruleBody");
		RewriteRuleSubtreeStream stream_elseToken=new RewriteRuleSubtreeStream(adaptor,"rule elseToken");
		RewriteRuleSubtreeStream stream_booleanExpression=new RewriteRuleSubtreeStream(adaptor,"rule booleanExpression");
		try { DebugEnterRule(GrammarFileName, "ruleCase");
		DebugLocation(82, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:83:5: ( (p+= ProbabilityLiteral COLON b+= ruleBody )+ p+= ELSE COLON b+= ruleBody -> {$p==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) ) | ( CASE e+= booleanExpression COLON b+= ruleBody )+ e+= elseToken COLON b+= ruleBody -> {$e==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) ) )
			int alt20=2;
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==ProbabilityLiteral))
			{
				alt20 = 1;
			}
			else if ((LA20_1==CASE))
			{
				alt20 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:83:7: (p+= ProbabilityLiteral COLON b+= ruleBody )+ p+= ELSE COLON b+= ruleBody
				{
				DebugLocation(83, 7);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:83:7: (p+= ProbabilityLiteral COLON b+= ruleBody )+
				int cnt18=0;
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_1 = input.LA(1);

					if ((LA18_1==ProbabilityLiteral))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch (alt18)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:83:9: p+= ProbabilityLiteral COLON b+= ruleBody
						{
						DebugLocation(83, 10);
						p=(CommonToken)Match(input,ProbabilityLiteral,Follow._ProbabilityLiteral_in_ruleCase539); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_ProbabilityLiteral.Add(p);

						if (list_p==null) list_p=new List<CommonToken>();
						list_p.Add(p);

						DebugLocation(83, 31);
						COLON50=(CommonToken)Match(input,COLON,Follow._COLON_in_ruleCase541); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COLON.Add(COLON50);

						DebugLocation(83, 38);
						PushFollow(Follow._ruleBody_in_ruleCase545);
						b=ruleBody();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ruleBody.Add(b.Tree);
						if (list_b==null) list_b=new List<CommonTree>();
						list_b.Add(b.Tree);


						}
						break;

					default:
						if (cnt18 >= 1)
							goto loop18;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee18 = new EarlyExitException( 18, input );
						DebugRecognitionException(eee18);
						throw eee18;
					}
					cnt18++;
				}
				loop18:
					;

				} finally { DebugExitSubRule(18); }

				DebugLocation(83, 53);
				p=(CommonToken)Match(input,ELSE,Follow._ELSE_in_ruleCase552); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ELSE.Add(p);

				if (list_p==null) list_p=new List<CommonToken>();
				list_p.Add(p);

				DebugLocation(83, 60);
				COLON51=(CommonToken)Match(input,COLON,Follow._COLON_in_ruleCase554); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON51);

				DebugLocation(83, 67);
				PushFollow(Follow._ruleBody_in_ruleCase558);
				b=ruleBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ruleBody.Add(b.Tree);
				if (list_b==null) list_b=new List<CommonTree>();
				list_b.Add(b.Tree);



				{
				// AST REWRITE
				// elements: b, p
				// token labels: 
				// rule labels: retval
				// token list labels: p
				// rule list labels: b
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_p=new RewriteRuleITokenStream(adaptor,"token p", list_p);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
				root_0 = (CommonTree)adaptor.Nil();
				// 84:9: -> {$p==null}? ^( ERROR )
				if (list_p==null)
				{
					DebugLocation(84, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:84:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(84, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 85:9: -> {$b==null}? ^( ERROR )
				if (list_b==null)
				{
					DebugLocation(85, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:85:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(85, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 86:9: -> ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) )
				{
					DebugLocation(86, 12);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:86:12: ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(86, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CPROB, "CPROB"), root_1);

					DebugLocation(86, 20);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:86:20: ^( CPROB ( $p)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(86, 22);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CPROB, "CPROB"), root_2);

					DebugLocation(86, 29);
					if (!(stream_p.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_p.HasNext )
					{
						DebugLocation(86, 29);
						adaptor.AddChild(root_2, stream_p.NextNode());

					}
					stream_p.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(86, 33);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:86:33: ^( CBODY ( $b)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(86, 35);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CBODY, "CBODY"), root_2);

					DebugLocation(86, 42);
					if (!(stream_b.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_b.HasNext )
					{
						DebugLocation(86, 42);
						adaptor.AddChild(root_2, stream_b.NextTree());

					}
					stream_b.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:87:7: ( CASE e+= booleanExpression COLON b+= ruleBody )+ e+= elseToken COLON b+= ruleBody
				{
				DebugLocation(87, 7);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:87:7: ( CASE e+= booleanExpression COLON b+= ruleBody )+
				int cnt19=0;
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_1 = input.LA(1);

					if ((LA19_1==CASE))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:87:8: CASE e+= booleanExpression COLON b+= ruleBody
						{
						DebugLocation(87, 8);
						CASE52=(CommonToken)Match(input,CASE,Follow._CASE_in_ruleCase633); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_CASE.Add(CASE52);

						DebugLocation(87, 14);
						PushFollow(Follow._booleanExpression_in_ruleCase637);
						e=booleanExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_booleanExpression.Add(e.Tree);
						if (list_e==null) list_e=new List<CommonTree>();
						list_e.Add(e.Tree);

						DebugLocation(87, 35);
						COLON53=(CommonToken)Match(input,COLON,Follow._COLON_in_ruleCase640); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COLON.Add(COLON53);

						DebugLocation(87, 42);
						PushFollow(Follow._ruleBody_in_ruleCase644);
						b=ruleBody();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ruleBody.Add(b.Tree);
						if (list_b==null) list_b=new List<CommonTree>();
						list_b.Add(b.Tree);


						}
						break;

					default:
						if (cnt19 >= 1)
							goto loop19;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee19 = new EarlyExitException( 19, input );
						DebugRecognitionException(eee19);
						throw eee19;
					}
					cnt19++;
				}
				loop19:
					;

				} finally { DebugExitSubRule(19); }

				DebugLocation(87, 57);
				PushFollow(Follow._elseToken_in_ruleCase651);
				e=elseToken();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_elseToken.Add(e.Tree);
				if (list_e==null) list_e=new List<CommonTree>();
				list_e.Add(e.Tree);

				DebugLocation(87, 69);
				COLON54=(CommonToken)Match(input,COLON,Follow._COLON_in_ruleCase653); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON54);

				DebugLocation(87, 76);
				PushFollow(Follow._ruleBody_in_ruleCase657);
				b=ruleBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ruleBody.Add(b.Tree);
				if (list_b==null) list_b=new List<CommonTree>();
				list_b.Add(b.Tree);



				{
				// AST REWRITE
				// elements: b, e
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: b, e
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
				RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"token e",list_e);
				root_0 = (CommonTree)adaptor.Nil();
				// 88:9: -> {$e==null}? ^( ERROR )
				if (list_e==null)
				{
					DebugLocation(88, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:88:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(88, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 89:9: -> {$b==null}? ^( ERROR )
				if (list_b==null)
				{
					DebugLocation(89, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:89:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(89, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 90:9: -> ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) )
				{
					DebugLocation(90, 12);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:90:12: ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(90, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CEXPR, "CEXPR"), root_1);

					DebugLocation(90, 20);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:90:20: ^( CEXPR ( $e)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(90, 22);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CEXPR, "CEXPR"), root_2);

					DebugLocation(90, 29);
					if (!(stream_e.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_e.HasNext )
					{
						DebugLocation(90, 29);
						adaptor.AddChild(root_2, stream_e.NextTree());

					}
					stream_e.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(90, 33);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:90:33: ^( CBODY ( $b)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(90, 35);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CBODY, "CBODY"), root_2);

					DebugLocation(90, 42);
					if (!(stream_b.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_b.HasNext )
					{
						DebugLocation(90, 42);
						adaptor.AddChild(root_2, stream_b.NextTree());

					}
					stream_b.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ruleCase", 13);
			LeaveRule("ruleCase", 13);
			LeaveRule_ruleCase();
			if (state.backtracking > 0) { Memoize(input, 13, ruleCase_StartIndex); }

		}
		DebugLocation(91, 4);
		} finally { DebugExitRule(GrammarFileName, "ruleCase"); }
		return retval;

	}
	// $ANTLR end "ruleCase"

	partial void EnterRule_ruleBody();
	partial void LeaveRule_ruleBody();
	// $ANTLR start "ruleBody"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:93:1: ruleBody : ( ruleCase | shapeOpSeq );
	[GrammarRule("ruleBody")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> ruleBody()
	{
		EnterRule_ruleBody();
		EnterRule("ruleBody", 14);
		TraceIn("ruleBody", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int ruleBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> ruleCase55 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> shapeOpSeq56 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "ruleBody");
		DebugLocation(93, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:94:5: ( ruleCase | shapeOpSeq )
			int alt21=2;
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==CASE||LA21_1==ProbabilityLiteral))
			{
				alt21 = 1;
			}
			else if ((LA21_1==COMP||(LA21_1>=IRECT && LA21_1<=Identifier)||LA21_1==NIL||LA21_1==SCAT||(LA21_1>=SETB && LA21_1<=SHPU)||(LA21_1>=SPLIT && LA21_1<=SPLIT_AREA)||(LA21_1>=SPUSH && LA21_1<=SP_OP)||LA21_1==S_OP||(LA21_1>=TILEUV && LA21_1<=T_OP)))
			{
				alt21 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:94:7: ruleCase
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(94, 7);
				PushFollow(Follow._ruleCase_in_ruleBody740);
				ruleCase55=ruleCase();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ruleCase55.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:95:4: shapeOpSeq
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(95, 4);
				PushFollow(Follow._shapeOpSeq_in_ruleBody745);
				shapeOpSeq56=shapeOpSeq();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, shapeOpSeq56.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ruleBody", 14);
			LeaveRule("ruleBody", 14);
			LeaveRule_ruleBody();
			if (state.backtracking > 0) { Memoize(input, 14, ruleBody_StartIndex); }

		}
		DebugLocation(96, 1);
		} finally { DebugExitRule(GrammarFileName, "ruleBody"); }
		return retval;

	}
	// $ANTLR end "ruleBody"

	partial void EnterRule_stacked();
	partial void LeaveRule_stacked();
	// $ANTLR start "stacked"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:98:1: stacked : (push+= SPUSH pop+= SPOP -> ^( STACKED $push $pop) |push+= SPUSH s+= ruleBody pop+= SPOP -> ^( STACKED $push $s $pop) );
	[GrammarRule("stacked")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stacked()
	{
		EnterRule_stacked();
		EnterRule("stacked", 15);
		TraceIn("stacked", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int stacked_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken push = default(CommonToken);
		CommonToken pop = default(CommonToken);
		List<CommonToken> list_push = null;
		List<CommonToken> list_pop = null;
		List<CommonTree> list_s = null;
		AstParserRuleReturnScope<CommonTree, CommonToken> s = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		CommonTree push_tree = default(CommonTree);
		CommonTree pop_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SPOP=new RewriteRuleITokenStream(adaptor,"token SPOP");
		RewriteRuleITokenStream stream_SPUSH=new RewriteRuleITokenStream(adaptor,"token SPUSH");
		RewriteRuleSubtreeStream stream_ruleBody=new RewriteRuleSubtreeStream(adaptor,"rule ruleBody");
		try { DebugEnterRule(GrammarFileName, "stacked");
		DebugLocation(98, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:99:5: (push+= SPUSH pop+= SPOP -> ^( STACKED $push $pop) |push+= SPUSH s+= ruleBody pop+= SPOP -> ^( STACKED $push $s $pop) )
			int alt22=2;
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==SPUSH))
			{
				int LA22_2 = input.LA(2);

				if ((LA22_2==SPOP))
				{
					alt22 = 1;
				}
				else if ((LA22_2==CASE||LA22_2==COMP||(LA22_2>=IRECT && LA22_2<=Identifier)||LA22_2==NIL||LA22_2==ProbabilityLiteral||LA22_2==SCAT||(LA22_2>=SETB && LA22_2<=SHPU)||(LA22_2>=SPLIT && LA22_2<=SPLIT_AREA)||(LA22_2>=SPUSH && LA22_2<=SP_OP)||LA22_2==S_OP||(LA22_2>=TILEUV && LA22_2<=T_OP)))
				{
					alt22 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 22, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:99:7: push+= SPUSH pop+= SPOP
				{
				DebugLocation(99, 11);
				push=(CommonToken)Match(input,SPUSH,Follow._SPUSH_in_stacked761); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SPUSH.Add(push);

				if (list_push==null) list_push=new List<CommonToken>();
				list_push.Add(push);

				DebugLocation(99, 22);
				pop=(CommonToken)Match(input,SPOP,Follow._SPOP_in_stacked765); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SPOP.Add(pop);

				if (list_pop==null) list_pop=new List<CommonToken>();
				list_pop.Add(pop);



				{
				// AST REWRITE
				// elements: push, pop
				// token labels: 
				// rule labels: retval
				// token list labels: pop, push
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_pop=new RewriteRuleITokenStream(adaptor,"token pop", list_pop);
				RewriteRuleITokenStream stream_push=new RewriteRuleITokenStream(adaptor,"token push", list_push);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 99:29: -> ^( STACKED $push $pop)
				{
					DebugLocation(99, 32);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:99:32: ^( STACKED $push $pop)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(99, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STACKED, "STACKED"), root_1);

					DebugLocation(99, 43);
					adaptor.AddChild(root_1, stream_push.NextNode());
					DebugLocation(99, 49);
					adaptor.AddChild(root_1, stream_pop.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:100:7: push+= SPUSH s+= ruleBody pop+= SPOP
				{
				DebugLocation(100, 11);
				push=(CommonToken)Match(input,SPUSH,Follow._SPUSH_in_stacked787); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SPUSH.Add(push);

				if (list_push==null) list_push=new List<CommonToken>();
				list_push.Add(push);

				DebugLocation(100, 20);
				PushFollow(Follow._ruleBody_in_stacked791);
				s=ruleBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ruleBody.Add(s.Tree);
				if (list_s==null) list_s=new List<CommonTree>();
				list_s.Add(s.Tree);

				DebugLocation(100, 34);
				pop=(CommonToken)Match(input,SPOP,Follow._SPOP_in_stacked795); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SPOP.Add(pop);

				if (list_pop==null) list_pop=new List<CommonToken>();
				list_pop.Add(pop);



				{
				// AST REWRITE
				// elements: push, pop, s
				// token labels: 
				// rule labels: retval
				// token list labels: pop, push
				// rule list labels: s
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_pop=new RewriteRuleITokenStream(adaptor,"token pop", list_pop);
				RewriteRuleITokenStream stream_push=new RewriteRuleITokenStream(adaptor,"token push", list_push);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"token s",list_s);
				root_0 = (CommonTree)adaptor.Nil();
				// 100:41: -> ^( STACKED $push $s $pop)
				{
					DebugLocation(100, 44);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:100:44: ^( STACKED $push $s $pop)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(100, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STACKED, "STACKED"), root_1);

					DebugLocation(100, 55);
					adaptor.AddChild(root_1, stream_push.NextNode());
					DebugLocation(100, 61);
					adaptor.AddChild(root_1, stream_s.NextTree());
					DebugLocation(100, 64);
					adaptor.AddChild(root_1, stream_pop.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stacked", 15);
			LeaveRule("stacked", 15);
			LeaveRule_stacked();
			if (state.backtracking > 0) { Memoize(input, 15, stacked_StartIndex); }

		}
		DebugLocation(101, 1);
		} finally { DebugExitRule(GrammarFileName, "stacked"); }
		return retval;

	}
	// $ANTLR end "stacked"

	partial void EnterRule_shapeOpSeq();
	partial void LeaveRule_shapeOpSeq();
	// $ANTLR start "shapeOpSeq"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:103:1: shapeOpSeq : (s+= shapeOp )+ -> ^( OPSEQ ( $s)+ ) ;
	[GrammarRule("shapeOpSeq")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> shapeOpSeq()
	{
		EnterRule_shapeOpSeq();
		EnterRule("shapeOpSeq", 16);
		TraceIn("shapeOpSeq", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int shapeOpSeq_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		List<CommonTree> list_s = null;
		AstParserRuleReturnScope<CommonTree, CommonToken> s = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		RewriteRuleSubtreeStream stream_shapeOp=new RewriteRuleSubtreeStream(adaptor,"rule shapeOp");
		try { DebugEnterRule(GrammarFileName, "shapeOpSeq");
		DebugLocation(103, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:104:2: ( (s+= shapeOp )+ -> ^( OPSEQ ( $s)+ ) )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:104:4: (s+= shapeOp )+
			{
			DebugLocation(104, 4);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:104:4: (s+= shapeOp )+
			int cnt23=0;
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_1 = input.LA(1);

				if ((LA23_1==COMP||(LA23_1>=IRECT && LA23_1<=Identifier)||LA23_1==NIL||LA23_1==SCAT||(LA23_1>=SETB && LA23_1<=SHPU)||(LA23_1>=SPLIT && LA23_1<=SPLIT_AREA)||(LA23_1>=SPUSH && LA23_1<=SP_OP)||LA23_1==S_OP||(LA23_1>=TILEUV && LA23_1<=T_OP)))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:104:5: s+= shapeOp
					{
					DebugLocation(104, 6);
					PushFollow(Follow._shapeOp_in_shapeOpSeq824);
					s=shapeOp();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shapeOp.Add(s.Tree);
					if (list_s==null) list_s=new List<CommonTree>();
					list_s.Add(s.Tree);


					}
					break;

				default:
					if (cnt23 >= 1)
						goto loop23;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee23 = new EarlyExitException( 23, input );
					DebugRecognitionException(eee23);
					throw eee23;
				}
				cnt23++;
			}
			loop23:
				;

			} finally { DebugExitSubRule(23); }



			{
			// AST REWRITE
			// elements: s
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: s
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"token s",list_s);
			root_0 = (CommonTree)adaptor.Nil();
			// 104:18: -> ^( OPSEQ ( $s)+ )
			{
				DebugLocation(104, 21);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:104:21: ^( OPSEQ ( $s)+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(104, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(OPSEQ, "OPSEQ"), root_1);

				DebugLocation(104, 30);
				if (!(stream_s.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_s.HasNext )
				{
					DebugLocation(104, 30);
					adaptor.AddChild(root_1, stream_s.NextTree());

				}
				stream_s.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shapeOpSeq", 16);
			LeaveRule("shapeOpSeq", 16);
			LeaveRule_shapeOpSeq();
			if (state.backtracking > 0) { Memoize(input, 16, shapeOpSeq_StartIndex); }

		}
		DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "shapeOpSeq"); }
		return retval;

	}
	// $ANTLR end "shapeOpSeq"

	partial void EnterRule_shapeOp();
	partial void LeaveRule_shapeOp();
	// $ANTLR start "shapeOp"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:107:1: shapeOp : ( NIL | SPLIT ^ '(' ! selOrId ( ',' ! selOrId ( ',' ! numericExpression )? )? ')' splitExpression | SPLIT_AREA ^ '(' ! selOrId ( ',' ! selOrId )? ')' splitExpression | COMP ^ '(' ! selOrId ')' ! '{' ! compListOrSetback '}' !| SETB ^ '(' ! numericExpression ( ',' ! numericExpression )? ')' '{' ! compListOrSetback '}' !| SHPL ^ '(' ! numericExpression ',' ! numericExpression ')' ! '{' ! shapeLUOOrIRectList '}' !| SHPU ^ '(' ! numericExpression ',' ! numericExpression ',' ! numericExpression ')' ! '{' ! shapeLUOOrIRectList '}' !| SHPO ^ '(' ! numericExpression ',' ! numericExpression ',' ! numericExpression ',' ! numericExpression ')' ! '{' ! shapeLUOOrIRectList '}' !| IRECT ^ '(' ! selOrId ')' ! '{' ! shapeLUOOrIRectList '}' !| SCAT ^ '(' ! selOrId ',' ! numericExpression ',' ! selOrId ( ',' ! selOrId ',' ! scaleRelativeExpression )? ')' ! '{' ! shapeOpSeq '}' !| S_OP ^ '(' ! scaleRelativeExpression ',' ! scaleRelativeExpression ',' ! scaleRelativeExpression ')' !| T_OP ^ '(' ! scaleRelativeExpression ',' ! scaleRelativeExpression ',' ! scaleRelativeExpression ')' !| SP_OP ^ '(' ! numericExpression ',' ! selOrId ',' ! scaleRelativeOrFloatingExpression ',' ! scaleRelativeOrFloatingExpression ( ',' ! numericExpression )? ')' !| SP_OP ^ '(' ! numericExpression ',' ! selOrId ',' ! scaleRelativeOrFloatingExpression ',' ! scaleRelativeOrFloatingExpression ',' ! scaleRelativeOrFloatingExpression ',' ! scaleRelativeOrFloatingExpression ( ',' ! numericExpression )? ')' !| TILEUV ^ '(' ! numericExpression ',' ! scaleRelativeOrFloatingExpression ',' ! scaleRelativeOrFloatingExpression ')' !| SET_OP ^ '(' ! selOrId ',' ! expression ')' !| Identifier ^ ( arguments )? | stacked );
	[GrammarRule("shapeOp")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> shapeOp()
	{
		EnterRule_shapeOp();
		EnterRule("shapeOp", 17);
		TraceIn("shapeOp", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int shapeOp_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken NIL57 = default(CommonToken);
		CommonToken SPLIT58 = default(CommonToken);
		CommonToken char_literal59 = default(CommonToken);
		CommonToken char_literal61 = default(CommonToken);
		CommonToken char_literal63 = default(CommonToken);
		CommonToken char_literal65 = default(CommonToken);
		CommonToken SPLIT_AREA67 = default(CommonToken);
		CommonToken char_literal68 = default(CommonToken);
		CommonToken char_literal70 = default(CommonToken);
		CommonToken char_literal72 = default(CommonToken);
		CommonToken COMP74 = default(CommonToken);
		CommonToken char_literal75 = default(CommonToken);
		CommonToken char_literal77 = default(CommonToken);
		CommonToken char_literal78 = default(CommonToken);
		CommonToken char_literal80 = default(CommonToken);
		CommonToken SETB81 = default(CommonToken);
		CommonToken char_literal82 = default(CommonToken);
		CommonToken char_literal84 = default(CommonToken);
		CommonToken char_literal86 = default(CommonToken);
		CommonToken char_literal87 = default(CommonToken);
		CommonToken char_literal89 = default(CommonToken);
		CommonToken SHPL90 = default(CommonToken);
		CommonToken char_literal91 = default(CommonToken);
		CommonToken char_literal93 = default(CommonToken);
		CommonToken char_literal95 = default(CommonToken);
		CommonToken char_literal96 = default(CommonToken);
		CommonToken char_literal98 = default(CommonToken);
		CommonToken SHPU99 = default(CommonToken);
		CommonToken char_literal100 = default(CommonToken);
		CommonToken char_literal102 = default(CommonToken);
		CommonToken char_literal104 = default(CommonToken);
		CommonToken char_literal106 = default(CommonToken);
		CommonToken char_literal107 = default(CommonToken);
		CommonToken char_literal109 = default(CommonToken);
		CommonToken SHPO110 = default(CommonToken);
		CommonToken char_literal111 = default(CommonToken);
		CommonToken char_literal113 = default(CommonToken);
		CommonToken char_literal115 = default(CommonToken);
		CommonToken char_literal117 = default(CommonToken);
		CommonToken char_literal119 = default(CommonToken);
		CommonToken char_literal120 = default(CommonToken);
		CommonToken char_literal122 = default(CommonToken);
		CommonToken IRECT123 = default(CommonToken);
		CommonToken char_literal124 = default(CommonToken);
		CommonToken char_literal126 = default(CommonToken);
		CommonToken char_literal127 = default(CommonToken);
		CommonToken char_literal129 = default(CommonToken);
		CommonToken SCAT130 = default(CommonToken);
		CommonToken char_literal131 = default(CommonToken);
		CommonToken char_literal133 = default(CommonToken);
		CommonToken char_literal135 = default(CommonToken);
		CommonToken char_literal137 = default(CommonToken);
		CommonToken char_literal139 = default(CommonToken);
		CommonToken char_literal141 = default(CommonToken);
		CommonToken char_literal142 = default(CommonToken);
		CommonToken char_literal144 = default(CommonToken);
		CommonToken S_OP145 = default(CommonToken);
		CommonToken char_literal146 = default(CommonToken);
		CommonToken char_literal148 = default(CommonToken);
		CommonToken char_literal150 = default(CommonToken);
		CommonToken char_literal152 = default(CommonToken);
		CommonToken T_OP153 = default(CommonToken);
		CommonToken char_literal154 = default(CommonToken);
		CommonToken char_literal156 = default(CommonToken);
		CommonToken char_literal158 = default(CommonToken);
		CommonToken char_literal160 = default(CommonToken);
		CommonToken SP_OP161 = default(CommonToken);
		CommonToken char_literal162 = default(CommonToken);
		CommonToken char_literal164 = default(CommonToken);
		CommonToken char_literal166 = default(CommonToken);
		CommonToken char_literal168 = default(CommonToken);
		CommonToken char_literal170 = default(CommonToken);
		CommonToken char_literal172 = default(CommonToken);
		CommonToken SP_OP173 = default(CommonToken);
		CommonToken char_literal174 = default(CommonToken);
		CommonToken char_literal176 = default(CommonToken);
		CommonToken char_literal178 = default(CommonToken);
		CommonToken char_literal180 = default(CommonToken);
		CommonToken char_literal182 = default(CommonToken);
		CommonToken char_literal184 = default(CommonToken);
		CommonToken char_literal186 = default(CommonToken);
		CommonToken char_literal188 = default(CommonToken);
		CommonToken TILEUV189 = default(CommonToken);
		CommonToken char_literal190 = default(CommonToken);
		CommonToken char_literal192 = default(CommonToken);
		CommonToken char_literal194 = default(CommonToken);
		CommonToken char_literal196 = default(CommonToken);
		CommonToken SET_OP197 = default(CommonToken);
		CommonToken char_literal198 = default(CommonToken);
		CommonToken char_literal200 = default(CommonToken);
		CommonToken char_literal202 = default(CommonToken);
		CommonToken Identifier203 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selOrId60 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selOrId62 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression64 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> splitExpression66 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selOrId69 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selOrId71 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> splitExpression73 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selOrId76 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> compListOrSetback79 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression83 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression85 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> compListOrSetback88 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression92 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression94 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> shapeLUOOrIRectList97 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression101 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression103 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression105 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> shapeLUOOrIRectList108 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression112 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression114 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression116 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression118 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> shapeLUOOrIRectList121 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selOrId125 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> shapeLUOOrIRectList128 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selOrId132 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression134 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selOrId136 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selOrId138 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeExpression140 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> shapeOpSeq143 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeExpression147 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeExpression149 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeExpression151 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeExpression155 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeExpression157 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeExpression159 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression163 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selOrId165 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeOrFloatingExpression167 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeOrFloatingExpression169 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression171 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression175 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selOrId177 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeOrFloatingExpression179 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeOrFloatingExpression181 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeOrFloatingExpression183 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeOrFloatingExpression185 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression187 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression191 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeOrFloatingExpression193 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeOrFloatingExpression195 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selOrId199 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression201 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> arguments204 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stacked205 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NIL57_tree = default(CommonTree);
		CommonTree SPLIT58_tree = default(CommonTree);
		CommonTree char_literal59_tree = default(CommonTree);
		CommonTree char_literal61_tree = default(CommonTree);
		CommonTree char_literal63_tree = default(CommonTree);
		CommonTree char_literal65_tree = default(CommonTree);
		CommonTree SPLIT_AREA67_tree = default(CommonTree);
		CommonTree char_literal68_tree = default(CommonTree);
		CommonTree char_literal70_tree = default(CommonTree);
		CommonTree char_literal72_tree = default(CommonTree);
		CommonTree COMP74_tree = default(CommonTree);
		CommonTree char_literal75_tree = default(CommonTree);
		CommonTree char_literal77_tree = default(CommonTree);
		CommonTree char_literal78_tree = default(CommonTree);
		CommonTree char_literal80_tree = default(CommonTree);
		CommonTree SETB81_tree = default(CommonTree);
		CommonTree char_literal82_tree = default(CommonTree);
		CommonTree char_literal84_tree = default(CommonTree);
		CommonTree char_literal86_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		CommonTree char_literal89_tree = default(CommonTree);
		CommonTree SHPL90_tree = default(CommonTree);
		CommonTree char_literal91_tree = default(CommonTree);
		CommonTree char_literal93_tree = default(CommonTree);
		CommonTree char_literal95_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree SHPU99_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		CommonTree char_literal102_tree = default(CommonTree);
		CommonTree char_literal104_tree = default(CommonTree);
		CommonTree char_literal106_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree char_literal109_tree = default(CommonTree);
		CommonTree SHPO110_tree = default(CommonTree);
		CommonTree char_literal111_tree = default(CommonTree);
		CommonTree char_literal113_tree = default(CommonTree);
		CommonTree char_literal115_tree = default(CommonTree);
		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree char_literal119_tree = default(CommonTree);
		CommonTree char_literal120_tree = default(CommonTree);
		CommonTree char_literal122_tree = default(CommonTree);
		CommonTree IRECT123_tree = default(CommonTree);
		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal126_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree SCAT130_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		CommonTree char_literal133_tree = default(CommonTree);
		CommonTree char_literal135_tree = default(CommonTree);
		CommonTree char_literal137_tree = default(CommonTree);
		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree char_literal141_tree = default(CommonTree);
		CommonTree char_literal142_tree = default(CommonTree);
		CommonTree char_literal144_tree = default(CommonTree);
		CommonTree S_OP145_tree = default(CommonTree);
		CommonTree char_literal146_tree = default(CommonTree);
		CommonTree char_literal148_tree = default(CommonTree);
		CommonTree char_literal150_tree = default(CommonTree);
		CommonTree char_literal152_tree = default(CommonTree);
		CommonTree T_OP153_tree = default(CommonTree);
		CommonTree char_literal154_tree = default(CommonTree);
		CommonTree char_literal156_tree = default(CommonTree);
		CommonTree char_literal158_tree = default(CommonTree);
		CommonTree char_literal160_tree = default(CommonTree);
		CommonTree SP_OP161_tree = default(CommonTree);
		CommonTree char_literal162_tree = default(CommonTree);
		CommonTree char_literal164_tree = default(CommonTree);
		CommonTree char_literal166_tree = default(CommonTree);
		CommonTree char_literal168_tree = default(CommonTree);
		CommonTree char_literal170_tree = default(CommonTree);
		CommonTree char_literal172_tree = default(CommonTree);
		CommonTree SP_OP173_tree = default(CommonTree);
		CommonTree char_literal174_tree = default(CommonTree);
		CommonTree char_literal176_tree = default(CommonTree);
		CommonTree char_literal178_tree = default(CommonTree);
		CommonTree char_literal180_tree = default(CommonTree);
		CommonTree char_literal182_tree = default(CommonTree);
		CommonTree char_literal184_tree = default(CommonTree);
		CommonTree char_literal186_tree = default(CommonTree);
		CommonTree char_literal188_tree = default(CommonTree);
		CommonTree TILEUV189_tree = default(CommonTree);
		CommonTree char_literal190_tree = default(CommonTree);
		CommonTree char_literal192_tree = default(CommonTree);
		CommonTree char_literal194_tree = default(CommonTree);
		CommonTree char_literal196_tree = default(CommonTree);
		CommonTree SET_OP197_tree = default(CommonTree);
		CommonTree char_literal198_tree = default(CommonTree);
		CommonTree char_literal200_tree = default(CommonTree);
		CommonTree char_literal202_tree = default(CommonTree);
		CommonTree Identifier203_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shapeOp");
		DebugLocation(107, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:108:5: ( NIL | SPLIT ^ '(' ! selOrId ( ',' ! selOrId ( ',' ! numericExpression )? )? ')' splitExpression | SPLIT_AREA ^ '(' ! selOrId ( ',' ! selOrId )? ')' splitExpression | COMP ^ '(' ! selOrId ')' ! '{' ! compListOrSetback '}' !| SETB ^ '(' ! numericExpression ( ',' ! numericExpression )? ')' '{' ! compListOrSetback '}' !| SHPL ^ '(' ! numericExpression ',' ! numericExpression ')' ! '{' ! shapeLUOOrIRectList '}' !| SHPU ^ '(' ! numericExpression ',' ! numericExpression ',' ! numericExpression ')' ! '{' ! shapeLUOOrIRectList '}' !| SHPO ^ '(' ! numericExpression ',' ! numericExpression ',' ! numericExpression ',' ! numericExpression ')' ! '{' ! shapeLUOOrIRectList '}' !| IRECT ^ '(' ! selOrId ')' ! '{' ! shapeLUOOrIRectList '}' !| SCAT ^ '(' ! selOrId ',' ! numericExpression ',' ! selOrId ( ',' ! selOrId ',' ! scaleRelativeExpression )? ')' ! '{' ! shapeOpSeq '}' !| S_OP ^ '(' ! scaleRelativeExpression ',' ! scaleRelativeExpression ',' ! scaleRelativeExpression ')' !| T_OP ^ '(' ! scaleRelativeExpression ',' ! scaleRelativeExpression ',' ! scaleRelativeExpression ')' !| SP_OP ^ '(' ! numericExpression ',' ! selOrId ',' ! scaleRelativeOrFloatingExpression ',' ! scaleRelativeOrFloatingExpression ( ',' ! numericExpression )? ')' !| SP_OP ^ '(' ! numericExpression ',' ! selOrId ',' ! scaleRelativeOrFloatingExpression ',' ! scaleRelativeOrFloatingExpression ',' ! scaleRelativeOrFloatingExpression ',' ! scaleRelativeOrFloatingExpression ( ',' ! numericExpression )? ')' !| TILEUV ^ '(' ! numericExpression ',' ! scaleRelativeOrFloatingExpression ',' ! scaleRelativeOrFloatingExpression ')' !| SET_OP ^ '(' ! selOrId ',' ! expression ')' !| Identifier ^ ( arguments )? | stacked )
			int alt32=18;
			try { DebugEnterDecision(32, false);
			switch (input.LA(1))
			{
			case NIL:
				{
				alt32 = 1;
				}
				break;
			case SPLIT:
				{
				alt32 = 2;
				}
				break;
			case SPLIT_AREA:
				{
				alt32 = 3;
				}
				break;
			case COMP:
				{
				alt32 = 4;
				}
				break;
			case SETB:
				{
				alt32 = 5;
				}
				break;
			case SHPL:
				{
				alt32 = 6;
				}
				break;
			case SHPU:
				{
				alt32 = 7;
				}
				break;
			case SHPO:
				{
				alt32 = 8;
				}
				break;
			case IRECT:
				{
				alt32 = 9;
				}
				break;
			case SCAT:
				{
				alt32 = 10;
				}
				break;
			case S_OP:
				{
				alt32 = 11;
				}
				break;
			case T_OP:
				{
				alt32 = 12;
				}
				break;
			case SP_OP:
				{
				int LA32_2 = input.LA(2);

				if ((LA32_2==POPEN))
				{
					switch (input.LA(3))
					{
					case PLUS:
						{
						int LA32_4 = input.LA(4);

						if ((EvaluatePredicate(synpred45_CGA_fragment)))
						{
							alt32 = 13;
						}
						else if ((EvaluatePredicate(synpred47_CGA_fragment)))
						{
							alt32 = 14;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 32, 19, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case POPEN:
						{
						int LA32_4 = input.LA(4);

						if ((EvaluatePredicate(synpred45_CGA_fragment)))
						{
							alt32 = 13;
						}
						else if ((EvaluatePredicate(synpred47_CGA_fragment)))
						{
							alt32 = 14;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 32, 20, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case FloatingPointLiteral:
						{
						int LA32_4 = input.LA(4);

						if ((EvaluatePredicate(synpred45_CGA_fragment)))
						{
							alt32 = 13;
						}
						else if ((EvaluatePredicate(synpred47_CGA_fragment)))
						{
							alt32 = 14;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 32, 21, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case SEL:
						{
						int LA32_4 = input.LA(4);

						if ((EvaluatePredicate(synpred45_CGA_fragment)))
						{
							alt32 = 13;
						}
						else if ((EvaluatePredicate(synpred47_CGA_fragment)))
						{
							alt32 = 14;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 32, 22, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case Identifier:
						{
						int LA32_4 = input.LA(4);

						if ((EvaluatePredicate(synpred45_CGA_fragment)))
						{
							alt32 = 13;
						}
						else if ((EvaluatePredicate(synpred47_CGA_fragment)))
						{
							alt32 = 14;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 32, 23, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case MINUS:
						{
						int LA32_4 = input.LA(4);

						if ((EvaluatePredicate(synpred45_CGA_fragment)))
						{
							alt32 = 13;
						}
						else if ((EvaluatePredicate(synpred47_CGA_fragment)))
						{
							alt32 = 14;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 32, 24, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 32, 18, input, 3);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 32, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TILEUV:
				{
				alt32 = 15;
				}
				break;
			case SET_OP:
				{
				alt32 = 16;
				}
				break;
			case Identifier:
				{
				alt32 = 17;
				}
				break;
			case SPUSH:
				{
				alt32 = 18;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 32, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:108:7: NIL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(108, 7);
				NIL57=(CommonToken)Match(input,NIL,Follow._NIL_in_shapeOp850); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NIL57_tree = (CommonTree)adaptor.Create(NIL57);
				adaptor.AddChild(root_0, NIL57_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:109:9: SPLIT ^ '(' ! selOrId ( ',' ! selOrId ( ',' ! numericExpression )? )? ')' splitExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(109, 14);
				SPLIT58=(CommonToken)Match(input,SPLIT,Follow._SPLIT_in_shapeOp860); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SPLIT58_tree = (CommonTree)adaptor.Create(SPLIT58);
				root_0 = (CommonTree)adaptor.BecomeRoot(SPLIT58_tree, root_0);
				}
				DebugLocation(109, 24);
				char_literal59=(CommonToken)Match(input,POPEN,Follow._POPEN_in_shapeOp868); if (state.failed) return retval;
				DebugLocation(109, 26);
				PushFollow(Follow._selOrId_in_shapeOp871);
				selOrId60=selOrId();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selOrId60.Tree);
				DebugLocation(109, 34);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:109:34: ( ',' ! selOrId ( ',' ! numericExpression )? )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==79))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:109:35: ',' ! selOrId ( ',' ! numericExpression )?
					{
					DebugLocation(109, 38);
					char_literal61=(CommonToken)Match(input,79,Follow._79_in_shapeOp874); if (state.failed) return retval;
					DebugLocation(109, 40);
					PushFollow(Follow._selOrId_in_shapeOp877);
					selOrId62=selOrId();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, selOrId62.Tree);
					DebugLocation(109, 48);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:109:48: ( ',' ! numericExpression )?
					int alt24=2;
					try { DebugEnterSubRule(24);
					try { DebugEnterDecision(24, false);
					int LA24_1 = input.LA(1);

					if ((LA24_1==79))
					{
						alt24 = 1;
					}
					} finally { DebugExitDecision(24); }
					switch (alt24)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:109:50: ',' ! numericExpression
						{
						DebugLocation(109, 53);
						char_literal63=(CommonToken)Match(input,79,Follow._79_in_shapeOp881); if (state.failed) return retval;
						DebugLocation(109, 55);
						PushFollow(Follow._numericExpression_in_shapeOp884);
						numericExpression64=numericExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression64.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(24); }


					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(109, 79);
				char_literal65=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_shapeOp892); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal65_tree = (CommonTree)adaptor.Create(char_literal65);
				adaptor.AddChild(root_0, char_literal65_tree);
				}
				DebugLocation(109, 83);
				PushFollow(Follow._splitExpression_in_shapeOp894);
				splitExpression66=splitExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, splitExpression66.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:110:9: SPLIT_AREA ^ '(' ! selOrId ( ',' ! selOrId )? ')' splitExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(110, 19);
				SPLIT_AREA67=(CommonToken)Match(input,SPLIT_AREA,Follow._SPLIT_AREA_in_shapeOp904); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SPLIT_AREA67_tree = (CommonTree)adaptor.Create(SPLIT_AREA67);
				root_0 = (CommonTree)adaptor.BecomeRoot(SPLIT_AREA67_tree, root_0);
				}
				DebugLocation(110, 24);
				char_literal68=(CommonToken)Match(input,POPEN,Follow._POPEN_in_shapeOp907); if (state.failed) return retval;
				DebugLocation(110, 26);
				PushFollow(Follow._selOrId_in_shapeOp910);
				selOrId69=selOrId();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selOrId69.Tree);
				DebugLocation(110, 34);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:110:34: ( ',' ! selOrId )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1==79))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:110:35: ',' ! selOrId
					{
					DebugLocation(110, 38);
					char_literal70=(CommonToken)Match(input,79,Follow._79_in_shapeOp913); if (state.failed) return retval;
					DebugLocation(110, 40);
					PushFollow(Follow._selOrId_in_shapeOp916);
					selOrId71=selOrId();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, selOrId71.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(26); }

				DebugLocation(110, 51);
				char_literal72=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_shapeOp921); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal72_tree = (CommonTree)adaptor.Create(char_literal72);
				adaptor.AddChild(root_0, char_literal72_tree);
				}
				DebugLocation(110, 55);
				PushFollow(Follow._splitExpression_in_shapeOp923);
				splitExpression73=splitExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, splitExpression73.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:111:9: COMP ^ '(' ! selOrId ')' ! '{' ! compListOrSetback '}' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(111, 13);
				COMP74=(CommonToken)Match(input,COMP,Follow._COMP_in_shapeOp933); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMP74_tree = (CommonTree)adaptor.Create(COMP74);
				root_0 = (CommonTree)adaptor.BecomeRoot(COMP74_tree, root_0);
				}
				DebugLocation(111, 24);
				char_literal75=(CommonToken)Match(input,POPEN,Follow._POPEN_in_shapeOp942); if (state.failed) return retval;
				DebugLocation(111, 26);
				PushFollow(Follow._selOrId_in_shapeOp945);
				selOrId76=selOrId();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selOrId76.Tree);
				DebugLocation(111, 37);
				char_literal77=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_shapeOp947); if (state.failed) return retval;
				DebugLocation(111, 42);
				char_literal78=(CommonToken)Match(input,81,Follow._81_in_shapeOp950); if (state.failed) return retval;
				DebugLocation(111, 44);
				PushFollow(Follow._compListOrSetback_in_shapeOp953);
				compListOrSetback79=compListOrSetback();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compListOrSetback79.Tree);
				DebugLocation(111, 65);
				char_literal80=(CommonToken)Match(input,82,Follow._82_in_shapeOp955); if (state.failed) return retval;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:112:9: SETB ^ '(' ! numericExpression ( ',' ! numericExpression )? ')' '{' ! compListOrSetback '}' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(112, 13);
				SETB81=(CommonToken)Match(input,SETB,Follow._SETB_in_shapeOp966); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SETB81_tree = (CommonTree)adaptor.Create(SETB81);
				root_0 = (CommonTree)adaptor.BecomeRoot(SETB81_tree, root_0);
				}
				DebugLocation(112, 24);
				char_literal82=(CommonToken)Match(input,POPEN,Follow._POPEN_in_shapeOp975); if (state.failed) return retval;
				DebugLocation(112, 26);
				PushFollow(Follow._numericExpression_in_shapeOp978);
				numericExpression83=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression83.Tree);
				DebugLocation(112, 44);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:112:44: ( ',' ! numericExpression )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==79))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:112:46: ',' ! numericExpression
					{
					DebugLocation(112, 49);
					char_literal84=(CommonToken)Match(input,79,Follow._79_in_shapeOp982); if (state.failed) return retval;
					DebugLocation(112, 51);
					PushFollow(Follow._numericExpression_in_shapeOp985);
					numericExpression85=numericExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression85.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(112, 72);
				char_literal86=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_shapeOp990); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal86_tree = (CommonTree)adaptor.Create(char_literal86);
				adaptor.AddChild(root_0, char_literal86_tree);
				}
				DebugLocation(112, 79);
				char_literal87=(CommonToken)Match(input,81,Follow._81_in_shapeOp992); if (state.failed) return retval;
				DebugLocation(112, 81);
				PushFollow(Follow._compListOrSetback_in_shapeOp995);
				compListOrSetback88=compListOrSetback();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compListOrSetback88.Tree);
				DebugLocation(112, 102);
				char_literal89=(CommonToken)Match(input,82,Follow._82_in_shapeOp997); if (state.failed) return retval;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:113:9: SHPL ^ '(' ! numericExpression ',' ! numericExpression ')' ! '{' ! shapeLUOOrIRectList '}' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(113, 13);
				SHPL90=(CommonToken)Match(input,SHPL,Follow._SHPL_in_shapeOp1008); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SHPL90_tree = (CommonTree)adaptor.Create(SHPL90);
				root_0 = (CommonTree)adaptor.BecomeRoot(SHPL90_tree, root_0);
				}
				DebugLocation(113, 24);
				char_literal91=(CommonToken)Match(input,POPEN,Follow._POPEN_in_shapeOp1017); if (state.failed) return retval;
				DebugLocation(113, 26);
				PushFollow(Follow._numericExpression_in_shapeOp1020);
				numericExpression92=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression92.Tree);
				DebugLocation(113, 47);
				char_literal93=(CommonToken)Match(input,79,Follow._79_in_shapeOp1022); if (state.failed) return retval;
				DebugLocation(113, 49);
				PushFollow(Follow._numericExpression_in_shapeOp1025);
				numericExpression94=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression94.Tree);
				DebugLocation(113, 70);
				char_literal95=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_shapeOp1027); if (state.failed) return retval;
				DebugLocation(113, 134);
				char_literal96=(CommonToken)Match(input,81,Follow._81_in_shapeOp1089); if (state.failed) return retval;
				DebugLocation(113, 136);
				PushFollow(Follow._shapeLUOOrIRectList_in_shapeOp1092);
				shapeLUOOrIRectList97=shapeLUOOrIRectList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, shapeLUOOrIRectList97.Tree);
				DebugLocation(113, 159);
				char_literal98=(CommonToken)Match(input,82,Follow._82_in_shapeOp1094); if (state.failed) return retval;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:114:9: SHPU ^ '(' ! numericExpression ',' ! numericExpression ',' ! numericExpression ')' ! '{' ! shapeLUOOrIRectList '}' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(114, 13);
				SHPU99=(CommonToken)Match(input,SHPU,Follow._SHPU_in_shapeOp1105); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SHPU99_tree = (CommonTree)adaptor.Create(SHPU99);
				root_0 = (CommonTree)adaptor.BecomeRoot(SHPU99_tree, root_0);
				}
				DebugLocation(114, 24);
				char_literal100=(CommonToken)Match(input,POPEN,Follow._POPEN_in_shapeOp1114); if (state.failed) return retval;
				DebugLocation(114, 26);
				PushFollow(Follow._numericExpression_in_shapeOp1117);
				numericExpression101=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression101.Tree);
				DebugLocation(114, 47);
				char_literal102=(CommonToken)Match(input,79,Follow._79_in_shapeOp1119); if (state.failed) return retval;
				DebugLocation(114, 49);
				PushFollow(Follow._numericExpression_in_shapeOp1122);
				numericExpression103=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression103.Tree);
				DebugLocation(114, 70);
				char_literal104=(CommonToken)Match(input,79,Follow._79_in_shapeOp1124); if (state.failed) return retval;
				DebugLocation(114, 72);
				PushFollow(Follow._numericExpression_in_shapeOp1127);
				numericExpression105=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression105.Tree);
				DebugLocation(114, 93);
				char_literal106=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_shapeOp1129); if (state.failed) return retval;
				DebugLocation(114, 134);
				char_literal107=(CommonToken)Match(input,81,Follow._81_in_shapeOp1168); if (state.failed) return retval;
				DebugLocation(114, 136);
				PushFollow(Follow._shapeLUOOrIRectList_in_shapeOp1171);
				shapeLUOOrIRectList108=shapeLUOOrIRectList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, shapeLUOOrIRectList108.Tree);
				DebugLocation(114, 159);
				char_literal109=(CommonToken)Match(input,82,Follow._82_in_shapeOp1173); if (state.failed) return retval;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:115:9: SHPO ^ '(' ! numericExpression ',' ! numericExpression ',' ! numericExpression ',' ! numericExpression ')' ! '{' ! shapeLUOOrIRectList '}' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(115, 13);
				SHPO110=(CommonToken)Match(input,SHPO,Follow._SHPO_in_shapeOp1184); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SHPO110_tree = (CommonTree)adaptor.Create(SHPO110);
				root_0 = (CommonTree)adaptor.BecomeRoot(SHPO110_tree, root_0);
				}
				DebugLocation(115, 24);
				char_literal111=(CommonToken)Match(input,POPEN,Follow._POPEN_in_shapeOp1193); if (state.failed) return retval;
				DebugLocation(115, 26);
				PushFollow(Follow._numericExpression_in_shapeOp1196);
				numericExpression112=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression112.Tree);
				DebugLocation(115, 47);
				char_literal113=(CommonToken)Match(input,79,Follow._79_in_shapeOp1198); if (state.failed) return retval;
				DebugLocation(115, 49);
				PushFollow(Follow._numericExpression_in_shapeOp1201);
				numericExpression114=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression114.Tree);
				DebugLocation(115, 70);
				char_literal115=(CommonToken)Match(input,79,Follow._79_in_shapeOp1203); if (state.failed) return retval;
				DebugLocation(115, 72);
				PushFollow(Follow._numericExpression_in_shapeOp1206);
				numericExpression116=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression116.Tree);
				DebugLocation(115, 93);
				char_literal117=(CommonToken)Match(input,79,Follow._79_in_shapeOp1208); if (state.failed) return retval;
				DebugLocation(115, 95);
				PushFollow(Follow._numericExpression_in_shapeOp1211);
				numericExpression118=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression118.Tree);
				DebugLocation(115, 116);
				char_literal119=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_shapeOp1213); if (state.failed) return retval;
				DebugLocation(115, 134);
				char_literal120=(CommonToken)Match(input,81,Follow._81_in_shapeOp1229); if (state.failed) return retval;
				DebugLocation(115, 136);
				PushFollow(Follow._shapeLUOOrIRectList_in_shapeOp1232);
				shapeLUOOrIRectList121=shapeLUOOrIRectList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, shapeLUOOrIRectList121.Tree);
				DebugLocation(115, 159);
				char_literal122=(CommonToken)Match(input,82,Follow._82_in_shapeOp1234); if (state.failed) return retval;

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:116:9: IRECT ^ '(' ! selOrId ')' ! '{' ! shapeLUOOrIRectList '}' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(116, 14);
				IRECT123=(CommonToken)Match(input,IRECT,Follow._IRECT_in_shapeOp1245); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IRECT123_tree = (CommonTree)adaptor.Create(IRECT123);
				root_0 = (CommonTree)adaptor.BecomeRoot(IRECT123_tree, root_0);
				}
				DebugLocation(116, 24);
				char_literal124=(CommonToken)Match(input,POPEN,Follow._POPEN_in_shapeOp1253); if (state.failed) return retval;
				DebugLocation(116, 26);
				PushFollow(Follow._selOrId_in_shapeOp1256);
				selOrId125=selOrId();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selOrId125.Tree);
				DebugLocation(116, 37);
				char_literal126=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_shapeOp1258); if (state.failed) return retval;
				DebugLocation(116, 42);
				char_literal127=(CommonToken)Match(input,81,Follow._81_in_shapeOp1261); if (state.failed) return retval;
				DebugLocation(116, 44);
				PushFollow(Follow._shapeLUOOrIRectList_in_shapeOp1264);
				shapeLUOOrIRectList128=shapeLUOOrIRectList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, shapeLUOOrIRectList128.Tree);
				DebugLocation(116, 67);
				char_literal129=(CommonToken)Match(input,82,Follow._82_in_shapeOp1266); if (state.failed) return retval;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:117:9: SCAT ^ '(' ! selOrId ',' ! numericExpression ',' ! selOrId ( ',' ! selOrId ',' ! scaleRelativeExpression )? ')' ! '{' ! shapeOpSeq '}' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(117, 13);
				SCAT130=(CommonToken)Match(input,SCAT,Follow._SCAT_in_shapeOp1277); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SCAT130_tree = (CommonTree)adaptor.Create(SCAT130);
				root_0 = (CommonTree)adaptor.BecomeRoot(SCAT130_tree, root_0);
				}
				DebugLocation(117, 24);
				char_literal131=(CommonToken)Match(input,POPEN,Follow._POPEN_in_shapeOp1286); if (state.failed) return retval;
				DebugLocation(117, 26);
				PushFollow(Follow._selOrId_in_shapeOp1289);
				selOrId132=selOrId();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selOrId132.Tree);
				DebugLocation(117, 37);
				char_literal133=(CommonToken)Match(input,79,Follow._79_in_shapeOp1291); if (state.failed) return retval;
				DebugLocation(117, 39);
				PushFollow(Follow._numericExpression_in_shapeOp1294);
				numericExpression134=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression134.Tree);
				DebugLocation(117, 60);
				char_literal135=(CommonToken)Match(input,79,Follow._79_in_shapeOp1296); if (state.failed) return retval;
				DebugLocation(117, 62);
				PushFollow(Follow._selOrId_in_shapeOp1299);
				selOrId136=selOrId();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selOrId136.Tree);
				DebugLocation(117, 70);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:117:70: ( ',' ! selOrId ',' ! scaleRelativeExpression )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==79))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:117:72: ',' ! selOrId ',' ! scaleRelativeExpression
					{
					DebugLocation(117, 75);
					char_literal137=(CommonToken)Match(input,79,Follow._79_in_shapeOp1303); if (state.failed) return retval;
					DebugLocation(117, 77);
					PushFollow(Follow._selOrId_in_shapeOp1306);
					selOrId138=selOrId();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, selOrId138.Tree);
					DebugLocation(117, 88);
					char_literal139=(CommonToken)Match(input,79,Follow._79_in_shapeOp1308); if (state.failed) return retval;
					DebugLocation(117, 90);
					PushFollow(Follow._scaleRelativeExpression_in_shapeOp1311);
					scaleRelativeExpression140=scaleRelativeExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeExpression140.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(117, 120);
				char_literal141=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_shapeOp1316); if (state.failed) return retval;
				DebugLocation(117, 125);
				char_literal142=(CommonToken)Match(input,81,Follow._81_in_shapeOp1319); if (state.failed) return retval;
				DebugLocation(117, 127);
				PushFollow(Follow._shapeOpSeq_in_shapeOp1322);
				shapeOpSeq143=shapeOpSeq();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, shapeOpSeq143.Tree);
				DebugLocation(117, 141);
				char_literal144=(CommonToken)Match(input,82,Follow._82_in_shapeOp1324); if (state.failed) return retval;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:118:9: S_OP ^ '(' ! scaleRelativeExpression ',' ! scaleRelativeExpression ',' ! scaleRelativeExpression ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(118, 13);
				S_OP145=(CommonToken)Match(input,S_OP,Follow._S_OP_in_shapeOp1335); if (state.failed) return retval;
				if (state.backtracking == 0) {
				S_OP145_tree = (CommonTree)adaptor.Create(S_OP145);
				root_0 = (CommonTree)adaptor.BecomeRoot(S_OP145_tree, root_0);
				}
				DebugLocation(118, 24);
				char_literal146=(CommonToken)Match(input,POPEN,Follow._POPEN_in_shapeOp1344); if (state.failed) return retval;
				DebugLocation(118, 26);
				PushFollow(Follow._scaleRelativeExpression_in_shapeOp1347);
				scaleRelativeExpression147=scaleRelativeExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeExpression147.Tree);
				DebugLocation(118, 53);
				char_literal148=(CommonToken)Match(input,79,Follow._79_in_shapeOp1349); if (state.failed) return retval;
				DebugLocation(118, 55);
				PushFollow(Follow._scaleRelativeExpression_in_shapeOp1352);
				scaleRelativeExpression149=scaleRelativeExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeExpression149.Tree);
				DebugLocation(118, 82);
				char_literal150=(CommonToken)Match(input,79,Follow._79_in_shapeOp1354); if (state.failed) return retval;
				DebugLocation(118, 84);
				PushFollow(Follow._scaleRelativeExpression_in_shapeOp1357);
				scaleRelativeExpression151=scaleRelativeExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeExpression151.Tree);
				DebugLocation(118, 111);
				char_literal152=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_shapeOp1359); if (state.failed) return retval;

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:119:9: T_OP ^ '(' ! scaleRelativeExpression ',' ! scaleRelativeExpression ',' ! scaleRelativeExpression ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(119, 13);
				T_OP153=(CommonToken)Match(input,T_OP,Follow._T_OP_in_shapeOp1370); if (state.failed) return retval;
				if (state.backtracking == 0) {
				T_OP153_tree = (CommonTree)adaptor.Create(T_OP153);
				root_0 = (CommonTree)adaptor.BecomeRoot(T_OP153_tree, root_0);
				}
				DebugLocation(119, 24);
				char_literal154=(CommonToken)Match(input,POPEN,Follow._POPEN_in_shapeOp1379); if (state.failed) return retval;
				DebugLocation(119, 26);
				PushFollow(Follow._scaleRelativeExpression_in_shapeOp1382);
				scaleRelativeExpression155=scaleRelativeExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeExpression155.Tree);
				DebugLocation(119, 53);
				char_literal156=(CommonToken)Match(input,79,Follow._79_in_shapeOp1384); if (state.failed) return retval;
				DebugLocation(119, 55);
				PushFollow(Follow._scaleRelativeExpression_in_shapeOp1387);
				scaleRelativeExpression157=scaleRelativeExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeExpression157.Tree);
				DebugLocation(119, 82);
				char_literal158=(CommonToken)Match(input,79,Follow._79_in_shapeOp1389); if (state.failed) return retval;
				DebugLocation(119, 84);
				PushFollow(Follow._scaleRelativeExpression_in_shapeOp1392);
				scaleRelativeExpression159=scaleRelativeExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeExpression159.Tree);
				DebugLocation(119, 111);
				char_literal160=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_shapeOp1394); if (state.failed) return retval;

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:120:9: SP_OP ^ '(' ! numericExpression ',' ! selOrId ',' ! scaleRelativeOrFloatingExpression ',' ! scaleRelativeOrFloatingExpression ( ',' ! numericExpression )? ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(120, 14);
				SP_OP161=(CommonToken)Match(input,SP_OP,Follow._SP_OP_in_shapeOp1405); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SP_OP161_tree = (CommonTree)adaptor.Create(SP_OP161);
				root_0 = (CommonTree)adaptor.BecomeRoot(SP_OP161_tree, root_0);
				}
				DebugLocation(120, 24);
				char_literal162=(CommonToken)Match(input,POPEN,Follow._POPEN_in_shapeOp1413); if (state.failed) return retval;
				DebugLocation(120, 26);
				PushFollow(Follow._numericExpression_in_shapeOp1416);
				numericExpression163=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression163.Tree);
				DebugLocation(120, 53);
				char_literal164=(CommonToken)Match(input,79,Follow._79_in_shapeOp1424); if (state.failed) return retval;
				DebugLocation(120, 55);
				PushFollow(Follow._selOrId_in_shapeOp1427);
				selOrId165=selOrId();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selOrId165.Tree);
				DebugLocation(120, 79);
				char_literal166=(CommonToken)Match(input,79,Follow._79_in_shapeOp1442); if (state.failed) return retval;
				DebugLocation(120, 81);
				PushFollow(Follow._scaleRelativeOrFloatingExpression_in_shapeOp1445);
				scaleRelativeOrFloatingExpression167=scaleRelativeOrFloatingExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeOrFloatingExpression167.Tree);
				DebugLocation(120, 118);
				char_literal168=(CommonToken)Match(input,79,Follow._79_in_shapeOp1447); if (state.failed) return retval;
				DebugLocation(120, 120);
				PushFollow(Follow._scaleRelativeOrFloatingExpression_in_shapeOp1450);
				scaleRelativeOrFloatingExpression169=scaleRelativeOrFloatingExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeOrFloatingExpression169.Tree);
				DebugLocation(120, 154);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:120:154: ( ',' ! numericExpression )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==79))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:120:155: ',' ! numericExpression
					{
					DebugLocation(120, 158);
					char_literal170=(CommonToken)Match(input,79,Follow._79_in_shapeOp1453); if (state.failed) return retval;
					DebugLocation(120, 160);
					PushFollow(Follow._numericExpression_in_shapeOp1456);
					numericExpression171=numericExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression171.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(29); }

				DebugLocation(120, 183);
				char_literal172=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_shapeOp1460); if (state.failed) return retval;

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:121:9: SP_OP ^ '(' ! numericExpression ',' ! selOrId ',' ! scaleRelativeOrFloatingExpression ',' ! scaleRelativeOrFloatingExpression ',' ! scaleRelativeOrFloatingExpression ',' ! scaleRelativeOrFloatingExpression ( ',' ! numericExpression )? ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(121, 14);
				SP_OP173=(CommonToken)Match(input,SP_OP,Follow._SP_OP_in_shapeOp1471); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SP_OP173_tree = (CommonTree)adaptor.Create(SP_OP173);
				root_0 = (CommonTree)adaptor.BecomeRoot(SP_OP173_tree, root_0);
				}
				DebugLocation(121, 24);
				char_literal174=(CommonToken)Match(input,POPEN,Follow._POPEN_in_shapeOp1479); if (state.failed) return retval;
				DebugLocation(121, 26);
				PushFollow(Follow._numericExpression_in_shapeOp1482);
				numericExpression175=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression175.Tree);
				DebugLocation(121, 53);
				char_literal176=(CommonToken)Match(input,79,Follow._79_in_shapeOp1490); if (state.failed) return retval;
				DebugLocation(121, 55);
				PushFollow(Follow._selOrId_in_shapeOp1493);
				selOrId177=selOrId();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selOrId177.Tree);
				DebugLocation(121, 79);
				char_literal178=(CommonToken)Match(input,79,Follow._79_in_shapeOp1508); if (state.failed) return retval;
				DebugLocation(121, 81);
				PushFollow(Follow._scaleRelativeOrFloatingExpression_in_shapeOp1511);
				scaleRelativeOrFloatingExpression179=scaleRelativeOrFloatingExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeOrFloatingExpression179.Tree);
				DebugLocation(121, 118);
				char_literal180=(CommonToken)Match(input,79,Follow._79_in_shapeOp1513); if (state.failed) return retval;
				DebugLocation(121, 120);
				PushFollow(Follow._scaleRelativeOrFloatingExpression_in_shapeOp1516);
				scaleRelativeOrFloatingExpression181=scaleRelativeOrFloatingExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeOrFloatingExpression181.Tree);
				DebugLocation(121, 157);
				char_literal182=(CommonToken)Match(input,79,Follow._79_in_shapeOp1518); if (state.failed) return retval;
				DebugLocation(121, 159);
				PushFollow(Follow._scaleRelativeOrFloatingExpression_in_shapeOp1521);
				scaleRelativeOrFloatingExpression183=scaleRelativeOrFloatingExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeOrFloatingExpression183.Tree);
				DebugLocation(121, 196);
				char_literal184=(CommonToken)Match(input,79,Follow._79_in_shapeOp1523); if (state.failed) return retval;
				DebugLocation(121, 198);
				PushFollow(Follow._scaleRelativeOrFloatingExpression_in_shapeOp1526);
				scaleRelativeOrFloatingExpression185=scaleRelativeOrFloatingExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeOrFloatingExpression185.Tree);
				DebugLocation(121, 232);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:121:232: ( ',' ! numericExpression )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==79))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:121:233: ',' ! numericExpression
					{
					DebugLocation(121, 236);
					char_literal186=(CommonToken)Match(input,79,Follow._79_in_shapeOp1529); if (state.failed) return retval;
					DebugLocation(121, 238);
					PushFollow(Follow._numericExpression_in_shapeOp1532);
					numericExpression187=numericExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression187.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(121, 261);
				char_literal188=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_shapeOp1536); if (state.failed) return retval;

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:122:9: TILEUV ^ '(' ! numericExpression ',' ! scaleRelativeOrFloatingExpression ',' ! scaleRelativeOrFloatingExpression ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(122, 15);
				TILEUV189=(CommonToken)Match(input,TILEUV,Follow._TILEUV_in_shapeOp1547); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TILEUV189_tree = (CommonTree)adaptor.Create(TILEUV189);
				root_0 = (CommonTree)adaptor.BecomeRoot(TILEUV189_tree, root_0);
				}
				DebugLocation(122, 24);
				char_literal190=(CommonToken)Match(input,POPEN,Follow._POPEN_in_shapeOp1554); if (state.failed) return retval;
				DebugLocation(122, 26);
				PushFollow(Follow._numericExpression_in_shapeOp1557);
				numericExpression191=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression191.Tree);
				DebugLocation(122, 47);
				char_literal192=(CommonToken)Match(input,79,Follow._79_in_shapeOp1559); if (state.failed) return retval;
				DebugLocation(122, 49);
				PushFollow(Follow._scaleRelativeOrFloatingExpression_in_shapeOp1562);
				scaleRelativeOrFloatingExpression193=scaleRelativeOrFloatingExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeOrFloatingExpression193.Tree);
				DebugLocation(122, 86);
				char_literal194=(CommonToken)Match(input,79,Follow._79_in_shapeOp1564); if (state.failed) return retval;
				DebugLocation(122, 88);
				PushFollow(Follow._scaleRelativeOrFloatingExpression_in_shapeOp1567);
				scaleRelativeOrFloatingExpression195=scaleRelativeOrFloatingExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeOrFloatingExpression195.Tree);
				DebugLocation(122, 125);
				char_literal196=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_shapeOp1569); if (state.failed) return retval;

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:123:9: SET_OP ^ '(' ! selOrId ',' ! expression ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(123, 15);
				SET_OP197=(CommonToken)Match(input,SET_OP,Follow._SET_OP_in_shapeOp1580); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SET_OP197_tree = (CommonTree)adaptor.Create(SET_OP197);
				root_0 = (CommonTree)adaptor.BecomeRoot(SET_OP197_tree, root_0);
				}
				DebugLocation(123, 24);
				char_literal198=(CommonToken)Match(input,POPEN,Follow._POPEN_in_shapeOp1587); if (state.failed) return retval;
				DebugLocation(123, 26);
				PushFollow(Follow._selOrId_in_shapeOp1590);
				selOrId199=selOrId();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selOrId199.Tree);
				DebugLocation(123, 37);
				char_literal200=(CommonToken)Match(input,79,Follow._79_in_shapeOp1592); if (state.failed) return retval;
				DebugLocation(123, 39);
				PushFollow(Follow._expression_in_shapeOp1595);
				expression201=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression201.Tree);
				DebugLocation(123, 53);
				char_literal202=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_shapeOp1597); if (state.failed) return retval;

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:124:9: Identifier ^ ( arguments )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(124, 19);
				Identifier203=(CommonToken)Match(input,Identifier,Follow._Identifier_in_shapeOp1608); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Identifier203_tree = (CommonTree)adaptor.Create(Identifier203);
				root_0 = (CommonTree)adaptor.BecomeRoot(Identifier203_tree, root_0);
				}
				DebugLocation(124, 21);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:124:21: ( arguments )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==POPEN))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:124:21: arguments
					{
					DebugLocation(124, 21);
					PushFollow(Follow._arguments_in_shapeOp1611);
					arguments204=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arguments204.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(31); }


				}
				break;
			case 18:
				DebugEnterAlt(18);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:125:9: stacked
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(125, 9);
				PushFollow(Follow._stacked_in_shapeOp1622);
				stacked205=stacked();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stacked205.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shapeOp", 17);
			LeaveRule("shapeOp", 17);
			LeaveRule_shapeOp();
			if (state.backtracking > 0) { Memoize(input, 17, shapeOp_StartIndex); }

		}
		DebugLocation(126, 1);
		} finally { DebugExitRule(GrammarFileName, "shapeOp"); }
		return retval;

	}
	// $ANTLR end "shapeOp"

	partial void EnterRule_selOrId();
	partial void LeaveRule_selOrId();
	// $ANTLR start "selOrId"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:128:1: selOrId : ( SEL ^ '(' ! stringExpression ')' !| Identifier );
	[GrammarRule("selOrId")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selOrId()
	{
		EnterRule_selOrId();
		EnterRule("selOrId", 18);
		TraceIn("selOrId", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int selOrId_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken SEL206 = default(CommonToken);
		CommonToken char_literal207 = default(CommonToken);
		CommonToken char_literal209 = default(CommonToken);
		CommonToken Identifier210 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> stringExpression208 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SEL206_tree = default(CommonTree);
		CommonTree char_literal207_tree = default(CommonTree);
		CommonTree char_literal209_tree = default(CommonTree);
		CommonTree Identifier210_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "selOrId");
		DebugLocation(128, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:129:5: ( SEL ^ '(' ! stringExpression ')' !| Identifier )
			int alt33=2;
			try { DebugEnterDecision(33, false);
			int LA33_1 = input.LA(1);

			if ((LA33_1==SEL))
			{
				alt33 = 1;
			}
			else if ((LA33_1==Identifier))
			{
				alt33 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:129:7: SEL ^ '(' ! stringExpression ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(129, 10);
				SEL206=(CommonToken)Match(input,SEL,Follow._SEL_in_selOrId1636); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SEL206_tree = (CommonTree)adaptor.Create(SEL206);
				root_0 = (CommonTree)adaptor.BecomeRoot(SEL206_tree, root_0);
				}
				DebugLocation(129, 15);
				char_literal207=(CommonToken)Match(input,POPEN,Follow._POPEN_in_selOrId1639); if (state.failed) return retval;
				DebugLocation(129, 17);
				PushFollow(Follow._stringExpression_in_selOrId1642);
				stringExpression208=stringExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stringExpression208.Tree);
				DebugLocation(129, 37);
				char_literal209=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_selOrId1644); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:130:7: Identifier
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(130, 7);
				Identifier210=(CommonToken)Match(input,Identifier,Follow._Identifier_in_selOrId1653); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Identifier210_tree = (CommonTree)adaptor.Create(Identifier210);
				adaptor.AddChild(root_0, Identifier210_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selOrId", 18);
			LeaveRule("selOrId", 18);
			LeaveRule_selOrId();
			if (state.backtracking > 0) { Memoize(input, 18, selOrId_StartIndex); }

		}
		DebugLocation(131, 4);
		} finally { DebugExitRule(GrammarFileName, "selOrId"); }
		return retval;

	}
	// $ANTLR end "selOrId"

	partial void EnterRule_splitExpression();
	partial void LeaveRule_splitExpression();
	// $ANTLR start "splitExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:133:1: splitExpression : '{' ! splitList '}' ! ( MULT )? ;
	[GrammarRule("splitExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> splitExpression()
	{
		EnterRule_splitExpression();
		EnterRule("splitExpression", 19);
		TraceIn("splitExpression", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int splitExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal211 = default(CommonToken);
		CommonToken char_literal213 = default(CommonToken);
		CommonToken MULT214 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> splitList212 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal211_tree = default(CommonTree);
		CommonTree char_literal213_tree = default(CommonTree);
		CommonTree MULT214_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "splitExpression");
		DebugLocation(133, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:134:2: ( '{' ! splitList '}' ! ( MULT )? )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:134:4: '{' ! splitList '}' ! ( MULT )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(134, 7);
			char_literal211=(CommonToken)Match(input,81,Follow._81_in_splitExpression1667); if (state.failed) return retval;
			DebugLocation(134, 9);
			PushFollow(Follow._splitList_in_splitExpression1670);
			splitList212=splitList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, splitList212.Tree);
			DebugLocation(134, 22);
			char_literal213=(CommonToken)Match(input,82,Follow._82_in_splitExpression1672); if (state.failed) return retval;
			DebugLocation(134, 24);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:134:24: ( MULT )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_1 = input.LA(1);

			if ((LA34_1==MULT))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:134:24: MULT
				{
				DebugLocation(134, 24);
				MULT214=(CommonToken)Match(input,MULT,Follow._MULT_in_splitExpression1675); if (state.failed) return retval;
				if (state.backtracking == 0) {
				MULT214_tree = (CommonTree)adaptor.Create(MULT214);
				adaptor.AddChild(root_0, MULT214_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("splitExpression", 19);
			LeaveRule("splitExpression", 19);
			LeaveRule_splitExpression();
			if (state.backtracking > 0) { Memoize(input, 19, splitExpression_StartIndex); }

		}
		DebugLocation(135, 1);
		} finally { DebugExitRule(GrammarFileName, "splitExpression"); }
		return retval;

	}
	// $ANTLR end "splitExpression"

	partial void EnterRule_splitList();
	partial void LeaveRule_splitList();
	// $ANTLR start "splitList"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:137:1: splitList : shapeSplit ( BAR ! splitList )* ;
	[GrammarRule("splitList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> splitList()
	{
		EnterRule_splitList();
		EnterRule("splitList", 20);
		TraceIn("splitList", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int splitList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken BAR216 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> shapeSplit215 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> splitList217 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree BAR216_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "splitList");
		DebugLocation(137, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:138:2: ( shapeSplit ( BAR ! splitList )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:138:4: shapeSplit ( BAR ! splitList )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(138, 4);
			PushFollow(Follow._shapeSplit_in_splitList1687);
			shapeSplit215=shapeSplit();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shapeSplit215.Tree);
			DebugLocation(138, 15);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:138:15: ( BAR ! splitList )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if ((LA35_1==BAR))
				{
					int LA35_2 = input.LA(2);

					if ((EvaluatePredicate(synpred54_CGA_fragment)))
					{
						alt35 = 1;
					}


				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:138:17: BAR ! splitList
					{
					DebugLocation(138, 20);
					BAR216=(CommonToken)Match(input,BAR,Follow._BAR_in_splitList1691); if (state.failed) return retval;
					DebugLocation(138, 22);
					PushFollow(Follow._splitList_in_splitList1694);
					splitList217=splitList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, splitList217.Tree);

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("splitList", 20);
			LeaveRule("splitList", 20);
			LeaveRule_splitList();
			if (state.backtracking > 0) { Memoize(input, 20, splitList_StartIndex); }

		}
		DebugLocation(139, 1);
		} finally { DebugExitRule(GrammarFileName, "splitList"); }
		return retval;

	}
	// $ANTLR end "splitList"

	partial void EnterRule_shapeSplit();
	partial void LeaveRule_shapeSplit();
	// $ANTLR start "shapeSplit"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:141:1: shapeSplit : ( splitExpression -> ^( COLON ScaleRatio DEFR splitExpression ) | constraintExpression COLON shapeOpSeqOrSplitExpression -> ^( COLON constraintExpression shapeOpSeqOrSplitExpression ) );
	[GrammarRule("shapeSplit")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> shapeSplit()
	{
		EnterRule_shapeSplit();
		EnterRule("shapeSplit", 21);
		TraceIn("shapeSplit", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int shapeSplit_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken COLON220 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> splitExpression218 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> constraintExpression219 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> shapeOpSeqOrSplitExpression221 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COLON220_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_shapeOpSeqOrSplitExpression=new RewriteRuleSubtreeStream(adaptor,"rule shapeOpSeqOrSplitExpression");
		RewriteRuleSubtreeStream stream_splitExpression=new RewriteRuleSubtreeStream(adaptor,"rule splitExpression");
		RewriteRuleSubtreeStream stream_constraintExpression=new RewriteRuleSubtreeStream(adaptor,"rule constraintExpression");
		try { DebugEnterRule(GrammarFileName, "shapeSplit");
		DebugLocation(141, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:142:2: ( splitExpression -> ^( COLON ScaleRatio DEFR splitExpression ) | constraintExpression COLON shapeOpSeqOrSplitExpression -> ^( COLON constraintExpression shapeOpSeqOrSplitExpression ) )
			int alt36=2;
			try { DebugEnterDecision(36, false);
			int LA36_1 = input.LA(1);

			if ((LA36_1==81))
			{
				alt36 = 1;
			}
			else if ((LA36_1==FloatingPointLiteral||LA36_1==Identifier||LA36_1==MINUS||(LA36_1>=PLUS && LA36_1<=POPEN)||LA36_1==SEL||LA36_1==ScaleFloat||LA36_1==ScaleRelative))
			{
				alt36 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:142:4: splitExpression
				{
				DebugLocation(142, 4);
				PushFollow(Follow._splitExpression_in_shapeSplit1708);
				splitExpression218=splitExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_splitExpression.Add(splitExpression218.Tree);


				{
				// AST REWRITE
				// elements: splitExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 142:59: -> ^( COLON ScaleRatio DEFR splitExpression )
				{
					DebugLocation(142, 62);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:142:62: ^( COLON ScaleRatio DEFR splitExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(142, 64);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(COLON, "COLON"), root_1);

					DebugLocation(142, 70);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ScaleRatio, "ScaleRatio"));
					DebugLocation(142, 92);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(DEFR, "DEFR"));
					DebugLocation(142, 97);
					adaptor.AddChild(root_1, stream_splitExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:143:4: constraintExpression COLON shapeOpSeqOrSplitExpression
				{
				DebugLocation(143, 4);
				PushFollow(Follow._constraintExpression_in_shapeSplit1775);
				constraintExpression219=constraintExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_constraintExpression.Add(constraintExpression219.Tree);
				DebugLocation(143, 25);
				COLON220=(CommonToken)Match(input,COLON,Follow._COLON_in_shapeSplit1777); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON220);

				DebugLocation(143, 31);
				PushFollow(Follow._shapeOpSeqOrSplitExpression_in_shapeSplit1779);
				shapeOpSeqOrSplitExpression221=shapeOpSeqOrSplitExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shapeOpSeqOrSplitExpression.Add(shapeOpSeqOrSplitExpression221.Tree);


				{
				// AST REWRITE
				// elements: constraintExpression, shapeOpSeqOrSplitExpression, COLON
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 143:59: -> ^( COLON constraintExpression shapeOpSeqOrSplitExpression )
				{
					DebugLocation(143, 62);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:143:62: ^( COLON constraintExpression shapeOpSeqOrSplitExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(143, 64);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_COLON.NextNode(), root_1);

					DebugLocation(143, 70);
					adaptor.AddChild(root_1, stream_constraintExpression.NextTree());
					DebugLocation(143, 97);
					adaptor.AddChild(root_1, stream_shapeOpSeqOrSplitExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shapeSplit", 21);
			LeaveRule("shapeSplit", 21);
			LeaveRule_shapeSplit();
			if (state.backtracking > 0) { Memoize(input, 21, shapeSplit_StartIndex); }

		}
		DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "shapeSplit"); }
		return retval;

	}
	// $ANTLR end "shapeSplit"

	partial void EnterRule_shapeOpSeqOrSplitExpression();
	partial void LeaveRule_shapeOpSeqOrSplitExpression();
	// $ANTLR start "shapeOpSeqOrSplitExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:146:1: shapeOpSeqOrSplitExpression : ( shapeOpSeq | splitExpression );
	[GrammarRule("shapeOpSeqOrSplitExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> shapeOpSeqOrSplitExpression()
	{
		EnterRule_shapeOpSeqOrSplitExpression();
		EnterRule("shapeOpSeqOrSplitExpression", 22);
		TraceIn("shapeOpSeqOrSplitExpression", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int shapeOpSeqOrSplitExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> shapeOpSeq222 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> splitExpression223 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "shapeOpSeqOrSplitExpression");
		DebugLocation(146, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:147:2: ( shapeOpSeq | splitExpression )
			int alt37=2;
			try { DebugEnterDecision(37, false);
			int LA37_1 = input.LA(1);

			if ((LA37_1==COMP||(LA37_1>=IRECT && LA37_1<=Identifier)||LA37_1==NIL||LA37_1==SCAT||(LA37_1>=SETB && LA37_1<=SHPU)||(LA37_1>=SPLIT && LA37_1<=SPLIT_AREA)||(LA37_1>=SPUSH && LA37_1<=SP_OP)||LA37_1==S_OP||(LA37_1>=TILEUV && LA37_1<=T_OP)))
			{
				alt37 = 1;
			}
			else if ((LA37_1==81))
			{
				alt37 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 37, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:147:4: shapeOpSeq
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(147, 4);
				PushFollow(Follow._shapeOpSeq_in_shapeOpSeqOrSplitExpression1806);
				shapeOpSeq222=shapeOpSeq();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, shapeOpSeq222.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:148:4: splitExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(148, 4);
				PushFollow(Follow._splitExpression_in_shapeOpSeqOrSplitExpression1811);
				splitExpression223=splitExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, splitExpression223.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shapeOpSeqOrSplitExpression", 22);
			LeaveRule("shapeOpSeqOrSplitExpression", 22);
			LeaveRule_shapeOpSeqOrSplitExpression();
			if (state.backtracking > 0) { Memoize(input, 22, shapeOpSeqOrSplitExpression_StartIndex); }

		}
		DebugLocation(149, 1);
		} finally { DebugExitRule(GrammarFileName, "shapeOpSeqOrSplitExpression"); }
		return retval;

	}
	// $ANTLR end "shapeOpSeqOrSplitExpression"

	partial void EnterRule_compListOrSetback();
	partial void LeaveRule_compListOrSetback();
	// $ANTLR start "compListOrSetback"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:151:1: compListOrSetback : compSplitOrSetback ( BAR ! compListOrSetback )* ;
	[GrammarRule("compListOrSetback")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> compListOrSetback()
	{
		EnterRule_compListOrSetback();
		EnterRule("compListOrSetback", 23);
		TraceIn("compListOrSetback", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int compListOrSetback_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken BAR225 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> compSplitOrSetback224 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> compListOrSetback226 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree BAR225_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "compListOrSetback");
		DebugLocation(151, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:152:5: ( compSplitOrSetback ( BAR ! compListOrSetback )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:152:7: compSplitOrSetback ( BAR ! compListOrSetback )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(152, 7);
			PushFollow(Follow._compSplitOrSetback_in_compListOrSetback1825);
			compSplitOrSetback224=compSplitOrSetback();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, compSplitOrSetback224.Tree);
			DebugLocation(152, 26);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:152:26: ( BAR ! compListOrSetback )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_1 = input.LA(1);

				if ((LA38_1==BAR))
				{
					int LA38_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_CGA_fragment)))
					{
						alt38 = 1;
					}


				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:152:28: BAR ! compListOrSetback
					{
					DebugLocation(152, 31);
					BAR225=(CommonToken)Match(input,BAR,Follow._BAR_in_compListOrSetback1829); if (state.failed) return retval;
					DebugLocation(152, 33);
					PushFollow(Follow._compListOrSetback_in_compListOrSetback1832);
					compListOrSetback226=compListOrSetback();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, compListOrSetback226.Tree);

					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compListOrSetback", 23);
			LeaveRule("compListOrSetback", 23);
			LeaveRule_compListOrSetback();
			if (state.backtracking > 0) { Memoize(input, 23, compListOrSetback_StartIndex); }

		}
		DebugLocation(153, 4);
		} finally { DebugExitRule(GrammarFileName, "compListOrSetback"); }
		return retval;

	}
	// $ANTLR end "compListOrSetback"

	partial void EnterRule_compSplitOrSetback();
	partial void LeaveRule_compSplitOrSetback();
	// $ANTLR start "compSplitOrSetback"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:155:1: compSplitOrSetback : ( numericExpression COLON shapeOpSeq -> ^( NOTCOMB numericExpression shapeOpSeq ) | numericExpression EQUALS shapeOpSeq -> ^( COMBINE numericExpression shapeOpSeq ) );
	[GrammarRule("compSplitOrSetback")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> compSplitOrSetback()
	{
		EnterRule_compSplitOrSetback();
		EnterRule("compSplitOrSetback", 24);
		TraceIn("compSplitOrSetback", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int compSplitOrSetback_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken COLON228 = default(CommonToken);
		CommonToken EQUALS231 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression227 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> shapeOpSeq229 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression230 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> shapeOpSeq232 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COLON228_tree = default(CommonTree);
		CommonTree EQUALS231_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_shapeOpSeq=new RewriteRuleSubtreeStream(adaptor,"rule shapeOpSeq");
		RewriteRuleSubtreeStream stream_numericExpression=new RewriteRuleSubtreeStream(adaptor,"rule numericExpression");
		try { DebugEnterRule(GrammarFileName, "compSplitOrSetback");
		DebugLocation(155, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:156:5: ( numericExpression COLON shapeOpSeq -> ^( NOTCOMB numericExpression shapeOpSeq ) | numericExpression EQUALS shapeOpSeq -> ^( COMBINE numericExpression shapeOpSeq ) )
			int alt39=2;
			try { DebugEnterDecision(39, false);
			try
			{
				alt39 = dfa39.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:156:7: numericExpression COLON shapeOpSeq
				{
				DebugLocation(156, 7);
				PushFollow(Follow._numericExpression_in_compSplitOrSetback1852);
				numericExpression227=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_numericExpression.Add(numericExpression227.Tree);
				DebugLocation(156, 25);
				COLON228=(CommonToken)Match(input,COLON,Follow._COLON_in_compSplitOrSetback1854); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON228);

				DebugLocation(156, 32);
				PushFollow(Follow._shapeOpSeq_in_compSplitOrSetback1857);
				shapeOpSeq229=shapeOpSeq();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shapeOpSeq.Add(shapeOpSeq229.Tree);


				{
				// AST REWRITE
				// elements: numericExpression, shapeOpSeq
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 156:43: -> ^( NOTCOMB numericExpression shapeOpSeq )
				{
					DebugLocation(156, 46);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:156:46: ^( NOTCOMB numericExpression shapeOpSeq )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(156, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NOTCOMB, "NOTCOMB"), root_1);

					DebugLocation(156, 56);
					adaptor.AddChild(root_1, stream_numericExpression.NextTree());
					DebugLocation(156, 74);
					adaptor.AddChild(root_1, stream_shapeOpSeq.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:157:7: numericExpression EQUALS shapeOpSeq
				{
				DebugLocation(157, 7);
				PushFollow(Follow._numericExpression_in_compSplitOrSetback1875);
				numericExpression230=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_numericExpression.Add(numericExpression230.Tree);
				DebugLocation(157, 25);
				EQUALS231=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_compSplitOrSetback1877); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EQUALS.Add(EQUALS231);

				DebugLocation(157, 32);
				PushFollow(Follow._shapeOpSeq_in_compSplitOrSetback1879);
				shapeOpSeq232=shapeOpSeq();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shapeOpSeq.Add(shapeOpSeq232.Tree);


				{
				// AST REWRITE
				// elements: numericExpression, shapeOpSeq
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 157:43: -> ^( COMBINE numericExpression shapeOpSeq )
				{
					DebugLocation(157, 46);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:157:46: ^( COMBINE numericExpression shapeOpSeq )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(157, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(COMBINE, "COMBINE"), root_1);

					DebugLocation(157, 56);
					adaptor.AddChild(root_1, stream_numericExpression.NextTree());
					DebugLocation(157, 74);
					adaptor.AddChild(root_1, stream_shapeOpSeq.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compSplitOrSetback", 24);
			LeaveRule("compSplitOrSetback", 24);
			LeaveRule_compSplitOrSetback();
			if (state.backtracking > 0) { Memoize(input, 24, compSplitOrSetback_StartIndex); }

		}
		DebugLocation(158, 4);
		} finally { DebugExitRule(GrammarFileName, "compSplitOrSetback"); }
		return retval;

	}
	// $ANTLR end "compSplitOrSetback"

	partial void EnterRule_shapeLUOOrIRectList();
	partial void LeaveRule_shapeLUOOrIRectList();
	// $ANTLR start "shapeLUOOrIRectList"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:160:1: shapeLUOOrIRectList : shapeLUOOrIRect ( BAR ! shapeLUOOrIRect )* ;
	[GrammarRule("shapeLUOOrIRectList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> shapeLUOOrIRectList()
	{
		EnterRule_shapeLUOOrIRectList();
		EnterRule("shapeLUOOrIRectList", 25);
		TraceIn("shapeLUOOrIRectList", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int shapeLUOOrIRectList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken BAR234 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> shapeLUOOrIRect233 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> shapeLUOOrIRect235 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree BAR234_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shapeLUOOrIRectList");
		DebugLocation(160, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:161:2: ( shapeLUOOrIRect ( BAR ! shapeLUOOrIRect )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:161:4: shapeLUOOrIRect ( BAR ! shapeLUOOrIRect )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(161, 4);
			PushFollow(Follow._shapeLUOOrIRect_in_shapeLUOOrIRectList1903);
			shapeLUOOrIRect233=shapeLUOOrIRect();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shapeLUOOrIRect233.Tree);
			DebugLocation(161, 20);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:161:20: ( BAR ! shapeLUOOrIRect )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==BAR))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:161:22: BAR ! shapeLUOOrIRect
					{
					DebugLocation(161, 25);
					BAR234=(CommonToken)Match(input,BAR,Follow._BAR_in_shapeLUOOrIRectList1907); if (state.failed) return retval;
					DebugLocation(161, 27);
					PushFollow(Follow._shapeLUOOrIRect_in_shapeLUOOrIRectList1910);
					shapeLUOOrIRect235=shapeLUOOrIRect();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shapeLUOOrIRect235.Tree);

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shapeLUOOrIRectList", 25);
			LeaveRule("shapeLUOOrIRectList", 25);
			LeaveRule_shapeLUOOrIRectList();
			if (state.backtracking > 0) { Memoize(input, 25, shapeLUOOrIRectList_StartIndex); }

		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "shapeLUOOrIRectList"); }
		return retval;

	}
	// $ANTLR end "shapeLUOOrIRectList"

	partial void EnterRule_shapeLUOOrIRect();
	partial void LeaveRule_shapeLUOOrIRect();
	// $ANTLR start "shapeLUOOrIRect"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:164:1: shapeLUOOrIRect : ( Identifier COLON shapeOpSeq -> ^( NOTCOMB Identifier shapeOpSeq ) | Identifier EQUALS shapeOpSeq -> ^( COMBINE Identifier shapeOpSeq ) );
	[GrammarRule("shapeLUOOrIRect")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> shapeLUOOrIRect()
	{
		EnterRule_shapeLUOOrIRect();
		EnterRule("shapeLUOOrIRect", 26);
		TraceIn("shapeLUOOrIRect", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int shapeLUOOrIRect_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken Identifier236 = default(CommonToken);
		CommonToken COLON237 = default(CommonToken);
		CommonToken Identifier239 = default(CommonToken);
		CommonToken EQUALS240 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> shapeOpSeq238 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> shapeOpSeq241 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Identifier236_tree = default(CommonTree);
		CommonTree COLON237_tree = default(CommonTree);
		CommonTree Identifier239_tree = default(CommonTree);
		CommonTree EQUALS240_tree = default(CommonTree);
		RewriteRuleITokenStream stream_Identifier=new RewriteRuleITokenStream(adaptor,"token Identifier");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_shapeOpSeq=new RewriteRuleSubtreeStream(adaptor,"rule shapeOpSeq");
		try { DebugEnterRule(GrammarFileName, "shapeLUOOrIRect");
		DebugLocation(164, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:165:2: ( Identifier COLON shapeOpSeq -> ^( NOTCOMB Identifier shapeOpSeq ) | Identifier EQUALS shapeOpSeq -> ^( COMBINE Identifier shapeOpSeq ) )
			int alt41=2;
			try { DebugEnterDecision(41, false);
			int LA41_1 = input.LA(1);

			if ((LA41_1==Identifier))
			{
				int LA41_2 = input.LA(2);

				if ((LA41_2==COLON))
				{
					alt41 = 1;
				}
				else if ((LA41_2==EQUALS))
				{
					alt41 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 41, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 41, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:165:4: Identifier COLON shapeOpSeq
				{
				DebugLocation(165, 4);
				Identifier236=(CommonToken)Match(input,Identifier,Follow._Identifier_in_shapeLUOOrIRect1924); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Identifier.Add(Identifier236);

				DebugLocation(165, 15);
				COLON237=(CommonToken)Match(input,COLON,Follow._COLON_in_shapeLUOOrIRect1926); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON237);

				DebugLocation(165, 22);
				PushFollow(Follow._shapeOpSeq_in_shapeLUOOrIRect1929);
				shapeOpSeq238=shapeOpSeq();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shapeOpSeq.Add(shapeOpSeq238.Tree);


				{
				// AST REWRITE
				// elements: shapeOpSeq, Identifier
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 165:33: -> ^( NOTCOMB Identifier shapeOpSeq )
				{
					DebugLocation(165, 36);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:165:36: ^( NOTCOMB Identifier shapeOpSeq )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(165, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NOTCOMB, "NOTCOMB"), root_1);

					DebugLocation(165, 46);
					adaptor.AddChild(root_1, stream_Identifier.NextNode());
					DebugLocation(165, 57);
					adaptor.AddChild(root_1, stream_shapeOpSeq.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:166:7: Identifier EQUALS shapeOpSeq
				{
				DebugLocation(166, 7);
				Identifier239=(CommonToken)Match(input,Identifier,Follow._Identifier_in_shapeLUOOrIRect1947); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Identifier.Add(Identifier239);

				DebugLocation(166, 18);
				EQUALS240=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_shapeLUOOrIRect1949); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EQUALS.Add(EQUALS240);

				DebugLocation(166, 25);
				PushFollow(Follow._shapeOpSeq_in_shapeLUOOrIRect1951);
				shapeOpSeq241=shapeOpSeq();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shapeOpSeq.Add(shapeOpSeq241.Tree);


				{
				// AST REWRITE
				// elements: shapeOpSeq, Identifier
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 166:36: -> ^( COMBINE Identifier shapeOpSeq )
				{
					DebugLocation(166, 39);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:166:39: ^( COMBINE Identifier shapeOpSeq )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(166, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(COMBINE, "COMBINE"), root_1);

					DebugLocation(166, 49);
					adaptor.AddChild(root_1, stream_Identifier.NextNode());
					DebugLocation(166, 60);
					adaptor.AddChild(root_1, stream_shapeOpSeq.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shapeLUOOrIRect", 26);
			LeaveRule("shapeLUOOrIRect", 26);
			LeaveRule_shapeLUOOrIRect();
			if (state.backtracking > 0) { Memoize(input, 26, shapeLUOOrIRect_StartIndex); }

		}
		DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "shapeLUOOrIRect"); }
		return retval;

	}
	// $ANTLR end "shapeLUOOrIRect"

	partial void EnterRule_caseExpression();
	partial void LeaveRule_caseExpression();
	// $ANTLR start "caseExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:171:1: caseExpression : ( (p+= ProbabilityLiteral COLON b+= expression )+ p+= ELSE COLON b+= expression -> {$p==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) ) | ( CASE e+= booleanExpression COLON b+= expression )+ e+= elseToken COLON b+= expression -> {$e==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) ) );
	[GrammarRule("caseExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression()
	{
		EnterRule_caseExpression();
		EnterRule("caseExpression", 27);
		TraceIn("caseExpression", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int caseExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken COLON242 = default(CommonToken);
		CommonToken COLON243 = default(CommonToken);
		CommonToken CASE244 = default(CommonToken);
		CommonToken COLON245 = default(CommonToken);
		CommonToken COLON246 = default(CommonToken);
		CommonToken p = default(CommonToken);
		List<CommonToken> list_p = null;
		List<CommonTree> list_b = null;
		List<CommonTree> list_e = null;
		AstParserRuleReturnScope<CommonTree, CommonToken> b = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> e = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		CommonTree COLON242_tree = default(CommonTree);
		CommonTree COLON243_tree = default(CommonTree);
		CommonTree CASE244_tree = default(CommonTree);
		CommonTree COLON245_tree = default(CommonTree);
		CommonTree COLON246_tree = default(CommonTree);
		CommonTree p_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ProbabilityLiteral=new RewriteRuleITokenStream(adaptor,"token ProbabilityLiteral");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_elseToken=new RewriteRuleSubtreeStream(adaptor,"rule elseToken");
		RewriteRuleSubtreeStream stream_booleanExpression=new RewriteRuleSubtreeStream(adaptor,"rule booleanExpression");
		try { DebugEnterRule(GrammarFileName, "caseExpression");
		DebugLocation(171, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:172:5: ( (p+= ProbabilityLiteral COLON b+= expression )+ p+= ELSE COLON b+= expression -> {$p==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) ) | ( CASE e+= booleanExpression COLON b+= expression )+ e+= elseToken COLON b+= expression -> {$e==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) ) )
			int alt44=2;
			try { DebugEnterDecision(44, false);
			int LA44_1 = input.LA(1);

			if ((LA44_1==ProbabilityLiteral))
			{
				alt44 = 1;
			}
			else if ((LA44_1==CASE))
			{
				alt44 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 44, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:172:7: (p+= ProbabilityLiteral COLON b+= expression )+ p+= ELSE COLON b+= expression
				{
				DebugLocation(172, 7);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:172:7: (p+= ProbabilityLiteral COLON b+= expression )+
				int cnt42=0;
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_1 = input.LA(1);

					if ((LA42_1==ProbabilityLiteral))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:172:8: p+= ProbabilityLiteral COLON b+= expression
						{
						DebugLocation(172, 9);
						p=(CommonToken)Match(input,ProbabilityLiteral,Follow._ProbabilityLiteral_in_caseExpression1980); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_ProbabilityLiteral.Add(p);

						if (list_p==null) list_p=new List<CommonToken>();
						list_p.Add(p);

						DebugLocation(172, 30);
						COLON242=(CommonToken)Match(input,COLON,Follow._COLON_in_caseExpression1982); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COLON.Add(COLON242);

						DebugLocation(172, 37);
						PushFollow(Follow._expression_in_caseExpression1986);
						b=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression.Add(b.Tree);
						if (list_b==null) list_b=new List<CommonTree>();
						list_b.Add(b.Tree);


						}
						break;

					default:
						if (cnt42 >= 1)
							goto loop42;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee42 = new EarlyExitException( 42, input );
						DebugRecognitionException(eee42);
						throw eee42;
					}
					cnt42++;
				}
				loop42:
					;

				} finally { DebugExitSubRule(42); }

				DebugLocation(172, 54);
				p=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseExpression1993); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ELSE.Add(p);

				if (list_p==null) list_p=new List<CommonToken>();
				list_p.Add(p);

				DebugLocation(172, 61);
				COLON243=(CommonToken)Match(input,COLON,Follow._COLON_in_caseExpression1995); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON243);

				DebugLocation(172, 68);
				PushFollow(Follow._expression_in_caseExpression1999);
				b=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(b.Tree);
				if (list_b==null) list_b=new List<CommonTree>();
				list_b.Add(b.Tree);



				{
				// AST REWRITE
				// elements: p, b
				// token labels: 
				// rule labels: retval
				// token list labels: p
				// rule list labels: b
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_p=new RewriteRuleITokenStream(adaptor,"token p", list_p);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
				root_0 = (CommonTree)adaptor.Nil();
				// 173:9: -> {$p==null}? ^( ERROR )
				if (list_p==null)
				{
					DebugLocation(173, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:173:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(173, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 174:9: -> {$b==null}? ^( ERROR )
				if (list_b==null)
				{
					DebugLocation(174, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:174:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(174, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 175:9: -> ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) )
				{
					DebugLocation(175, 12);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:175:12: ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(175, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CPROB, "CPROB"), root_1);

					DebugLocation(175, 20);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:175:20: ^( CPROB ( $p)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(175, 22);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CPROB, "CPROB"), root_2);

					DebugLocation(175, 29);
					if (!(stream_p.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_p.HasNext )
					{
						DebugLocation(175, 29);
						adaptor.AddChild(root_2, stream_p.NextNode());

					}
					stream_p.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(175, 33);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:175:33: ^( CBODY ( $b)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(175, 35);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CBODY, "CBODY"), root_2);

					DebugLocation(175, 42);
					if (!(stream_b.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_b.HasNext )
					{
						DebugLocation(175, 42);
						adaptor.AddChild(root_2, stream_b.NextTree());

					}
					stream_b.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:176:7: ( CASE e+= booleanExpression COLON b+= expression )+ e+= elseToken COLON b+= expression
				{
				DebugLocation(176, 7);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:176:7: ( CASE e+= booleanExpression COLON b+= expression )+
				int cnt43=0;
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_1 = input.LA(1);

					if ((LA43_1==CASE))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch (alt43)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:176:8: CASE e+= booleanExpression COLON b+= expression
						{
						DebugLocation(176, 8);
						CASE244=(CommonToken)Match(input,CASE,Follow._CASE_in_caseExpression2074); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_CASE.Add(CASE244);

						DebugLocation(176, 14);
						PushFollow(Follow._booleanExpression_in_caseExpression2078);
						e=booleanExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_booleanExpression.Add(e.Tree);
						if (list_e==null) list_e=new List<CommonTree>();
						list_e.Add(e.Tree);

						DebugLocation(176, 35);
						COLON245=(CommonToken)Match(input,COLON,Follow._COLON_in_caseExpression2081); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COLON.Add(COLON245);

						DebugLocation(176, 42);
						PushFollow(Follow._expression_in_caseExpression2085);
						b=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression.Add(b.Tree);
						if (list_b==null) list_b=new List<CommonTree>();
						list_b.Add(b.Tree);


						}
						break;

					default:
						if (cnt43 >= 1)
							goto loop43;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee43 = new EarlyExitException( 43, input );
						DebugRecognitionException(eee43);
						throw eee43;
					}
					cnt43++;
				}
				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(176, 59);
				PushFollow(Follow._elseToken_in_caseExpression2092);
				e=elseToken();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_elseToken.Add(e.Tree);
				if (list_e==null) list_e=new List<CommonTree>();
				list_e.Add(e.Tree);

				DebugLocation(176, 71);
				COLON246=(CommonToken)Match(input,COLON,Follow._COLON_in_caseExpression2094); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON246);

				DebugLocation(176, 78);
				PushFollow(Follow._expression_in_caseExpression2098);
				b=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(b.Tree);
				if (list_b==null) list_b=new List<CommonTree>();
				list_b.Add(b.Tree);



				{
				// AST REWRITE
				// elements: e, b
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: b, e
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
				RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"token e",list_e);
				root_0 = (CommonTree)adaptor.Nil();
				// 177:9: -> {$e==null}? ^( ERROR )
				if (list_e==null)
				{
					DebugLocation(177, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:177:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(177, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 178:9: -> {$b==null}? ^( ERROR )
				if (list_b==null)
				{
					DebugLocation(178, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:178:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(178, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 179:9: -> ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) )
				{
					DebugLocation(179, 12);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:179:12: ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(179, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CEXPR, "CEXPR"), root_1);

					DebugLocation(179, 20);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:179:20: ^( CEXPR ( $e)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(179, 22);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CEXPR, "CEXPR"), root_2);

					DebugLocation(179, 29);
					if (!(stream_e.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_e.HasNext )
					{
						DebugLocation(179, 29);
						adaptor.AddChild(root_2, stream_e.NextTree());

					}
					stream_e.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(179, 33);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:179:33: ^( CBODY ( $b)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(179, 35);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CBODY, "CBODY"), root_2);

					DebugLocation(179, 42);
					if (!(stream_b.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_b.HasNext )
					{
						DebugLocation(179, 42);
						adaptor.AddChild(root_2, stream_b.NextTree());

					}
					stream_b.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseExpression", 27);
			LeaveRule("caseExpression", 27);
			LeaveRule_caseExpression();
			if (state.backtracking > 0) { Memoize(input, 27, caseExpression_StartIndex); }

		}
		DebugLocation(180, 4);
		} finally { DebugExitRule(GrammarFileName, "caseExpression"); }
		return retval;

	}
	// $ANTLR end "caseExpression"

	partial void EnterRule_caseBooleanExpression();
	partial void LeaveRule_caseBooleanExpression();
	// $ANTLR start "caseBooleanExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:182:1: caseBooleanExpression : ( (p+= ProbabilityLiteral COLON b+= booleanExpression )+ p+= ELSE COLON b+= booleanExpression -> {$p==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) ) | ( CASE e+= booleanExpression COLON b+= booleanExpression )+ e+= elseToken COLON b+= booleanExpression -> {$e==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) ) );
	[GrammarRule("caseBooleanExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseBooleanExpression()
	{
		EnterRule_caseBooleanExpression();
		EnterRule("caseBooleanExpression", 28);
		TraceIn("caseBooleanExpression", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int caseBooleanExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken COLON247 = default(CommonToken);
		CommonToken COLON248 = default(CommonToken);
		CommonToken CASE249 = default(CommonToken);
		CommonToken COLON250 = default(CommonToken);
		CommonToken COLON251 = default(CommonToken);
		CommonToken p = default(CommonToken);
		List<CommonToken> list_p = null;
		List<CommonTree> list_b = null;
		List<CommonTree> list_e = null;
		AstParserRuleReturnScope<CommonTree, CommonToken> b = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> e = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		CommonTree COLON247_tree = default(CommonTree);
		CommonTree COLON248_tree = default(CommonTree);
		CommonTree CASE249_tree = default(CommonTree);
		CommonTree COLON250_tree = default(CommonTree);
		CommonTree COLON251_tree = default(CommonTree);
		CommonTree p_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ProbabilityLiteral=new RewriteRuleITokenStream(adaptor,"token ProbabilityLiteral");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_elseToken=new RewriteRuleSubtreeStream(adaptor,"rule elseToken");
		RewriteRuleSubtreeStream stream_booleanExpression=new RewriteRuleSubtreeStream(adaptor,"rule booleanExpression");
		try { DebugEnterRule(GrammarFileName, "caseBooleanExpression");
		DebugLocation(182, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:183:5: ( (p+= ProbabilityLiteral COLON b+= booleanExpression )+ p+= ELSE COLON b+= booleanExpression -> {$p==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) ) | ( CASE e+= booleanExpression COLON b+= booleanExpression )+ e+= elseToken COLON b+= booleanExpression -> {$e==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) ) )
			int alt47=2;
			try { DebugEnterDecision(47, false);
			int LA47_1 = input.LA(1);

			if ((LA47_1==ProbabilityLiteral))
			{
				alt47 = 1;
			}
			else if ((LA47_1==CASE))
			{
				alt47 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 47, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:183:7: (p+= ProbabilityLiteral COLON b+= booleanExpression )+ p+= ELSE COLON b+= booleanExpression
				{
				DebugLocation(183, 7);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:183:7: (p+= ProbabilityLiteral COLON b+= booleanExpression )+
				int cnt45=0;
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					int LA45_1 = input.LA(1);

					if ((LA45_1==ProbabilityLiteral))
					{
						alt45 = 1;
					}


					} finally { DebugExitDecision(45); }
					switch (alt45)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:183:8: p+= ProbabilityLiteral COLON b+= booleanExpression
						{
						DebugLocation(183, 9);
						p=(CommonToken)Match(input,ProbabilityLiteral,Follow._ProbabilityLiteral_in_caseBooleanExpression2184); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_ProbabilityLiteral.Add(p);

						if (list_p==null) list_p=new List<CommonToken>();
						list_p.Add(p);

						DebugLocation(183, 30);
						COLON247=(CommonToken)Match(input,COLON,Follow._COLON_in_caseBooleanExpression2186); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COLON.Add(COLON247);

						DebugLocation(183, 37);
						PushFollow(Follow._booleanExpression_in_caseBooleanExpression2190);
						b=booleanExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_booleanExpression.Add(b.Tree);
						if (list_b==null) list_b=new List<CommonTree>();
						list_b.Add(b.Tree);


						}
						break;

					default:
						if (cnt45 >= 1)
							goto loop45;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee45 = new EarlyExitException( 45, input );
						DebugRecognitionException(eee45);
						throw eee45;
					}
					cnt45++;
				}
				loop45:
					;

				} finally { DebugExitSubRule(45); }

				DebugLocation(183, 61);
				p=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseBooleanExpression2197); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ELSE.Add(p);

				if (list_p==null) list_p=new List<CommonToken>();
				list_p.Add(p);

				DebugLocation(183, 68);
				COLON248=(CommonToken)Match(input,COLON,Follow._COLON_in_caseBooleanExpression2199); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON248);

				DebugLocation(183, 75);
				PushFollow(Follow._booleanExpression_in_caseBooleanExpression2203);
				b=booleanExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_booleanExpression.Add(b.Tree);
				if (list_b==null) list_b=new List<CommonTree>();
				list_b.Add(b.Tree);



				{
				// AST REWRITE
				// elements: p, b
				// token labels: 
				// rule labels: retval
				// token list labels: p
				// rule list labels: b
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_p=new RewriteRuleITokenStream(adaptor,"token p", list_p);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
				root_0 = (CommonTree)adaptor.Nil();
				// 184:9: -> {$p==null}? ^( ERROR )
				if (list_p==null)
				{
					DebugLocation(184, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:184:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(184, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 185:9: -> {$b==null}? ^( ERROR )
				if (list_b==null)
				{
					DebugLocation(185, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:185:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(185, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 186:9: -> ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) )
				{
					DebugLocation(186, 12);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:186:12: ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(186, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CPROB, "CPROB"), root_1);

					DebugLocation(186, 20);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:186:20: ^( CPROB ( $p)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(186, 22);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CPROB, "CPROB"), root_2);

					DebugLocation(186, 29);
					if (!(stream_p.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_p.HasNext )
					{
						DebugLocation(186, 29);
						adaptor.AddChild(root_2, stream_p.NextNode());

					}
					stream_p.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(186, 33);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:186:33: ^( CBODY ( $b)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(186, 35);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CBODY, "CBODY"), root_2);

					DebugLocation(186, 42);
					if (!(stream_b.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_b.HasNext )
					{
						DebugLocation(186, 42);
						adaptor.AddChild(root_2, stream_b.NextTree());

					}
					stream_b.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:187:7: ( CASE e+= booleanExpression COLON b+= booleanExpression )+ e+= elseToken COLON b+= booleanExpression
				{
				DebugLocation(187, 7);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:187:7: ( CASE e+= booleanExpression COLON b+= booleanExpression )+
				int cnt46=0;
				try { DebugEnterSubRule(46);
				while (true)
				{
					int alt46=2;
					try { DebugEnterDecision(46, false);
					int LA46_1 = input.LA(1);

					if ((LA46_1==CASE))
					{
						alt46 = 1;
					}


					} finally { DebugExitDecision(46); }
					switch (alt46)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:187:8: CASE e+= booleanExpression COLON b+= booleanExpression
						{
						DebugLocation(187, 8);
						CASE249=(CommonToken)Match(input,CASE,Follow._CASE_in_caseBooleanExpression2278); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_CASE.Add(CASE249);

						DebugLocation(187, 14);
						PushFollow(Follow._booleanExpression_in_caseBooleanExpression2282);
						e=booleanExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_booleanExpression.Add(e.Tree);
						if (list_e==null) list_e=new List<CommonTree>();
						list_e.Add(e.Tree);

						DebugLocation(187, 35);
						COLON250=(CommonToken)Match(input,COLON,Follow._COLON_in_caseBooleanExpression2285); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COLON.Add(COLON250);

						DebugLocation(187, 42);
						PushFollow(Follow._booleanExpression_in_caseBooleanExpression2289);
						b=booleanExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_booleanExpression.Add(b.Tree);
						if (list_b==null) list_b=new List<CommonTree>();
						list_b.Add(b.Tree);


						}
						break;

					default:
						if (cnt46 >= 1)
							goto loop46;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee46 = new EarlyExitException( 46, input );
						DebugRecognitionException(eee46);
						throw eee46;
					}
					cnt46++;
				}
				loop46:
					;

				} finally { DebugExitSubRule(46); }

				DebugLocation(187, 66);
				PushFollow(Follow._elseToken_in_caseBooleanExpression2296);
				e=elseToken();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_elseToken.Add(e.Tree);
				if (list_e==null) list_e=new List<CommonTree>();
				list_e.Add(e.Tree);

				DebugLocation(187, 78);
				COLON251=(CommonToken)Match(input,COLON,Follow._COLON_in_caseBooleanExpression2298); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON251);

				DebugLocation(187, 85);
				PushFollow(Follow._booleanExpression_in_caseBooleanExpression2302);
				b=booleanExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_booleanExpression.Add(b.Tree);
				if (list_b==null) list_b=new List<CommonTree>();
				list_b.Add(b.Tree);



				{
				// AST REWRITE
				// elements: b, e
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: b, e
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
				RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"token e",list_e);
				root_0 = (CommonTree)adaptor.Nil();
				// 188:9: -> {$e==null}? ^( ERROR )
				if (list_e==null)
				{
					DebugLocation(188, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:188:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(188, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 189:9: -> {$b==null}? ^( ERROR )
				if (list_b==null)
				{
					DebugLocation(189, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:189:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(189, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 190:9: -> ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) )
				{
					DebugLocation(190, 12);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:190:12: ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(190, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CEXPR, "CEXPR"), root_1);

					DebugLocation(190, 20);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:190:20: ^( CEXPR ( $e)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(190, 22);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CEXPR, "CEXPR"), root_2);

					DebugLocation(190, 29);
					if (!(stream_e.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_e.HasNext )
					{
						DebugLocation(190, 29);
						adaptor.AddChild(root_2, stream_e.NextTree());

					}
					stream_e.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(190, 33);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:190:33: ^( CBODY ( $b)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(190, 35);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CBODY, "CBODY"), root_2);

					DebugLocation(190, 42);
					if (!(stream_b.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_b.HasNext )
					{
						DebugLocation(190, 42);
						adaptor.AddChild(root_2, stream_b.NextTree());

					}
					stream_b.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseBooleanExpression", 28);
			LeaveRule("caseBooleanExpression", 28);
			LeaveRule_caseBooleanExpression();
			if (state.backtracking > 0) { Memoize(input, 28, caseBooleanExpression_StartIndex); }

		}
		DebugLocation(191, 4);
		} finally { DebugExitRule(GrammarFileName, "caseBooleanExpression"); }
		return retval;

	}
	// $ANTLR end "caseBooleanExpression"

	partial void EnterRule_caseNumericExpression();
	partial void LeaveRule_caseNumericExpression();
	// $ANTLR start "caseNumericExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:193:1: caseNumericExpression : ( (p+= ProbabilityLiteral COLON b+= numericExpression )+ p+= ELSE COLON b+= numericExpression -> {$p==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) ) | ( CASE e+= booleanExpression COLON b+= numericExpression )+ e+= elseToken COLON b+= numericExpression -> {$e==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) ) );
	[GrammarRule("caseNumericExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseNumericExpression()
	{
		EnterRule_caseNumericExpression();
		EnterRule("caseNumericExpression", 29);
		TraceIn("caseNumericExpression", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int caseNumericExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken COLON252 = default(CommonToken);
		CommonToken COLON253 = default(CommonToken);
		CommonToken CASE254 = default(CommonToken);
		CommonToken COLON255 = default(CommonToken);
		CommonToken COLON256 = default(CommonToken);
		CommonToken p = default(CommonToken);
		List<CommonToken> list_p = null;
		List<CommonTree> list_b = null;
		List<CommonTree> list_e = null;
		AstParserRuleReturnScope<CommonTree, CommonToken> b = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> e = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		CommonTree COLON252_tree = default(CommonTree);
		CommonTree COLON253_tree = default(CommonTree);
		CommonTree CASE254_tree = default(CommonTree);
		CommonTree COLON255_tree = default(CommonTree);
		CommonTree COLON256_tree = default(CommonTree);
		CommonTree p_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ProbabilityLiteral=new RewriteRuleITokenStream(adaptor,"token ProbabilityLiteral");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_elseToken=new RewriteRuleSubtreeStream(adaptor,"rule elseToken");
		RewriteRuleSubtreeStream stream_numericExpression=new RewriteRuleSubtreeStream(adaptor,"rule numericExpression");
		RewriteRuleSubtreeStream stream_booleanExpression=new RewriteRuleSubtreeStream(adaptor,"rule booleanExpression");
		try { DebugEnterRule(GrammarFileName, "caseNumericExpression");
		DebugLocation(193, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:194:5: ( (p+= ProbabilityLiteral COLON b+= numericExpression )+ p+= ELSE COLON b+= numericExpression -> {$p==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) ) | ( CASE e+= booleanExpression COLON b+= numericExpression )+ e+= elseToken COLON b+= numericExpression -> {$e==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) ) )
			int alt50=2;
			try { DebugEnterDecision(50, false);
			int LA50_1 = input.LA(1);

			if ((LA50_1==ProbabilityLiteral))
			{
				alt50 = 1;
			}
			else if ((LA50_1==CASE))
			{
				alt50 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 50, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:194:7: (p+= ProbabilityLiteral COLON b+= numericExpression )+ p+= ELSE COLON b+= numericExpression
				{
				DebugLocation(194, 7);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:194:7: (p+= ProbabilityLiteral COLON b+= numericExpression )+
				int cnt48=0;
				try { DebugEnterSubRule(48);
				while (true)
				{
					int alt48=2;
					try { DebugEnterDecision(48, false);
					int LA48_1 = input.LA(1);

					if ((LA48_1==ProbabilityLiteral))
					{
						alt48 = 1;
					}


					} finally { DebugExitDecision(48); }
					switch (alt48)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:194:8: p+= ProbabilityLiteral COLON b+= numericExpression
						{
						DebugLocation(194, 9);
						p=(CommonToken)Match(input,ProbabilityLiteral,Follow._ProbabilityLiteral_in_caseNumericExpression2388); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_ProbabilityLiteral.Add(p);

						if (list_p==null) list_p=new List<CommonToken>();
						list_p.Add(p);

						DebugLocation(194, 30);
						COLON252=(CommonToken)Match(input,COLON,Follow._COLON_in_caseNumericExpression2390); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COLON.Add(COLON252);

						DebugLocation(194, 37);
						PushFollow(Follow._numericExpression_in_caseNumericExpression2394);
						b=numericExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_numericExpression.Add(b.Tree);
						if (list_b==null) list_b=new List<CommonTree>();
						list_b.Add(b.Tree);


						}
						break;

					default:
						if (cnt48 >= 1)
							goto loop48;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee48 = new EarlyExitException( 48, input );
						DebugRecognitionException(eee48);
						throw eee48;
					}
					cnt48++;
				}
				loop48:
					;

				} finally { DebugExitSubRule(48); }

				DebugLocation(194, 61);
				p=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseNumericExpression2401); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ELSE.Add(p);

				if (list_p==null) list_p=new List<CommonToken>();
				list_p.Add(p);

				DebugLocation(194, 68);
				COLON253=(CommonToken)Match(input,COLON,Follow._COLON_in_caseNumericExpression2403); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON253);

				DebugLocation(194, 75);
				PushFollow(Follow._numericExpression_in_caseNumericExpression2407);
				b=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_numericExpression.Add(b.Tree);
				if (list_b==null) list_b=new List<CommonTree>();
				list_b.Add(b.Tree);



				{
				// AST REWRITE
				// elements: b, p
				// token labels: 
				// rule labels: retval
				// token list labels: p
				// rule list labels: b
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_p=new RewriteRuleITokenStream(adaptor,"token p", list_p);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
				root_0 = (CommonTree)adaptor.Nil();
				// 195:9: -> {$p==null}? ^( ERROR )
				if (list_p==null)
				{
					DebugLocation(195, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:195:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(195, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 196:9: -> {$b==null}? ^( ERROR )
				if (list_b==null)
				{
					DebugLocation(196, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:196:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(196, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 197:9: -> ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) )
				{
					DebugLocation(197, 12);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:197:12: ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(197, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CPROB, "CPROB"), root_1);

					DebugLocation(197, 20);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:197:20: ^( CPROB ( $p)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(197, 22);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CPROB, "CPROB"), root_2);

					DebugLocation(197, 29);
					if (!(stream_p.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_p.HasNext )
					{
						DebugLocation(197, 29);
						adaptor.AddChild(root_2, stream_p.NextNode());

					}
					stream_p.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(197, 33);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:197:33: ^( CBODY ( $b)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(197, 35);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CBODY, "CBODY"), root_2);

					DebugLocation(197, 42);
					if (!(stream_b.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_b.HasNext )
					{
						DebugLocation(197, 42);
						adaptor.AddChild(root_2, stream_b.NextTree());

					}
					stream_b.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:198:7: ( CASE e+= booleanExpression COLON b+= numericExpression )+ e+= elseToken COLON b+= numericExpression
				{
				DebugLocation(198, 7);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:198:7: ( CASE e+= booleanExpression COLON b+= numericExpression )+
				int cnt49=0;
				try { DebugEnterSubRule(49);
				while (true)
				{
					int alt49=2;
					try { DebugEnterDecision(49, false);
					int LA49_1 = input.LA(1);

					if ((LA49_1==CASE))
					{
						alt49 = 1;
					}


					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:198:8: CASE e+= booleanExpression COLON b+= numericExpression
						{
						DebugLocation(198, 8);
						CASE254=(CommonToken)Match(input,CASE,Follow._CASE_in_caseNumericExpression2482); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_CASE.Add(CASE254);

						DebugLocation(198, 14);
						PushFollow(Follow._booleanExpression_in_caseNumericExpression2486);
						e=booleanExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_booleanExpression.Add(e.Tree);
						if (list_e==null) list_e=new List<CommonTree>();
						list_e.Add(e.Tree);

						DebugLocation(198, 35);
						COLON255=(CommonToken)Match(input,COLON,Follow._COLON_in_caseNumericExpression2489); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COLON.Add(COLON255);

						DebugLocation(198, 42);
						PushFollow(Follow._numericExpression_in_caseNumericExpression2493);
						b=numericExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_numericExpression.Add(b.Tree);
						if (list_b==null) list_b=new List<CommonTree>();
						list_b.Add(b.Tree);


						}
						break;

					default:
						if (cnt49 >= 1)
							goto loop49;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee49 = new EarlyExitException( 49, input );
						DebugRecognitionException(eee49);
						throw eee49;
					}
					cnt49++;
				}
				loop49:
					;

				} finally { DebugExitSubRule(49); }

				DebugLocation(198, 66);
				PushFollow(Follow._elseToken_in_caseNumericExpression2500);
				e=elseToken();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_elseToken.Add(e.Tree);
				if (list_e==null) list_e=new List<CommonTree>();
				list_e.Add(e.Tree);

				DebugLocation(198, 78);
				COLON256=(CommonToken)Match(input,COLON,Follow._COLON_in_caseNumericExpression2502); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON256);

				DebugLocation(198, 85);
				PushFollow(Follow._numericExpression_in_caseNumericExpression2506);
				b=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_numericExpression.Add(b.Tree);
				if (list_b==null) list_b=new List<CommonTree>();
				list_b.Add(b.Tree);



				{
				// AST REWRITE
				// elements: b, e
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: b, e
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
				RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"token e",list_e);
				root_0 = (CommonTree)adaptor.Nil();
				// 199:9: -> {$e==null}? ^( ERROR )
				if (list_e==null)
				{
					DebugLocation(199, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:199:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(199, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 200:9: -> {$b==null}? ^( ERROR )
				if (list_b==null)
				{
					DebugLocation(200, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:200:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(200, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 201:9: -> ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) )
				{
					DebugLocation(201, 12);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:201:12: ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(201, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CEXPR, "CEXPR"), root_1);

					DebugLocation(201, 20);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:201:20: ^( CEXPR ( $e)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(201, 22);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CEXPR, "CEXPR"), root_2);

					DebugLocation(201, 29);
					if (!(stream_e.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_e.HasNext )
					{
						DebugLocation(201, 29);
						adaptor.AddChild(root_2, stream_e.NextTree());

					}
					stream_e.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(201, 33);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:201:33: ^( CBODY ( $b)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(201, 35);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CBODY, "CBODY"), root_2);

					DebugLocation(201, 42);
					if (!(stream_b.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_b.HasNext )
					{
						DebugLocation(201, 42);
						adaptor.AddChild(root_2, stream_b.NextTree());

					}
					stream_b.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseNumericExpression", 29);
			LeaveRule("caseNumericExpression", 29);
			LeaveRule_caseNumericExpression();
			if (state.backtracking > 0) { Memoize(input, 29, caseNumericExpression_StartIndex); }

		}
		DebugLocation(202, 4);
		} finally { DebugExitRule(GrammarFileName, "caseNumericExpression"); }
		return retval;

	}
	// $ANTLR end "caseNumericExpression"

	partial void EnterRule_caseStringExpression();
	partial void LeaveRule_caseStringExpression();
	// $ANTLR start "caseStringExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:204:1: caseStringExpression : ( (p+= ProbabilityLiteral COLON b+= stringExpression )+ p+= ELSE COLON b+= stringExpression -> {$p==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) ) | ( CASE e+= booleanExpression COLON b+= stringExpression )+ e+= elseToken COLON b+= stringExpression -> {$e==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) ) );
	[GrammarRule("caseStringExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseStringExpression()
	{
		EnterRule_caseStringExpression();
		EnterRule("caseStringExpression", 30);
		TraceIn("caseStringExpression", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int caseStringExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken COLON257 = default(CommonToken);
		CommonToken COLON258 = default(CommonToken);
		CommonToken CASE259 = default(CommonToken);
		CommonToken COLON260 = default(CommonToken);
		CommonToken COLON261 = default(CommonToken);
		CommonToken p = default(CommonToken);
		List<CommonToken> list_p = null;
		List<CommonTree> list_b = null;
		List<CommonTree> list_e = null;
		AstParserRuleReturnScope<CommonTree, CommonToken> b = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> e = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		CommonTree COLON257_tree = default(CommonTree);
		CommonTree COLON258_tree = default(CommonTree);
		CommonTree CASE259_tree = default(CommonTree);
		CommonTree COLON260_tree = default(CommonTree);
		CommonTree COLON261_tree = default(CommonTree);
		CommonTree p_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ProbabilityLiteral=new RewriteRuleITokenStream(adaptor,"token ProbabilityLiteral");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_stringExpression=new RewriteRuleSubtreeStream(adaptor,"rule stringExpression");
		RewriteRuleSubtreeStream stream_elseToken=new RewriteRuleSubtreeStream(adaptor,"rule elseToken");
		RewriteRuleSubtreeStream stream_booleanExpression=new RewriteRuleSubtreeStream(adaptor,"rule booleanExpression");
		try { DebugEnterRule(GrammarFileName, "caseStringExpression");
		DebugLocation(204, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:205:5: ( (p+= ProbabilityLiteral COLON b+= stringExpression )+ p+= ELSE COLON b+= stringExpression -> {$p==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) ) | ( CASE e+= booleanExpression COLON b+= stringExpression )+ e+= elseToken COLON b+= stringExpression -> {$e==null}? ^( ERROR ) -> {$b==null}? ^( ERROR ) -> ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) ) )
			int alt53=2;
			try { DebugEnterDecision(53, false);
			int LA53_1 = input.LA(1);

			if ((LA53_1==ProbabilityLiteral))
			{
				alt53 = 1;
			}
			else if ((LA53_1==CASE))
			{
				alt53 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 53, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:205:7: (p+= ProbabilityLiteral COLON b+= stringExpression )+ p+= ELSE COLON b+= stringExpression
				{
				DebugLocation(205, 7);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:205:7: (p+= ProbabilityLiteral COLON b+= stringExpression )+
				int cnt51=0;
				try { DebugEnterSubRule(51);
				while (true)
				{
					int alt51=2;
					try { DebugEnterDecision(51, false);
					int LA51_1 = input.LA(1);

					if ((LA51_1==ProbabilityLiteral))
					{
						alt51 = 1;
					}


					} finally { DebugExitDecision(51); }
					switch (alt51)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:205:8: p+= ProbabilityLiteral COLON b+= stringExpression
						{
						DebugLocation(205, 9);
						p=(CommonToken)Match(input,ProbabilityLiteral,Follow._ProbabilityLiteral_in_caseStringExpression2592); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_ProbabilityLiteral.Add(p);

						if (list_p==null) list_p=new List<CommonToken>();
						list_p.Add(p);

						DebugLocation(205, 30);
						COLON257=(CommonToken)Match(input,COLON,Follow._COLON_in_caseStringExpression2594); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COLON.Add(COLON257);

						DebugLocation(205, 37);
						PushFollow(Follow._stringExpression_in_caseStringExpression2598);
						b=stringExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stringExpression.Add(b.Tree);
						if (list_b==null) list_b=new List<CommonTree>();
						list_b.Add(b.Tree);


						}
						break;

					default:
						if (cnt51 >= 1)
							goto loop51;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee51 = new EarlyExitException( 51, input );
						DebugRecognitionException(eee51);
						throw eee51;
					}
					cnt51++;
				}
				loop51:
					;

				} finally { DebugExitSubRule(51); }

				DebugLocation(205, 60);
				p=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStringExpression2605); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ELSE.Add(p);

				if (list_p==null) list_p=new List<CommonToken>();
				list_p.Add(p);

				DebugLocation(205, 67);
				COLON258=(CommonToken)Match(input,COLON,Follow._COLON_in_caseStringExpression2607); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON258);

				DebugLocation(205, 74);
				PushFollow(Follow._stringExpression_in_caseStringExpression2611);
				b=stringExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stringExpression.Add(b.Tree);
				if (list_b==null) list_b=new List<CommonTree>();
				list_b.Add(b.Tree);



				{
				// AST REWRITE
				// elements: b, p
				// token labels: 
				// rule labels: retval
				// token list labels: p
				// rule list labels: b
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_p=new RewriteRuleITokenStream(adaptor,"token p", list_p);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
				root_0 = (CommonTree)adaptor.Nil();
				// 206:9: -> {$p==null}? ^( ERROR )
				if (list_p==null)
				{
					DebugLocation(206, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:206:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(206, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 207:9: -> {$b==null}? ^( ERROR )
				if (list_b==null)
				{
					DebugLocation(207, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:207:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(207, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 208:9: -> ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) )
				{
					DebugLocation(208, 12);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:208:12: ^( CPROB ^( CPROB ( $p)+ ) ^( CBODY ( $b)+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(208, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CPROB, "CPROB"), root_1);

					DebugLocation(208, 20);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:208:20: ^( CPROB ( $p)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(208, 22);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CPROB, "CPROB"), root_2);

					DebugLocation(208, 29);
					if (!(stream_p.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_p.HasNext )
					{
						DebugLocation(208, 29);
						adaptor.AddChild(root_2, stream_p.NextNode());

					}
					stream_p.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(208, 33);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:208:33: ^( CBODY ( $b)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(208, 35);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CBODY, "CBODY"), root_2);

					DebugLocation(208, 42);
					if (!(stream_b.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_b.HasNext )
					{
						DebugLocation(208, 42);
						adaptor.AddChild(root_2, stream_b.NextTree());

					}
					stream_b.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:209:7: ( CASE e+= booleanExpression COLON b+= stringExpression )+ e+= elseToken COLON b+= stringExpression
				{
				DebugLocation(209, 7);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:209:7: ( CASE e+= booleanExpression COLON b+= stringExpression )+
				int cnt52=0;
				try { DebugEnterSubRule(52);
				while (true)
				{
					int alt52=2;
					try { DebugEnterDecision(52, false);
					int LA52_1 = input.LA(1);

					if ((LA52_1==CASE))
					{
						alt52 = 1;
					}


					} finally { DebugExitDecision(52); }
					switch (alt52)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:209:8: CASE e+= booleanExpression COLON b+= stringExpression
						{
						DebugLocation(209, 8);
						CASE259=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStringExpression2686); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_CASE.Add(CASE259);

						DebugLocation(209, 14);
						PushFollow(Follow._booleanExpression_in_caseStringExpression2690);
						e=booleanExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_booleanExpression.Add(e.Tree);
						if (list_e==null) list_e=new List<CommonTree>();
						list_e.Add(e.Tree);

						DebugLocation(209, 35);
						COLON260=(CommonToken)Match(input,COLON,Follow._COLON_in_caseStringExpression2693); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COLON.Add(COLON260);

						DebugLocation(209, 42);
						PushFollow(Follow._stringExpression_in_caseStringExpression2697);
						b=stringExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stringExpression.Add(b.Tree);
						if (list_b==null) list_b=new List<CommonTree>();
						list_b.Add(b.Tree);


						}
						break;

					default:
						if (cnt52 >= 1)
							goto loop52;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee52 = new EarlyExitException( 52, input );
						DebugRecognitionException(eee52);
						throw eee52;
					}
					cnt52++;
				}
				loop52:
					;

				} finally { DebugExitSubRule(52); }

				DebugLocation(209, 65);
				PushFollow(Follow._elseToken_in_caseStringExpression2704);
				e=elseToken();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_elseToken.Add(e.Tree);
				if (list_e==null) list_e=new List<CommonTree>();
				list_e.Add(e.Tree);

				DebugLocation(209, 77);
				COLON261=(CommonToken)Match(input,COLON,Follow._COLON_in_caseStringExpression2706); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COLON.Add(COLON261);

				DebugLocation(209, 84);
				PushFollow(Follow._stringExpression_in_caseStringExpression2710);
				b=stringExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stringExpression.Add(b.Tree);
				if (list_b==null) list_b=new List<CommonTree>();
				list_b.Add(b.Tree);



				{
				// AST REWRITE
				// elements: b, e
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: b, e
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"token b",list_b);
				RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"token e",list_e);
				root_0 = (CommonTree)adaptor.Nil();
				// 210:9: -> {$e==null}? ^( ERROR )
				if (list_e==null)
				{
					DebugLocation(210, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:210:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(210, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 211:9: -> {$b==null}? ^( ERROR )
				if (list_b==null)
				{
					DebugLocation(211, 24);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:211:24: ^( ERROR )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(211, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ERROR, "ERROR"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 212:9: -> ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) )
				{
					DebugLocation(212, 12);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:212:12: ^( CEXPR ^( CEXPR ( $e)+ ) ^( CBODY ( $b)+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(212, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CEXPR, "CEXPR"), root_1);

					DebugLocation(212, 20);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:212:20: ^( CEXPR ( $e)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(212, 22);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CEXPR, "CEXPR"), root_2);

					DebugLocation(212, 29);
					if (!(stream_e.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_e.HasNext )
					{
						DebugLocation(212, 29);
						adaptor.AddChild(root_2, stream_e.NextTree());

					}
					stream_e.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(212, 33);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:212:33: ^( CBODY ( $b)+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(212, 35);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CBODY, "CBODY"), root_2);

					DebugLocation(212, 42);
					if (!(stream_b.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_b.HasNext )
					{
						DebugLocation(212, 42);
						adaptor.AddChild(root_2, stream_b.NextTree());

					}
					stream_b.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseStringExpression", 30);
			LeaveRule("caseStringExpression", 30);
			LeaveRule_caseStringExpression();
			if (state.backtracking > 0) { Memoize(input, 30, caseStringExpression_StartIndex); }

		}
		DebugLocation(213, 4);
		} finally { DebugExitRule(GrammarFileName, "caseStringExpression"); }
		return retval;

	}
	// $ANTLR end "caseStringExpression"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:215:1: expression : ( caseExpression | booleanExpression );
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 31);
		TraceIn("expression", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression262 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> booleanExpression263 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(215, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:216:5: ( caseExpression | booleanExpression )
			int alt54=2;
			try { DebugEnterDecision(54, false);
			int LA54_1 = input.LA(1);

			if ((LA54_1==CASE||LA54_1==ProbabilityLiteral))
			{
				alt54 = 1;
			}
			else if ((LA54_1==BooleanLiteral||LA54_1==FloatingPointLiteral||LA54_1==Identifier||LA54_1==MINUS||LA54_1==NOT||(LA54_1>=PLUS && LA54_1<=POPEN)||LA54_1==SEL||LA54_1==StringLiteral))
			{
				alt54 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 54, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:216:7: caseExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 7);
				PushFollow(Follow._caseExpression_in_expression2793);
				caseExpression262=caseExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, caseExpression262.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:217:7: booleanExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(217, 7);
				PushFollow(Follow._booleanExpression_in_expression2801);
				booleanExpression263=booleanExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, booleanExpression263.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 31);
			LeaveRule("expression", 31);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 31, expression_StartIndex); }

		}
		DebugLocation(218, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_booleanExpression();
	partial void LeaveRule_booleanExpression();
	// $ANTLR start "booleanExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:223:1: booleanExpression : conditonalOrExpression ;
	[GrammarRule("booleanExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> booleanExpression()
	{
		EnterRule_booleanExpression();
		EnterRule("booleanExpression", 32);
		TraceIn("booleanExpression", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int booleanExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> conditonalOrExpression264 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "booleanExpression");
		DebugLocation(223, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:224:5: ( conditonalOrExpression )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:224:7: conditonalOrExpression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(224, 7);
			PushFollow(Follow._conditonalOrExpression_in_booleanExpression2821);
			conditonalOrExpression264=conditonalOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditonalOrExpression264.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("booleanExpression", 32);
			LeaveRule("booleanExpression", 32);
			LeaveRule_booleanExpression();
			if (state.backtracking > 0) { Memoize(input, 32, booleanExpression_StartIndex); }

		}
		DebugLocation(225, 1);
		} finally { DebugExitRule(GrammarFileName, "booleanExpression"); }
		return retval;

	}
	// $ANTLR end "booleanExpression"

	partial void EnterRule_conditonalOrExpression();
	partial void LeaveRule_conditonalOrExpression();
	// $ANTLR start "conditonalOrExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:227:1: conditonalOrExpression : conditionalAndExpression ( OR ^ conditionalAndExpression )* ;
	[GrammarRule("conditonalOrExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> conditonalOrExpression()
	{
		EnterRule_conditonalOrExpression();
		EnterRule("conditonalOrExpression", 33);
		TraceIn("conditonalOrExpression", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int conditonalOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken OR266 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> conditionalAndExpression265 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> conditionalAndExpression267 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OR266_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditonalOrExpression");
		DebugLocation(227, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:228:2: ( conditionalAndExpression ( OR ^ conditionalAndExpression )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:228:4: conditionalAndExpression ( OR ^ conditionalAndExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(228, 4);
			PushFollow(Follow._conditionalAndExpression_in_conditonalOrExpression2832);
			conditionalAndExpression265=conditionalAndExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalAndExpression265.Tree);
			DebugLocation(228, 29);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:228:29: ( OR ^ conditionalAndExpression )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_1 = input.LA(1);

				if ((LA55_1==OR))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:228:31: OR ^ conditionalAndExpression
					{
					DebugLocation(228, 33);
					OR266=(CommonToken)Match(input,OR,Follow._OR_in_conditonalOrExpression2836); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR266_tree = (CommonTree)adaptor.Create(OR266);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR266_tree, root_0);
					}
					DebugLocation(228, 35);
					PushFollow(Follow._conditionalAndExpression_in_conditonalOrExpression2839);
					conditionalAndExpression267=conditionalAndExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalAndExpression267.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditonalOrExpression", 33);
			LeaveRule("conditonalOrExpression", 33);
			LeaveRule_conditonalOrExpression();
			if (state.backtracking > 0) { Memoize(input, 33, conditonalOrExpression_StartIndex); }

		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "conditonalOrExpression"); }
		return retval;

	}
	// $ANTLR end "conditonalOrExpression"

	partial void EnterRule_conditionalAndExpression();
	partial void LeaveRule_conditionalAndExpression();
	// $ANTLR start "conditionalAndExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:231:1: conditionalAndExpression : equalityExpression ( AND ^ equalityExpression )* ;
	[GrammarRule("conditionalAndExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> conditionalAndExpression()
	{
		EnterRule_conditionalAndExpression();
		EnterRule("conditionalAndExpression", 34);
		TraceIn("conditionalAndExpression", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int conditionalAndExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken AND269 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> equalityExpression268 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> equalityExpression270 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree AND269_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalAndExpression");
		DebugLocation(231, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:232:5: ( equalityExpression ( AND ^ equalityExpression )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:232:9: equalityExpression ( AND ^ equalityExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(232, 9);
			PushFollow(Follow._equalityExpression_in_conditionalAndExpression2858);
			equalityExpression268=equalityExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression268.Tree);
			DebugLocation(232, 28);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:232:28: ( AND ^ equalityExpression )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_1 = input.LA(1);

				if ((LA56_1==AND))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:232:30: AND ^ equalityExpression
					{
					DebugLocation(232, 33);
					AND269=(CommonToken)Match(input,AND,Follow._AND_in_conditionalAndExpression2862); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND269_tree = (CommonTree)adaptor.Create(AND269);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND269_tree, root_0);
					}
					DebugLocation(232, 35);
					PushFollow(Follow._equalityExpression_in_conditionalAndExpression2865);
					equalityExpression270=equalityExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression270.Tree);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalAndExpression", 34);
			LeaveRule("conditionalAndExpression", 34);
			LeaveRule_conditionalAndExpression();
			if (state.backtracking > 0) { Memoize(input, 34, conditionalAndExpression_StartIndex); }

		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalAndExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalAndExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();
	// $ANTLR start "equalityExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:235:1: equalityExpression : relationalExpression ( ( EQUAL | NEQUAL ) ^ relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 35);
		TraceIn("equalityExpression", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int equalityExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken set272 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> relationalExpression271 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> relationalExpression273 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set272_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(235, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:236:5: ( relationalExpression ( ( EQUAL | NEQUAL ) ^ relationalExpression )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:236:9: relationalExpression ( ( EQUAL | NEQUAL ) ^ relationalExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(236, 9);
			PushFollow(Follow._relationalExpression_in_equalityExpression2884);
			relationalExpression271=relationalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpression271.Tree);
			DebugLocation(236, 30);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:236:30: ( ( EQUAL | NEQUAL ) ^ relationalExpression )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==EQUAL||LA57_1==NEQUAL))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:236:32: ( EQUAL | NEQUAL ) ^ relationalExpression
					{
					DebugLocation(236, 48);

					set272=(CommonToken)input.LT(1);
					set272=(CommonToken)input.LT(1);
					if (input.LA(1)==EQUAL||input.LA(1)==NEQUAL)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set272), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(236, 50);
					PushFollow(Follow._relationalExpression_in_equalityExpression2897);
					relationalExpression273=relationalExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpression273.Tree);

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 35);
			LeaveRule("equalityExpression", 35);
			LeaveRule_equalityExpression();
			if (state.backtracking > 0) { Memoize(input, 35, equalityExpression_StartIndex); }

		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();
	// $ANTLR start "relationalExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:239:1: relationalExpression : ( numericOrStringExpression ( relationalOp ^ numericOrStringExpression )? | NOT unaryBooleanExpression -> ^( NOT unaryBooleanExpression ) | unaryBooleanExpression );
	[GrammarRule("relationalExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 36);
		TraceIn("relationalExpression", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int relationalExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken NOT277 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericOrStringExpression274 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> relationalOp275 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericOrStringExpression276 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryBooleanExpression278 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryBooleanExpression279 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NOT277_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleSubtreeStream stream_unaryBooleanExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryBooleanExpression");
		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(239, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:240:5: ( numericOrStringExpression ( relationalOp ^ numericOrStringExpression )? | NOT unaryBooleanExpression -> ^( NOT unaryBooleanExpression ) | unaryBooleanExpression )
			int alt59=3;
			try { DebugEnterDecision(59, false);
			try
			{
				alt59 = dfa59.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:240:7: numericOrStringExpression ( relationalOp ^ numericOrStringExpression )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(240, 7);
				PushFollow(Follow._numericOrStringExpression_in_relationalExpression2914);
				numericOrStringExpression274=numericOrStringExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericOrStringExpression274.Tree);
				DebugLocation(240, 33);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:240:33: ( relationalOp ^ numericOrStringExpression )?
				int alt58=2;
				try { DebugEnterSubRule(58);
				try { DebugEnterDecision(58, false);
				int LA58_1 = input.LA(1);

				if (((LA58_1>=GEQUAL && LA58_1<=GT)||(LA58_1>=LEQUAL && LA58_1<=LT)))
				{
					alt58 = 1;
				}
				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:240:35: relationalOp ^ numericOrStringExpression
					{
					DebugLocation(240, 47);
					PushFollow(Follow._relationalOp_in_relationalExpression2918);
					relationalOp275=relationalOp();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(relationalOp275.Tree, root_0);
					DebugLocation(240, 49);
					PushFollow(Follow._numericOrStringExpression_in_relationalExpression2921);
					numericOrStringExpression276=numericOrStringExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, numericOrStringExpression276.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(58); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:241:7: NOT unaryBooleanExpression
				{
				DebugLocation(241, 7);
				NOT277=(CommonToken)Match(input,NOT,Follow._NOT_in_relationalExpression2932); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT277);

				DebugLocation(241, 11);
				PushFollow(Follow._unaryBooleanExpression_in_relationalExpression2934);
				unaryBooleanExpression278=unaryBooleanExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryBooleanExpression.Add(unaryBooleanExpression278.Tree);


				{
				// AST REWRITE
				// elements: unaryBooleanExpression, NOT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 241:34: -> ^( NOT unaryBooleanExpression )
				{
					DebugLocation(241, 37);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:241:37: ^( NOT unaryBooleanExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(241, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NOT.NextNode(), root_1);

					DebugLocation(241, 43);
					adaptor.AddChild(root_1, stream_unaryBooleanExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:242:7: unaryBooleanExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(242, 7);
				PushFollow(Follow._unaryBooleanExpression_in_relationalExpression2950);
				unaryBooleanExpression279=unaryBooleanExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryBooleanExpression279.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 36);
			LeaveRule("relationalExpression", 36);
			LeaveRule_relationalExpression();
			if (state.backtracking > 0) { Memoize(input, 36, relationalExpression_StartIndex); }

		}
		DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_relationalOp();
	partial void LeaveRule_relationalOp();
	// $ANTLR start "relationalOp"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:245:1: relationalOp : ( GT | GEQUAL | LT | LEQUAL ) ;
	[GrammarRule("relationalOp")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> relationalOp()
	{
		EnterRule_relationalOp();
		EnterRule("relationalOp", 37);
		TraceIn("relationalOp", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int relationalOp_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken set280 = default(CommonToken);

		CommonTree set280_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "relationalOp");
		DebugLocation(245, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:246:2: ( ( GT | GEQUAL | LT | LEQUAL ) )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(246, 2);

			set280=(CommonToken)input.LT(1);
			if ((input.LA(1)>=GEQUAL && input.LA(1)<=GT)||(input.LA(1)>=LEQUAL && input.LA(1)<=LT))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set280));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalOp", 37);
			LeaveRule("relationalOp", 37);
			LeaveRule_relationalOp();
			if (state.backtracking > 0) { Memoize(input, 37, relationalOp_StartIndex); }

		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalOp"); }
		return retval;

	}
	// $ANTLR end "relationalOp"

	partial void EnterRule_unaryBooleanExpression();
	partial void LeaveRule_unaryBooleanExpression();
	// $ANTLR start "unaryBooleanExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:249:1: unaryBooleanExpression : ( booleanParExpression | BooleanLiteral | functionOrVar );
	[GrammarRule("unaryBooleanExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> unaryBooleanExpression()
	{
		EnterRule_unaryBooleanExpression();
		EnterRule("unaryBooleanExpression", 38);
		TraceIn("unaryBooleanExpression", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int unaryBooleanExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken BooleanLiteral282 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> booleanParExpression281 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> functionOrVar283 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree BooleanLiteral282_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "unaryBooleanExpression");
		DebugLocation(249, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:250:2: ( booleanParExpression | BooleanLiteral | functionOrVar )
			int alt60=3;
			try { DebugEnterDecision(60, false);
			switch (input.LA(1))
			{
			case POPEN:
				{
				alt60 = 1;
				}
				break;
			case BooleanLiteral:
				{
				alt60 = 2;
				}
				break;
			case Identifier:
			case SEL:
				{
				alt60 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 60, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:250:4: booleanParExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(250, 4);
				PushFollow(Follow._booleanParExpression_in_unaryBooleanExpression2986);
				booleanParExpression281=booleanParExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, booleanParExpression281.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:251:4: BooleanLiteral
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(251, 4);
				BooleanLiteral282=(CommonToken)Match(input,BooleanLiteral,Follow._BooleanLiteral_in_unaryBooleanExpression2991); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BooleanLiteral282_tree = (CommonTree)adaptor.Create(BooleanLiteral282);
				adaptor.AddChild(root_0, BooleanLiteral282_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:252:4: functionOrVar
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(252, 4);
				PushFollow(Follow._functionOrVar_in_unaryBooleanExpression2996);
				functionOrVar283=functionOrVar();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionOrVar283.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryBooleanExpression", 38);
			LeaveRule("unaryBooleanExpression", 38);
			LeaveRule_unaryBooleanExpression();
			if (state.backtracking > 0) { Memoize(input, 38, unaryBooleanExpression_StartIndex); }

		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryBooleanExpression"); }
		return retval;

	}
	// $ANTLR end "unaryBooleanExpression"

	partial void EnterRule_booleanParExpression();
	partial void LeaveRule_booleanParExpression();
	// $ANTLR start "booleanParExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:255:1: booleanParExpression : ( POPEN caseBooleanExpression PCLOSE -> caseBooleanExpression | POPEN booleanExpression PCLOSE -> booleanExpression );
	[GrammarRule("booleanParExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> booleanParExpression()
	{
		EnterRule_booleanParExpression();
		EnterRule("booleanParExpression", 39);
		TraceIn("booleanParExpression", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int booleanParExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken POPEN284 = default(CommonToken);
		CommonToken PCLOSE286 = default(CommonToken);
		CommonToken POPEN287 = default(CommonToken);
		CommonToken PCLOSE289 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseBooleanExpression285 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> booleanExpression288 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree POPEN284_tree = default(CommonTree);
		CommonTree PCLOSE286_tree = default(CommonTree);
		CommonTree POPEN287_tree = default(CommonTree);
		CommonTree PCLOSE289_tree = default(CommonTree);
		RewriteRuleITokenStream stream_POPEN=new RewriteRuleITokenStream(adaptor,"token POPEN");
		RewriteRuleITokenStream stream_PCLOSE=new RewriteRuleITokenStream(adaptor,"token PCLOSE");
		RewriteRuleSubtreeStream stream_caseBooleanExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseBooleanExpression");
		RewriteRuleSubtreeStream stream_booleanExpression=new RewriteRuleSubtreeStream(adaptor,"rule booleanExpression");
		try { DebugEnterRule(GrammarFileName, "booleanParExpression");
		DebugLocation(255, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:256:5: ( POPEN caseBooleanExpression PCLOSE -> caseBooleanExpression | POPEN booleanExpression PCLOSE -> booleanExpression )
			int alt61=2;
			try { DebugEnterDecision(61, false);
			int LA61_1 = input.LA(1);

			if ((LA61_1==POPEN))
			{
				int LA61_2 = input.LA(2);

				if ((LA61_2==CASE||LA61_2==ProbabilityLiteral))
				{
					alt61 = 1;
				}
				else if ((LA61_2==BooleanLiteral||LA61_2==FloatingPointLiteral||LA61_2==Identifier||LA61_2==MINUS||LA61_2==NOT||(LA61_2>=PLUS && LA61_2<=POPEN)||LA61_2==SEL||LA61_2==StringLiteral))
				{
					alt61 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 61, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:256:7: POPEN caseBooleanExpression PCLOSE
				{
				DebugLocation(256, 7);
				POPEN284=(CommonToken)Match(input,POPEN,Follow._POPEN_in_booleanParExpression3010); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_POPEN.Add(POPEN284);

				DebugLocation(256, 13);
				PushFollow(Follow._caseBooleanExpression_in_booleanParExpression3012);
				caseBooleanExpression285=caseBooleanExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_caseBooleanExpression.Add(caseBooleanExpression285.Tree);
				DebugLocation(256, 35);
				PCLOSE286=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_booleanParExpression3014); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PCLOSE.Add(PCLOSE286);



				{
				// AST REWRITE
				// elements: caseBooleanExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 256:42: -> caseBooleanExpression
				{
					DebugLocation(256, 45);
					adaptor.AddChild(root_0, stream_caseBooleanExpression.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:257:4: POPEN booleanExpression PCLOSE
				{
				DebugLocation(257, 4);
				POPEN287=(CommonToken)Match(input,POPEN,Follow._POPEN_in_booleanParExpression3023); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_POPEN.Add(POPEN287);

				DebugLocation(257, 10);
				PushFollow(Follow._booleanExpression_in_booleanParExpression3025);
				booleanExpression288=booleanExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_booleanExpression.Add(booleanExpression288.Tree);
				DebugLocation(257, 28);
				PCLOSE289=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_booleanParExpression3027); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PCLOSE.Add(PCLOSE289);



				{
				// AST REWRITE
				// elements: booleanExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 257:35: -> booleanExpression
				{
					DebugLocation(257, 38);
					adaptor.AddChild(root_0, stream_booleanExpression.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("booleanParExpression", 39);
			LeaveRule("booleanParExpression", 39);
			LeaveRule_booleanParExpression();
			if (state.backtracking > 0) { Memoize(input, 39, booleanParExpression_StartIndex); }

		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "booleanParExpression"); }
		return retval;

	}
	// $ANTLR end "booleanParExpression"

	partial void EnterRule_numericExpression();
	partial void LeaveRule_numericExpression();
	// $ANTLR start "numericExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:262:1: numericExpression : additiveExpression ;
	[GrammarRule("numericExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression()
	{
		EnterRule_numericExpression();
		EnterRule("numericExpression", 40);
		TraceIn("numericExpression", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int numericExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> additiveExpression290 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "numericExpression");
		DebugLocation(262, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:263:2: ( additiveExpression )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:263:4: additiveExpression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(263, 4);
			PushFollow(Follow._additiveExpression_in_numericExpression3044);
			additiveExpression290=additiveExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression290.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("numericExpression", 40);
			LeaveRule("numericExpression", 40);
			LeaveRule_numericExpression();
			if (state.backtracking > 0) { Memoize(input, 40, numericExpression_StartIndex); }

		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "numericExpression"); }
		return retval;

	}
	// $ANTLR end "numericExpression"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();
	// $ANTLR start "additiveExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:266:1: additiveExpression : multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 41);
		TraceIn("additiveExpression", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int additiveExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS292 = default(CommonToken);
		CommonToken MINUS293 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> multiplicativeExpression291 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> multiplicativeExpression294 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS292_tree = default(CommonTree);
		CommonTree MINUS293_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(266, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:267:5: ( multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:267:9: multiplicativeExpression ( ( PLUS ^| MINUS ^) multiplicativeExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(267, 9);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression3060);
			multiplicativeExpression291=multiplicativeExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression291.Tree);
			DebugLocation(267, 34);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:267:34: ( ( PLUS ^| MINUS ^) multiplicativeExpression )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_1 = input.LA(1);

				if ((LA63_1==MINUS||LA63_1==PLUS))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:267:36: ( PLUS ^| MINUS ^) multiplicativeExpression
					{
					DebugLocation(267, 36);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:267:36: ( PLUS ^| MINUS ^)
					int alt62=2;
					try { DebugEnterSubRule(62);
					try { DebugEnterDecision(62, false);
					int LA62_1 = input.LA(1);

					if ((LA62_1==PLUS))
					{
						alt62 = 1;
					}
					else if ((LA62_1==MINUS))
					{
						alt62 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 62, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(62); }
					switch (alt62)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:267:38: PLUS ^
						{
						DebugLocation(267, 42);
						PLUS292=(CommonToken)Match(input,PLUS,Follow._PLUS_in_additiveExpression3066); if (state.failed) return retval;
						if (state.backtracking == 0) {
						PLUS292_tree = (CommonTree)adaptor.Create(PLUS292);
						root_0 = (CommonTree)adaptor.BecomeRoot(PLUS292_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:267:46: MINUS ^
						{
						DebugLocation(267, 51);
						MINUS293=(CommonToken)Match(input,MINUS,Follow._MINUS_in_additiveExpression3071); if (state.failed) return retval;
						if (state.backtracking == 0) {
						MINUS293_tree = (CommonTree)adaptor.Create(MINUS293);
						root_0 = (CommonTree)adaptor.BecomeRoot(MINUS293_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(62); }

					DebugLocation(267, 55);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression3076);
					multiplicativeExpression294=multiplicativeExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression294.Tree);

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 41);
			LeaveRule("additiveExpression", 41);
			LeaveRule_additiveExpression();
			if (state.backtracking > 0) { Memoize(input, 41, additiveExpression_StartIndex); }

		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();
	// $ANTLR start "multiplicativeExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:270:1: multiplicativeExpression : unaryNumericPrefixExpression ( ( MULT ^| DIV ^| MOD ^) unaryNumericPrefixExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 42);
		TraceIn("multiplicativeExpression", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int multiplicativeExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken MULT296 = default(CommonToken);
		CommonToken DIV297 = default(CommonToken);
		CommonToken MOD298 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryNumericPrefixExpression295 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryNumericPrefixExpression299 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree MULT296_tree = default(CommonTree);
		CommonTree DIV297_tree = default(CommonTree);
		CommonTree MOD298_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(270, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:271:5: ( unaryNumericPrefixExpression ( ( MULT ^| DIV ^| MOD ^) unaryNumericPrefixExpression )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:271:7: unaryNumericPrefixExpression ( ( MULT ^| DIV ^| MOD ^) unaryNumericPrefixExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(271, 7);
			PushFollow(Follow._unaryNumericPrefixExpression_in_multiplicativeExpression3093);
			unaryNumericPrefixExpression295=unaryNumericPrefixExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unaryNumericPrefixExpression295.Tree);
			DebugLocation(271, 36);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:271:36: ( ( MULT ^| DIV ^| MOD ^) unaryNumericPrefixExpression )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_1 = input.LA(1);

				if ((LA65_1==DIV||(LA65_1>=MOD && LA65_1<=MULT)))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:271:38: ( MULT ^| DIV ^| MOD ^) unaryNumericPrefixExpression
					{
					DebugLocation(271, 38);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:271:38: ( MULT ^| DIV ^| MOD ^)
					int alt64=3;
					try { DebugEnterSubRule(64);
					try { DebugEnterDecision(64, false);
					switch (input.LA(1))
					{
					case MULT:
						{
						alt64 = 1;
						}
						break;
					case DIV:
						{
						alt64 = 2;
						}
						break;
					case MOD:
						{
						alt64 = 3;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 64, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(64); }
					switch (alt64)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:271:40: MULT ^
						{
						DebugLocation(271, 44);
						MULT296=(CommonToken)Match(input,MULT,Follow._MULT_in_multiplicativeExpression3099); if (state.failed) return retval;
						if (state.backtracking == 0) {
						MULT296_tree = (CommonTree)adaptor.Create(MULT296);
						root_0 = (CommonTree)adaptor.BecomeRoot(MULT296_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:271:48: DIV ^
						{
						DebugLocation(271, 51);
						DIV297=(CommonToken)Match(input,DIV,Follow._DIV_in_multiplicativeExpression3104); if (state.failed) return retval;
						if (state.backtracking == 0) {
						DIV297_tree = (CommonTree)adaptor.Create(DIV297);
						root_0 = (CommonTree)adaptor.BecomeRoot(DIV297_tree, root_0);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:271:55: MOD ^
						{
						DebugLocation(271, 58);
						MOD298=(CommonToken)Match(input,MOD,Follow._MOD_in_multiplicativeExpression3109); if (state.failed) return retval;
						if (state.backtracking == 0) {
						MOD298_tree = (CommonTree)adaptor.Create(MOD298);
						root_0 = (CommonTree)adaptor.BecomeRoot(MOD298_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(64); }

					DebugLocation(271, 62);
					PushFollow(Follow._unaryNumericPrefixExpression_in_multiplicativeExpression3114);
					unaryNumericPrefixExpression299=unaryNumericPrefixExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unaryNumericPrefixExpression299.Tree);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 42);
			LeaveRule("multiplicativeExpression", 42);
			LeaveRule_multiplicativeExpression();
			if (state.backtracking > 0) { Memoize(input, 42, multiplicativeExpression_StartIndex); }

		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_stringExpression();
	partial void LeaveRule_stringExpression();
	// $ANTLR start "stringExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:274:1: stringExpression : stringAdditiveExpression ;
	[GrammarRule("stringExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stringExpression()
	{
		EnterRule_stringExpression();
		EnterRule("stringExpression", 43);
		TraceIn("stringExpression", 43);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int stringExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> stringAdditiveExpression300 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "stringExpression");
		DebugLocation(274, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:275:2: ( stringAdditiveExpression )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:275:4: stringAdditiveExpression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(275, 4);
			PushFollow(Follow._stringAdditiveExpression_in_stringExpression3128);
			stringAdditiveExpression300=stringAdditiveExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stringAdditiveExpression300.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stringExpression", 43);
			LeaveRule("stringExpression", 43);
			LeaveRule_stringExpression();
			if (state.backtracking > 0) { Memoize(input, 43, stringExpression_StartIndex); }

		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "stringExpression"); }
		return retval;

	}
	// $ANTLR end "stringExpression"

	partial void EnterRule_stringAdditiveExpression();
	partial void LeaveRule_stringAdditiveExpression();
	// $ANTLR start "stringAdditiveExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:278:1: stringAdditiveExpression : unaryStringExpression ( PLUS ^ unaryStringExpression )* ;
	[GrammarRule("stringAdditiveExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stringAdditiveExpression()
	{
		EnterRule_stringAdditiveExpression();
		EnterRule("stringAdditiveExpression", 44);
		TraceIn("stringAdditiveExpression", 44);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int stringAdditiveExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS302 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryStringExpression301 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryStringExpression303 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS302_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stringAdditiveExpression");
		DebugLocation(278, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:279:5: ( unaryStringExpression ( PLUS ^ unaryStringExpression )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:279:9: unaryStringExpression ( PLUS ^ unaryStringExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(279, 9);
			PushFollow(Follow._unaryStringExpression_in_stringAdditiveExpression3144);
			unaryStringExpression301=unaryStringExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unaryStringExpression301.Tree);
			DebugLocation(279, 31);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:279:31: ( PLUS ^ unaryStringExpression )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_1 = input.LA(1);

				if ((LA66_1==PLUS))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:279:33: PLUS ^ unaryStringExpression
					{
					DebugLocation(279, 37);
					PLUS302=(CommonToken)Match(input,PLUS,Follow._PLUS_in_stringAdditiveExpression3148); if (state.failed) return retval;
					if (state.backtracking == 0) {
					PLUS302_tree = (CommonTree)adaptor.Create(PLUS302);
					root_0 = (CommonTree)adaptor.BecomeRoot(PLUS302_tree, root_0);
					}
					DebugLocation(279, 39);
					PushFollow(Follow._unaryStringExpression_in_stringAdditiveExpression3151);
					unaryStringExpression303=unaryStringExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unaryStringExpression303.Tree);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stringAdditiveExpression", 44);
			LeaveRule("stringAdditiveExpression", 44);
			LeaveRule_stringAdditiveExpression();
			if (state.backtracking > 0) { Memoize(input, 44, stringAdditiveExpression_StartIndex); }

		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "stringAdditiveExpression"); }
		return retval;

	}
	// $ANTLR end "stringAdditiveExpression"

	partial void EnterRule_numericOrStringExpression();
	partial void LeaveRule_numericOrStringExpression();
	// $ANTLR start "numericOrStringExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:282:1: numericOrStringExpression : numericOrStringAdditiveExpression ;
	[GrammarRule("numericOrStringExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> numericOrStringExpression()
	{
		EnterRule_numericOrStringExpression();
		EnterRule("numericOrStringExpression", 45);
		TraceIn("numericOrStringExpression", 45);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int numericOrStringExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> numericOrStringAdditiveExpression304 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "numericOrStringExpression");
		DebugLocation(282, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:283:2: ( numericOrStringAdditiveExpression )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:283:4: numericOrStringAdditiveExpression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(283, 4);
			PushFollow(Follow._numericOrStringAdditiveExpression_in_numericOrStringExpression3165);
			numericOrStringAdditiveExpression304=numericOrStringAdditiveExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, numericOrStringAdditiveExpression304.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("numericOrStringExpression", 45);
			LeaveRule("numericOrStringExpression", 45);
			LeaveRule_numericOrStringExpression();
			if (state.backtracking > 0) { Memoize(input, 45, numericOrStringExpression_StartIndex); }

		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "numericOrStringExpression"); }
		return retval;

	}
	// $ANTLR end "numericOrStringExpression"

	partial void EnterRule_numericOrStringAdditiveExpression();
	partial void LeaveRule_numericOrStringAdditiveExpression();
	// $ANTLR start "numericOrStringAdditiveExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:286:1: numericOrStringAdditiveExpression : numericOrStringMultiplicativeExpression ( ( PLUS ^| MINUS ^) numericOrStringMultiplicativeExpression )* ;
	[GrammarRule("numericOrStringAdditiveExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> numericOrStringAdditiveExpression()
	{
		EnterRule_numericOrStringAdditiveExpression();
		EnterRule("numericOrStringAdditiveExpression", 46);
		TraceIn("numericOrStringAdditiveExpression", 46);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int numericOrStringAdditiveExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS306 = default(CommonToken);
		CommonToken MINUS307 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericOrStringMultiplicativeExpression305 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericOrStringMultiplicativeExpression308 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS306_tree = default(CommonTree);
		CommonTree MINUS307_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "numericOrStringAdditiveExpression");
		DebugLocation(286, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:287:5: ( numericOrStringMultiplicativeExpression ( ( PLUS ^| MINUS ^) numericOrStringMultiplicativeExpression )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:287:9: numericOrStringMultiplicativeExpression ( ( PLUS ^| MINUS ^) numericOrStringMultiplicativeExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(287, 9);
			PushFollow(Follow._numericOrStringMultiplicativeExpression_in_numericOrStringAdditiveExpression3181);
			numericOrStringMultiplicativeExpression305=numericOrStringMultiplicativeExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, numericOrStringMultiplicativeExpression305.Tree);
			DebugLocation(287, 49);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:287:49: ( ( PLUS ^| MINUS ^) numericOrStringMultiplicativeExpression )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, false);
				int LA68_1 = input.LA(1);

				if ((LA68_1==MINUS))
				{
					int LA68_2 = input.LA(2);

					if ((LA68_2==BooleanLiteral||LA68_2==FloatingPointLiteral||LA68_2==Identifier||LA68_2==MINUS||(LA68_2>=PLUS && LA68_2<=POPEN)||LA68_2==SEL||LA68_2==StringLiteral))
					{
						alt68 = 1;
					}


				}
				else if ((LA68_1==PLUS))
				{
					alt68 = 1;
				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:287:51: ( PLUS ^| MINUS ^) numericOrStringMultiplicativeExpression
					{
					DebugLocation(287, 51);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:287:51: ( PLUS ^| MINUS ^)
					int alt67=2;
					try { DebugEnterSubRule(67);
					try { DebugEnterDecision(67, false);
					int LA67_1 = input.LA(1);

					if ((LA67_1==PLUS))
					{
						alt67 = 1;
					}
					else if ((LA67_1==MINUS))
					{
						alt67 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 67, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(67); }
					switch (alt67)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:287:53: PLUS ^
						{
						DebugLocation(287, 57);
						PLUS306=(CommonToken)Match(input,PLUS,Follow._PLUS_in_numericOrStringAdditiveExpression3187); if (state.failed) return retval;
						if (state.backtracking == 0) {
						PLUS306_tree = (CommonTree)adaptor.Create(PLUS306);
						root_0 = (CommonTree)adaptor.BecomeRoot(PLUS306_tree, root_0);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:287:61: MINUS ^
						{
						DebugLocation(287, 66);
						MINUS307=(CommonToken)Match(input,MINUS,Follow._MINUS_in_numericOrStringAdditiveExpression3192); if (state.failed) return retval;
						if (state.backtracking == 0) {
						MINUS307_tree = (CommonTree)adaptor.Create(MINUS307);
						root_0 = (CommonTree)adaptor.BecomeRoot(MINUS307_tree, root_0);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(67); }

					DebugLocation(287, 70);
					PushFollow(Follow._numericOrStringMultiplicativeExpression_in_numericOrStringAdditiveExpression3197);
					numericOrStringMultiplicativeExpression308=numericOrStringMultiplicativeExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, numericOrStringMultiplicativeExpression308.Tree);

					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("numericOrStringAdditiveExpression", 46);
			LeaveRule("numericOrStringAdditiveExpression", 46);
			LeaveRule_numericOrStringAdditiveExpression();
			if (state.backtracking > 0) { Memoize(input, 46, numericOrStringAdditiveExpression_StartIndex); }

		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "numericOrStringAdditiveExpression"); }
		return retval;

	}
	// $ANTLR end "numericOrStringAdditiveExpression"

	partial void EnterRule_numericOrStringMultiplicativeExpression();
	partial void LeaveRule_numericOrStringMultiplicativeExpression();
	// $ANTLR start "numericOrStringMultiplicativeExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:290:1: numericOrStringMultiplicativeExpression : ( unaryNumericPrefixExpression ( ( MULT ^| DIV ^| MOD ^) unaryNumericPrefixExpression )* | unaryStringExpression | unaryBooleanExpression );
	[GrammarRule("numericOrStringMultiplicativeExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> numericOrStringMultiplicativeExpression()
	{
		EnterRule_numericOrStringMultiplicativeExpression();
		EnterRule("numericOrStringMultiplicativeExpression", 47);
		TraceIn("numericOrStringMultiplicativeExpression", 47);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int numericOrStringMultiplicativeExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken MULT310 = default(CommonToken);
		CommonToken DIV311 = default(CommonToken);
		CommonToken MOD312 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryNumericPrefixExpression309 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryNumericPrefixExpression313 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryStringExpression314 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryBooleanExpression315 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree MULT310_tree = default(CommonTree);
		CommonTree DIV311_tree = default(CommonTree);
		CommonTree MOD312_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "numericOrStringMultiplicativeExpression");
		DebugLocation(290, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:291:5: ( unaryNumericPrefixExpression ( ( MULT ^| DIV ^| MOD ^) unaryNumericPrefixExpression )* | unaryStringExpression | unaryBooleanExpression )
			int alt71=3;
			try { DebugEnterDecision(71, false);
			try
			{
				alt71 = dfa71.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:291:7: unaryNumericPrefixExpression ( ( MULT ^| DIV ^| MOD ^) unaryNumericPrefixExpression )*
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(291, 7);
				PushFollow(Follow._unaryNumericPrefixExpression_in_numericOrStringMultiplicativeExpression3214);
				unaryNumericPrefixExpression309=unaryNumericPrefixExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryNumericPrefixExpression309.Tree);
				DebugLocation(291, 36);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:291:36: ( ( MULT ^| DIV ^| MOD ^) unaryNumericPrefixExpression )*
				try { DebugEnterSubRule(70);
				while (true)
				{
					int alt70=2;
					try { DebugEnterDecision(70, false);
					int LA70_1 = input.LA(1);

					if ((LA70_1==MULT))
					{
						int LA70_2 = input.LA(2);

						if ((LA70_2==FloatingPointLiteral||LA70_2==Identifier||LA70_2==MINUS||(LA70_2>=PLUS && LA70_2<=POPEN)||LA70_2==SEL))
						{
							alt70 = 1;
						}


					}
					else if ((LA70_1==DIV||LA70_1==MOD))
					{
						alt70 = 1;
					}


					} finally { DebugExitDecision(70); }
					switch ( alt70 )
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:291:38: ( MULT ^| DIV ^| MOD ^) unaryNumericPrefixExpression
						{
						DebugLocation(291, 38);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:291:38: ( MULT ^| DIV ^| MOD ^)
						int alt69=3;
						try { DebugEnterSubRule(69);
						try { DebugEnterDecision(69, false);
						switch (input.LA(1))
						{
						case MULT:
							{
							alt69 = 1;
							}
							break;
						case DIV:
							{
							alt69 = 2;
							}
							break;
						case MOD:
							{
							alt69 = 3;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 69, 0, input, 1);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						} finally { DebugExitDecision(69); }
						switch (alt69)
						{
						case 1:
							DebugEnterAlt(1);
							// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:291:40: MULT ^
							{
							DebugLocation(291, 44);
							MULT310=(CommonToken)Match(input,MULT,Follow._MULT_in_numericOrStringMultiplicativeExpression3220); if (state.failed) return retval;
							if (state.backtracking == 0) {
							MULT310_tree = (CommonTree)adaptor.Create(MULT310);
							root_0 = (CommonTree)adaptor.BecomeRoot(MULT310_tree, root_0);
							}

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:291:48: DIV ^
							{
							DebugLocation(291, 51);
							DIV311=(CommonToken)Match(input,DIV,Follow._DIV_in_numericOrStringMultiplicativeExpression3225); if (state.failed) return retval;
							if (state.backtracking == 0) {
							DIV311_tree = (CommonTree)adaptor.Create(DIV311);
							root_0 = (CommonTree)adaptor.BecomeRoot(DIV311_tree, root_0);
							}

							}
							break;
						case 3:
							DebugEnterAlt(3);
							// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:291:55: MOD ^
							{
							DebugLocation(291, 58);
							MOD312=(CommonToken)Match(input,MOD,Follow._MOD_in_numericOrStringMultiplicativeExpression3230); if (state.failed) return retval;
							if (state.backtracking == 0) {
							MOD312_tree = (CommonTree)adaptor.Create(MOD312);
							root_0 = (CommonTree)adaptor.BecomeRoot(MOD312_tree, root_0);
							}

							}
							break;

						}
						} finally { DebugExitSubRule(69); }

						DebugLocation(291, 62);
						PushFollow(Follow._unaryNumericPrefixExpression_in_numericOrStringMultiplicativeExpression3235);
						unaryNumericPrefixExpression313=unaryNumericPrefixExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, unaryNumericPrefixExpression313.Tree);

						}
						break;

					default:
						goto loop70;
					}
				}

				loop70:
					;

				} finally { DebugExitSubRule(70); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:292:7: unaryStringExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(292, 7);
				PushFollow(Follow._unaryStringExpression_in_numericOrStringMultiplicativeExpression3246);
				unaryStringExpression314=unaryStringExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryStringExpression314.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:293:7: unaryBooleanExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(293, 7);
				PushFollow(Follow._unaryBooleanExpression_in_numericOrStringMultiplicativeExpression3254);
				unaryBooleanExpression315=unaryBooleanExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryBooleanExpression315.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("numericOrStringMultiplicativeExpression", 47);
			LeaveRule("numericOrStringMultiplicativeExpression", 47);
			LeaveRule_numericOrStringMultiplicativeExpression();
			if (state.backtracking > 0) { Memoize(input, 47, numericOrStringMultiplicativeExpression_StartIndex); }

		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "numericOrStringMultiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "numericOrStringMultiplicativeExpression"

	partial void EnterRule_constraintPrefix();
	partial void LeaveRule_constraintPrefix();
	// $ANTLR start "constraintPrefix"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:296:1: constraintPrefix : ( ScaleRelative | ScaleFloat )? ;
	[GrammarRule("constraintPrefix")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> constraintPrefix()
	{
		EnterRule_constraintPrefix();
		EnterRule("constraintPrefix", 48);
		TraceIn("constraintPrefix", 48);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int constraintPrefix_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken set316 = default(CommonToken);

		CommonTree set316_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "constraintPrefix");
		DebugLocation(296, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:297:2: ( ( ScaleRelative | ScaleFloat )? )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:297:4: ( ScaleRelative | ScaleFloat )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(297, 4);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:297:4: ( ScaleRelative | ScaleFloat )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_1 = input.LA(1);

			if ((LA72_1==ScaleFloat||LA72_1==ScaleRelative))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
				{
				DebugLocation(297, 4);

				set316=(CommonToken)input.LT(1);
				if (input.LA(1)==ScaleFloat||input.LA(1)==ScaleRelative)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set316));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constraintPrefix", 48);
			LeaveRule("constraintPrefix", 48);
			LeaveRule_constraintPrefix();
			if (state.backtracking > 0) { Memoize(input, 48, constraintPrefix_StartIndex); }

		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "constraintPrefix"); }
		return retval;

	}
	// $ANTLR end "constraintPrefix"

	partial void EnterRule_unaryNumericPrefixExpression();
	partial void LeaveRule_unaryNumericPrefixExpression();
	// $ANTLR start "unaryNumericPrefixExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:300:1: unaryNumericPrefixExpression : ( ( PLUS )? unaryNumericExpression -> unaryNumericExpression | MINUS unaryNumericExpression -> ^( UMINUS unaryNumericExpression ) );
	[GrammarRule("unaryNumericPrefixExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> unaryNumericPrefixExpression()
	{
		EnterRule_unaryNumericPrefixExpression();
		EnterRule("unaryNumericPrefixExpression", 49);
		TraceIn("unaryNumericPrefixExpression", 49);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int unaryNumericPrefixExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS317 = default(CommonToken);
		CommonToken MINUS319 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryNumericExpression318 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryNumericExpression320 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS317_tree = default(CommonTree);
		CommonTree MINUS319_tree = default(CommonTree);
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleITokenStream stream_MINUS=new RewriteRuleITokenStream(adaptor,"token MINUS");
		RewriteRuleSubtreeStream stream_unaryNumericExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryNumericExpression");
		try { DebugEnterRule(GrammarFileName, "unaryNumericPrefixExpression");
		DebugLocation(300, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:301:2: ( ( PLUS )? unaryNumericExpression -> unaryNumericExpression | MINUS unaryNumericExpression -> ^( UMINUS unaryNumericExpression ) )
			int alt74=2;
			try { DebugEnterDecision(74, false);
			int LA74_1 = input.LA(1);

			if ((LA74_1==FloatingPointLiteral||LA74_1==Identifier||(LA74_1>=PLUS && LA74_1<=POPEN)||LA74_1==SEL))
			{
				alt74 = 1;
			}
			else if ((LA74_1==MINUS))
			{
				alt74 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 74, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:301:4: ( PLUS )? unaryNumericExpression
				{
				DebugLocation(301, 4);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:301:4: ( PLUS )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_1 = input.LA(1);

				if ((LA73_1==PLUS))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:301:4: PLUS
					{
					DebugLocation(301, 4);
					PLUS317=(CommonToken)Match(input,PLUS,Follow._PLUS_in_unaryNumericPrefixExpression3285); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_PLUS.Add(PLUS317);


					}
					break;

				}
				} finally { DebugExitSubRule(73); }

				DebugLocation(301, 10);
				PushFollow(Follow._unaryNumericExpression_in_unaryNumericPrefixExpression3288);
				unaryNumericExpression318=unaryNumericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryNumericExpression.Add(unaryNumericExpression318.Tree);


				{
				// AST REWRITE
				// elements: unaryNumericExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 301:33: -> unaryNumericExpression
				{
					DebugLocation(301, 36);
					adaptor.AddChild(root_0, stream_unaryNumericExpression.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:302:4: MINUS unaryNumericExpression
				{
				DebugLocation(302, 4);
				MINUS319=(CommonToken)Match(input,MINUS,Follow._MINUS_in_unaryNumericPrefixExpression3297); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MINUS.Add(MINUS319);

				DebugLocation(302, 10);
				PushFollow(Follow._unaryNumericExpression_in_unaryNumericPrefixExpression3299);
				unaryNumericExpression320=unaryNumericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_unaryNumericExpression.Add(unaryNumericExpression320.Tree);


				{
				// AST REWRITE
				// elements: unaryNumericExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 302:33: -> ^( UMINUS unaryNumericExpression )
				{
					DebugLocation(302, 36);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:302:36: ^( UMINUS unaryNumericExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(302, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(UMINUS, "UMINUS"), root_1);

					DebugLocation(302, 45);
					adaptor.AddChild(root_1, stream_unaryNumericExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryNumericPrefixExpression", 49);
			LeaveRule("unaryNumericPrefixExpression", 49);
			LeaveRule_unaryNumericPrefixExpression();
			if (state.backtracking > 0) { Memoize(input, 49, unaryNumericPrefixExpression_StartIndex); }

		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryNumericPrefixExpression"); }
		return retval;

	}
	// $ANTLR end "unaryNumericPrefixExpression"

	partial void EnterRule_unaryNumericExpression();
	partial void LeaveRule_unaryNumericExpression();
	// $ANTLR start "unaryNumericExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:305:1: unaryNumericExpression : ( numericParExpression | FloatingPointLiteral | functionOrVar );
	[GrammarRule("unaryNumericExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> unaryNumericExpression()
	{
		EnterRule_unaryNumericExpression();
		EnterRule("unaryNumericExpression", 50);
		TraceIn("unaryNumericExpression", 50);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int unaryNumericExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken FloatingPointLiteral322 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericParExpression321 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> functionOrVar323 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree FloatingPointLiteral322_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "unaryNumericExpression");
		DebugLocation(305, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:306:5: ( numericParExpression | FloatingPointLiteral | functionOrVar )
			int alt75=3;
			try { DebugEnterDecision(75, false);
			switch (input.LA(1))
			{
			case POPEN:
				{
				alt75 = 1;
				}
				break;
			case FloatingPointLiteral:
				{
				alt75 = 2;
				}
				break;
			case Identifier:
			case SEL:
				{
				alt75 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:306:7: numericParExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(306, 7);
				PushFollow(Follow._numericParExpression_in_unaryNumericExpression3321);
				numericParExpression321=numericParExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericParExpression321.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:307:9: FloatingPointLiteral
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(307, 9);
				FloatingPointLiteral322=(CommonToken)Match(input,FloatingPointLiteral,Follow._FloatingPointLiteral_in_unaryNumericExpression3331); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FloatingPointLiteral322_tree = (CommonTree)adaptor.Create(FloatingPointLiteral322);
				adaptor.AddChild(root_0, FloatingPointLiteral322_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:308:9: functionOrVar
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(308, 9);
				PushFollow(Follow._functionOrVar_in_unaryNumericExpression3341);
				functionOrVar323=functionOrVar();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionOrVar323.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryNumericExpression", 50);
			LeaveRule("unaryNumericExpression", 50);
			LeaveRule_unaryNumericExpression();
			if (state.backtracking > 0) { Memoize(input, 50, unaryNumericExpression_StartIndex); }

		}
		DebugLocation(309, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryNumericExpression"); }
		return retval;

	}
	// $ANTLR end "unaryNumericExpression"

	partial void EnterRule_constraintExpression();
	partial void LeaveRule_constraintExpression();
	// $ANTLR start "constraintExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:311:1: constraintExpression : constraintPrefix numericExpression ;
	[GrammarRule("constraintExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> constraintExpression()
	{
		EnterRule_constraintExpression();
		EnterRule("constraintExpression", 51);
		TraceIn("constraintExpression", 51);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int constraintExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> constraintPrefix324 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression325 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "constraintExpression");
		DebugLocation(311, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:312:2: ( constraintPrefix numericExpression )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:312:4: constraintPrefix numericExpression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(312, 4);
			PushFollow(Follow._constraintPrefix_in_constraintExpression3352);
			constraintPrefix324=constraintPrefix();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constraintPrefix324.Tree);
			DebugLocation(312, 21);
			PushFollow(Follow._numericExpression_in_constraintExpression3354);
			numericExpression325=numericExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression325.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constraintExpression", 51);
			LeaveRule("constraintExpression", 51);
			LeaveRule_constraintExpression();
			if (state.backtracking > 0) { Memoize(input, 51, constraintExpression_StartIndex); }

		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "constraintExpression"); }
		return retval;

	}
	// $ANTLR end "constraintExpression"

	partial void EnterRule_scaleRelativeExpression();
	partial void LeaveRule_scaleRelativeExpression();
	// $ANTLR start "scaleRelativeExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:315:1: scaleRelativeExpression : ( numericExpression | ScaleRelative numericExpression -> ^( ScaleRelative numericExpression ) );
	[GrammarRule("scaleRelativeExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeExpression()
	{
		EnterRule_scaleRelativeExpression();
		EnterRule("scaleRelativeExpression", 52);
		TraceIn("scaleRelativeExpression", 52);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int scaleRelativeExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken ScaleRelative327 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression326 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression328 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ScaleRelative327_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ScaleRelative=new RewriteRuleITokenStream(adaptor,"token ScaleRelative");
		RewriteRuleSubtreeStream stream_numericExpression=new RewriteRuleSubtreeStream(adaptor,"rule numericExpression");
		try { DebugEnterRule(GrammarFileName, "scaleRelativeExpression");
		DebugLocation(315, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:316:5: ( numericExpression | ScaleRelative numericExpression -> ^( ScaleRelative numericExpression ) )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			int LA76_1 = input.LA(1);

			if ((LA76_1==FloatingPointLiteral||LA76_1==Identifier||LA76_1==MINUS||(LA76_1>=PLUS && LA76_1<=POPEN)||LA76_1==SEL))
			{
				alt76 = 1;
			}
			else if ((LA76_1==ScaleRelative))
			{
				alt76 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:316:7: numericExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(316, 7);
				PushFollow(Follow._numericExpression_in_scaleRelativeExpression3368);
				numericExpression326=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression326.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:317:7: ScaleRelative numericExpression
				{
				DebugLocation(317, 7);
				ScaleRelative327=(CommonToken)Match(input,ScaleRelative,Follow._ScaleRelative_in_scaleRelativeExpression3376); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ScaleRelative.Add(ScaleRelative327);

				DebugLocation(317, 21);
				PushFollow(Follow._numericExpression_in_scaleRelativeExpression3378);
				numericExpression328=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_numericExpression.Add(numericExpression328.Tree);


				{
				// AST REWRITE
				// elements: numericExpression, ScaleRelative
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 317:39: -> ^( ScaleRelative numericExpression )
				{
					DebugLocation(317, 42);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:317:42: ^( ScaleRelative numericExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(317, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_ScaleRelative.NextNode(), root_1);

					DebugLocation(317, 58);
					adaptor.AddChild(root_1, stream_numericExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("scaleRelativeExpression", 52);
			LeaveRule("scaleRelativeExpression", 52);
			LeaveRule_scaleRelativeExpression();
			if (state.backtracking > 0) { Memoize(input, 52, scaleRelativeExpression_StartIndex); }

		}
		DebugLocation(318, 4);
		} finally { DebugExitRule(GrammarFileName, "scaleRelativeExpression"); }
		return retval;

	}
	// $ANTLR end "scaleRelativeExpression"

	partial void EnterRule_scaleFloatingExpression();
	partial void LeaveRule_scaleFloatingExpression();
	// $ANTLR start "scaleFloatingExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:320:1: scaleFloatingExpression : ( numericExpression | ScaleFloat numericExpression -> ^( ScaleFloat numericExpression ) );
	[GrammarRule("scaleFloatingExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> scaleFloatingExpression()
	{
		EnterRule_scaleFloatingExpression();
		EnterRule("scaleFloatingExpression", 53);
		TraceIn("scaleFloatingExpression", 53);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int scaleFloatingExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken ScaleFloat330 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression329 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression331 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ScaleFloat330_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ScaleFloat=new RewriteRuleITokenStream(adaptor,"token ScaleFloat");
		RewriteRuleSubtreeStream stream_numericExpression=new RewriteRuleSubtreeStream(adaptor,"rule numericExpression");
		try { DebugEnterRule(GrammarFileName, "scaleFloatingExpression");
		DebugLocation(320, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:321:5: ( numericExpression | ScaleFloat numericExpression -> ^( ScaleFloat numericExpression ) )
			int alt77=2;
			try { DebugEnterDecision(77, false);
			int LA77_1 = input.LA(1);

			if ((LA77_1==FloatingPointLiteral||LA77_1==Identifier||LA77_1==MINUS||(LA77_1>=PLUS && LA77_1<=POPEN)||LA77_1==SEL))
			{
				alt77 = 1;
			}
			else if ((LA77_1==ScaleFloat))
			{
				alt77 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 77, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:321:7: numericExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(321, 7);
				PushFollow(Follow._numericExpression_in_scaleFloatingExpression3403);
				numericExpression329=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericExpression329.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:322:7: ScaleFloat numericExpression
				{
				DebugLocation(322, 7);
				ScaleFloat330=(CommonToken)Match(input,ScaleFloat,Follow._ScaleFloat_in_scaleFloatingExpression3411); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ScaleFloat.Add(ScaleFloat330);

				DebugLocation(322, 18);
				PushFollow(Follow._numericExpression_in_scaleFloatingExpression3413);
				numericExpression331=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_numericExpression.Add(numericExpression331.Tree);


				{
				// AST REWRITE
				// elements: ScaleFloat, numericExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 322:36: -> ^( ScaleFloat numericExpression )
				{
					DebugLocation(322, 39);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:322:39: ^( ScaleFloat numericExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(322, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_ScaleFloat.NextNode(), root_1);

					DebugLocation(322, 52);
					adaptor.AddChild(root_1, stream_numericExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("scaleFloatingExpression", 53);
			LeaveRule("scaleFloatingExpression", 53);
			LeaveRule_scaleFloatingExpression();
			if (state.backtracking > 0) { Memoize(input, 53, scaleFloatingExpression_StartIndex); }

		}
		DebugLocation(323, 4);
		} finally { DebugExitRule(GrammarFileName, "scaleFloatingExpression"); }
		return retval;

	}
	// $ANTLR end "scaleFloatingExpression"

	partial void EnterRule_scaleRelativeOrFloatingExpression();
	partial void LeaveRule_scaleRelativeOrFloatingExpression();
	// $ANTLR start "scaleRelativeOrFloatingExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:325:1: scaleRelativeOrFloatingExpression : ( scaleRelativeExpression | scaleFloatingExpression );
	[GrammarRule("scaleRelativeOrFloatingExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeOrFloatingExpression()
	{
		EnterRule_scaleRelativeOrFloatingExpression();
		EnterRule("scaleRelativeOrFloatingExpression", 54);
		TraceIn("scaleRelativeOrFloatingExpression", 54);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int scaleRelativeOrFloatingExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> scaleRelativeExpression332 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> scaleFloatingExpression333 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "scaleRelativeOrFloatingExpression");
		DebugLocation(325, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:326:2: ( scaleRelativeExpression | scaleFloatingExpression )
			int alt78=2;
			try { DebugEnterDecision(78, false);
			try
			{
				alt78 = dfa78.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:326:4: scaleRelativeExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(326, 4);
				PushFollow(Follow._scaleRelativeExpression_in_scaleRelativeOrFloatingExpression3435);
				scaleRelativeExpression332=scaleRelativeExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleRelativeExpression332.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:327:4: scaleFloatingExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(327, 4);
				PushFollow(Follow._scaleFloatingExpression_in_scaleRelativeOrFloatingExpression3440);
				scaleFloatingExpression333=scaleFloatingExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, scaleFloatingExpression333.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("scaleRelativeOrFloatingExpression", 54);
			LeaveRule("scaleRelativeOrFloatingExpression", 54);
			LeaveRule_scaleRelativeOrFloatingExpression();
			if (state.backtracking > 0) { Memoize(input, 54, scaleRelativeOrFloatingExpression_StartIndex); }

		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "scaleRelativeOrFloatingExpression"); }
		return retval;

	}
	// $ANTLR end "scaleRelativeOrFloatingExpression"

	partial void EnterRule_numericParExpression();
	partial void LeaveRule_numericParExpression();
	// $ANTLR start "numericParExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:330:1: numericParExpression : ( POPEN caseNumericExpression PCLOSE -> caseNumericExpression | POPEN numericExpression PCLOSE -> numericExpression );
	[GrammarRule("numericParExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> numericParExpression()
	{
		EnterRule_numericParExpression();
		EnterRule("numericParExpression", 55);
		TraceIn("numericParExpression", 55);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int numericParExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken POPEN334 = default(CommonToken);
		CommonToken PCLOSE336 = default(CommonToken);
		CommonToken POPEN337 = default(CommonToken);
		CommonToken PCLOSE339 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseNumericExpression335 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> numericExpression338 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree POPEN334_tree = default(CommonTree);
		CommonTree PCLOSE336_tree = default(CommonTree);
		CommonTree POPEN337_tree = default(CommonTree);
		CommonTree PCLOSE339_tree = default(CommonTree);
		RewriteRuleITokenStream stream_POPEN=new RewriteRuleITokenStream(adaptor,"token POPEN");
		RewriteRuleITokenStream stream_PCLOSE=new RewriteRuleITokenStream(adaptor,"token PCLOSE");
		RewriteRuleSubtreeStream stream_caseNumericExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseNumericExpression");
		RewriteRuleSubtreeStream stream_numericExpression=new RewriteRuleSubtreeStream(adaptor,"rule numericExpression");
		try { DebugEnterRule(GrammarFileName, "numericParExpression");
		DebugLocation(330, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:331:5: ( POPEN caseNumericExpression PCLOSE -> caseNumericExpression | POPEN numericExpression PCLOSE -> numericExpression )
			int alt79=2;
			try { DebugEnterDecision(79, false);
			int LA79_1 = input.LA(1);

			if ((LA79_1==POPEN))
			{
				int LA79_2 = input.LA(2);

				if ((LA79_2==CASE||LA79_2==ProbabilityLiteral))
				{
					alt79 = 1;
				}
				else if ((LA79_2==FloatingPointLiteral||LA79_2==Identifier||LA79_2==MINUS||(LA79_2>=PLUS && LA79_2<=POPEN)||LA79_2==SEL))
				{
					alt79 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 79, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 79, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:331:7: POPEN caseNumericExpression PCLOSE
				{
				DebugLocation(331, 7);
				POPEN334=(CommonToken)Match(input,POPEN,Follow._POPEN_in_numericParExpression3454); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_POPEN.Add(POPEN334);

				DebugLocation(331, 13);
				PushFollow(Follow._caseNumericExpression_in_numericParExpression3456);
				caseNumericExpression335=caseNumericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_caseNumericExpression.Add(caseNumericExpression335.Tree);
				DebugLocation(331, 35);
				PCLOSE336=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_numericParExpression3458); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PCLOSE.Add(PCLOSE336);



				{
				// AST REWRITE
				// elements: caseNumericExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 331:42: -> caseNumericExpression
				{
					DebugLocation(331, 45);
					adaptor.AddChild(root_0, stream_caseNumericExpression.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:332:4: POPEN numericExpression PCLOSE
				{
				DebugLocation(332, 4);
				POPEN337=(CommonToken)Match(input,POPEN,Follow._POPEN_in_numericParExpression3467); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_POPEN.Add(POPEN337);

				DebugLocation(332, 10);
				PushFollow(Follow._numericExpression_in_numericParExpression3469);
				numericExpression338=numericExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_numericExpression.Add(numericExpression338.Tree);
				DebugLocation(332, 28);
				PCLOSE339=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_numericParExpression3471); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PCLOSE.Add(PCLOSE339);



				{
				// AST REWRITE
				// elements: numericExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 332:35: -> numericExpression
				{
					DebugLocation(332, 38);
					adaptor.AddChild(root_0, stream_numericExpression.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("numericParExpression", 55);
			LeaveRule("numericParExpression", 55);
			LeaveRule_numericParExpression();
			if (state.backtracking > 0) { Memoize(input, 55, numericParExpression_StartIndex); }

		}
		DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "numericParExpression"); }
		return retval;

	}
	// $ANTLR end "numericParExpression"

	partial void EnterRule_stringParExpression();
	partial void LeaveRule_stringParExpression();
	// $ANTLR start "stringParExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:335:1: stringParExpression : ( POPEN caseStringExpression PCLOSE -> caseStringExpression | POPEN stringExpression PCLOSE -> stringExpression );
	[GrammarRule("stringParExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stringParExpression()
	{
		EnterRule_stringParExpression();
		EnterRule("stringParExpression", 56);
		TraceIn("stringParExpression", 56);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int stringParExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken POPEN340 = default(CommonToken);
		CommonToken PCLOSE342 = default(CommonToken);
		CommonToken POPEN343 = default(CommonToken);
		CommonToken PCLOSE345 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseStringExpression341 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stringExpression344 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree POPEN340_tree = default(CommonTree);
		CommonTree PCLOSE342_tree = default(CommonTree);
		CommonTree POPEN343_tree = default(CommonTree);
		CommonTree PCLOSE345_tree = default(CommonTree);
		RewriteRuleITokenStream stream_POPEN=new RewriteRuleITokenStream(adaptor,"token POPEN");
		RewriteRuleITokenStream stream_PCLOSE=new RewriteRuleITokenStream(adaptor,"token PCLOSE");
		RewriteRuleSubtreeStream stream_stringExpression=new RewriteRuleSubtreeStream(adaptor,"rule stringExpression");
		RewriteRuleSubtreeStream stream_caseStringExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseStringExpression");
		try { DebugEnterRule(GrammarFileName, "stringParExpression");
		DebugLocation(335, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:336:5: ( POPEN caseStringExpression PCLOSE -> caseStringExpression | POPEN stringExpression PCLOSE -> stringExpression )
			int alt80=2;
			try { DebugEnterDecision(80, false);
			int LA80_1 = input.LA(1);

			if ((LA80_1==POPEN))
			{
				int LA80_2 = input.LA(2);

				if ((LA80_2==CASE||LA80_2==ProbabilityLiteral))
				{
					alt80 = 1;
				}
				else if ((LA80_2==Identifier||LA80_2==POPEN||LA80_2==SEL||LA80_2==StringLiteral))
				{
					alt80 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 80, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 80, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:336:7: POPEN caseStringExpression PCLOSE
				{
				DebugLocation(336, 7);
				POPEN340=(CommonToken)Match(input,POPEN,Follow._POPEN_in_stringParExpression3489); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_POPEN.Add(POPEN340);

				DebugLocation(336, 13);
				PushFollow(Follow._caseStringExpression_in_stringParExpression3491);
				caseStringExpression341=caseStringExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_caseStringExpression.Add(caseStringExpression341.Tree);
				DebugLocation(336, 34);
				PCLOSE342=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_stringParExpression3493); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PCLOSE.Add(PCLOSE342);



				{
				// AST REWRITE
				// elements: caseStringExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 336:41: -> caseStringExpression
				{
					DebugLocation(336, 44);
					adaptor.AddChild(root_0, stream_caseStringExpression.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:337:4: POPEN stringExpression PCLOSE
				{
				DebugLocation(337, 4);
				POPEN343=(CommonToken)Match(input,POPEN,Follow._POPEN_in_stringParExpression3502); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_POPEN.Add(POPEN343);

				DebugLocation(337, 10);
				PushFollow(Follow._stringExpression_in_stringParExpression3504);
				stringExpression344=stringExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stringExpression.Add(stringExpression344.Tree);
				DebugLocation(337, 27);
				PCLOSE345=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_stringParExpression3506); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PCLOSE.Add(PCLOSE345);



				{
				// AST REWRITE
				// elements: stringExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 337:34: -> stringExpression
				{
					DebugLocation(337, 37);
					adaptor.AddChild(root_0, stream_stringExpression.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stringParExpression", 56);
			LeaveRule("stringParExpression", 56);
			LeaveRule_stringParExpression();
			if (state.backtracking > 0) { Memoize(input, 56, stringParExpression_StartIndex); }

		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "stringParExpression"); }
		return retval;

	}
	// $ANTLR end "stringParExpression"

	partial void EnterRule_unaryStringExpression();
	partial void LeaveRule_unaryStringExpression();
	// $ANTLR start "unaryStringExpression"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:342:1: unaryStringExpression : ( stringParExpression | StringLiteral | functionOrVar );
	[GrammarRule("unaryStringExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> unaryStringExpression()
	{
		EnterRule_unaryStringExpression();
		EnterRule("unaryStringExpression", 57);
		TraceIn("unaryStringExpression", 57);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int unaryStringExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken StringLiteral347 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> stringParExpression346 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> functionOrVar348 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree StringLiteral347_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "unaryStringExpression");
		DebugLocation(342, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:343:2: ( stringParExpression | StringLiteral | functionOrVar )
			int alt81=3;
			try { DebugEnterDecision(81, false);
			switch (input.LA(1))
			{
			case POPEN:
				{
				alt81 = 1;
				}
				break;
			case StringLiteral:
				{
				alt81 = 2;
				}
				break;
			case Identifier:
			case SEL:
				{
				alt81 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 81, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:343:4: stringParExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(343, 4);
				PushFollow(Follow._stringParExpression_in_unaryStringExpression3523);
				stringParExpression346=stringParExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stringParExpression346.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:344:4: StringLiteral
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(344, 4);
				StringLiteral347=(CommonToken)Match(input,StringLiteral,Follow._StringLiteral_in_unaryStringExpression3528); if (state.failed) return retval;
				if (state.backtracking == 0) {
				StringLiteral347_tree = (CommonTree)adaptor.Create(StringLiteral347);
				adaptor.AddChild(root_0, StringLiteral347_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:345:4: functionOrVar
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(345, 4);
				PushFollow(Follow._functionOrVar_in_unaryStringExpression3533);
				functionOrVar348=functionOrVar();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionOrVar348.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryStringExpression", 57);
			LeaveRule("unaryStringExpression", 57);
			LeaveRule_unaryStringExpression();
			if (state.backtracking > 0) { Memoize(input, 57, unaryStringExpression_StartIndex); }

		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryStringExpression"); }
		return retval;

	}
	// $ANTLR end "unaryStringExpression"

	partial void EnterRule_annotationArguments();
	partial void LeaveRule_annotationArguments();
	// $ANTLR start "annotationArguments"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:350:1: annotationArguments : '(' ! ( annotationArgList )? ')' !;
	[GrammarRule("annotationArguments")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> annotationArguments()
	{
		EnterRule_annotationArguments();
		EnterRule("annotationArguments", 58);
		TraceIn("annotationArguments", 58);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int annotationArguments_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal349 = default(CommonToken);
		CommonToken char_literal351 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> annotationArgList350 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal349_tree = default(CommonTree);
		CommonTree char_literal351_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationArguments");
		DebugLocation(350, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:351:5: ( '(' ! ( annotationArgList )? ')' !)
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:351:9: '(' ! ( annotationArgList )? ')' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(351, 12);
			char_literal349=(CommonToken)Match(input,POPEN,Follow._POPEN_in_annotationArguments3551); if (state.failed) return retval;
			DebugLocation(351, 14);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:351:14: ( annotationArgList )?
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_1 = input.LA(1);

			if (((LA82_1>=BooleanLiteral && LA82_1<=CASE)||LA82_1==FloatingPointLiteral||LA82_1==Identifier||LA82_1==MINUS||LA82_1==NOT||(LA82_1>=PLUS && LA82_1<=ProbabilityLiteral)||LA82_1==SEL||LA82_1==StringLiteral||LA82_1==81))
			{
				alt82 = 1;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:351:14: annotationArgList
				{
				DebugLocation(351, 14);
				PushFollow(Follow._annotationArgList_in_annotationArguments3554);
				annotationArgList350=annotationArgList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationArgList350.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(82); }

			DebugLocation(351, 36);
			char_literal351=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_annotationArguments3557); if (state.failed) return retval;

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationArguments", 58);
			LeaveRule("annotationArguments", 58);
			LeaveRule_annotationArguments();
			if (state.backtracking > 0) { Memoize(input, 58, annotationArguments_StartIndex); }

		}
		DebugLocation(352, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationArguments"); }
		return retval;

	}
	// $ANTLR end "annotationArguments"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:357:1: arguments : '(' ! ( expressionList )? ')' !;
	[GrammarRule("arguments")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 59);
		TraceIn("arguments", 59);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int arguments_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal352 = default(CommonToken);
		CommonToken char_literal354 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expressionList353 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal352_tree = default(CommonTree);
		CommonTree char_literal354_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(357, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:358:2: ( '(' ! ( expressionList )? ')' !)
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:358:4: '(' ! ( expressionList )? ')' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(358, 7);
			char_literal352=(CommonToken)Match(input,POPEN,Follow._POPEN_in_arguments3575); if (state.failed) return retval;
			DebugLocation(358, 9);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:358:9: ( expressionList )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			int LA83_1 = input.LA(1);

			if (((LA83_1>=BooleanLiteral && LA83_1<=CASE)||LA83_1==FloatingPointLiteral||LA83_1==Identifier||LA83_1==MINUS||LA83_1==NOT||(LA83_1>=PLUS && LA83_1<=ProbabilityLiteral)||LA83_1==SEL||LA83_1==StringLiteral))
			{
				alt83 = 1;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:358:9: expressionList
				{
				DebugLocation(358, 9);
				PushFollow(Follow._expressionList_in_arguments3578);
				expressionList353=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expressionList353.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(83); }

			DebugLocation(358, 28);
			char_literal354=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_arguments3581); if (state.failed) return retval;

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 59);
			LeaveRule("arguments", 59);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 59, arguments_StartIndex); }

		}
		DebugLocation(359, 1);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_annotationArgList();
	partial void LeaveRule_annotationArgList();
	// $ANTLR start "annotationArgList"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:362:1: annotationArgList : annotationArg ( ',' ! annotationArg )* ;
	[GrammarRule("annotationArgList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> annotationArgList()
	{
		EnterRule_annotationArgList();
		EnterRule("annotationArgList", 60);
		TraceIn("annotationArgList", 60);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int annotationArgList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal356 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> annotationArg355 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> annotationArg357 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal356_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationArgList");
		DebugLocation(362, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:363:5: ( annotationArg ( ',' ! annotationArg )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:363:9: annotationArg ( ',' ! annotationArg )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(363, 9);
			PushFollow(Follow._annotationArg_in_annotationArgList3599);
			annotationArg355=annotationArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationArg355.Tree);
			DebugLocation(363, 23);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:363:23: ( ',' ! annotationArg )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				int LA84_1 = input.LA(1);

				if ((LA84_1==79))
				{
					alt84 = 1;
				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:363:24: ',' ! annotationArg
					{
					DebugLocation(363, 27);
					char_literal356=(CommonToken)Match(input,79,Follow._79_in_annotationArgList3602); if (state.failed) return retval;
					DebugLocation(363, 29);
					PushFollow(Follow._annotationArg_in_annotationArgList3605);
					annotationArg357=annotationArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotationArg357.Tree);

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationArgList", 60);
			LeaveRule("annotationArgList", 60);
			LeaveRule_annotationArgList();
			if (state.backtracking > 0) { Memoize(input, 60, annotationArgList_StartIndex); }

		}
		DebugLocation(364, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationArgList"); }
		return retval;

	}
	// $ANTLR end "annotationArgList"

	partial void EnterRule_annotationArg();
	partial void LeaveRule_annotationArg();
	// $ANTLR start "annotationArg"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:366:1: annotationArg : ( Identifier EQUALS ^)? ( expression ( '-' )? ( '*' )? ( '^' FloatingPointLiteral )? | '{' ( ( '-' )? FloatingPointLiteral ',' )* ( '-' )? FloatingPointLiteral '}' ) ;
	[GrammarRule("annotationArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> annotationArg()
	{
		EnterRule_annotationArg();
		EnterRule("annotationArg", 61);
		TraceIn("annotationArg", 61);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int annotationArg_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken Identifier358 = default(CommonToken);
		CommonToken EQUALS359 = default(CommonToken);
		CommonToken char_literal361 = default(CommonToken);
		CommonToken char_literal362 = default(CommonToken);
		CommonToken char_literal363 = default(CommonToken);
		CommonToken FloatingPointLiteral364 = default(CommonToken);
		CommonToken char_literal365 = default(CommonToken);
		CommonToken char_literal366 = default(CommonToken);
		CommonToken FloatingPointLiteral367 = default(CommonToken);
		CommonToken char_literal368 = default(CommonToken);
		CommonToken char_literal369 = default(CommonToken);
		CommonToken FloatingPointLiteral370 = default(CommonToken);
		CommonToken char_literal371 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression360 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Identifier358_tree = default(CommonTree);
		CommonTree EQUALS359_tree = default(CommonTree);
		CommonTree char_literal361_tree = default(CommonTree);
		CommonTree char_literal362_tree = default(CommonTree);
		CommonTree char_literal363_tree = default(CommonTree);
		CommonTree FloatingPointLiteral364_tree = default(CommonTree);
		CommonTree char_literal365_tree = default(CommonTree);
		CommonTree char_literal366_tree = default(CommonTree);
		CommonTree FloatingPointLiteral367_tree = default(CommonTree);
		CommonTree char_literal368_tree = default(CommonTree);
		CommonTree char_literal369_tree = default(CommonTree);
		CommonTree FloatingPointLiteral370_tree = default(CommonTree);
		CommonTree char_literal371_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationArg");
		DebugLocation(366, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:5: ( ( Identifier EQUALS ^)? ( expression ( '-' )? ( '*' )? ( '^' FloatingPointLiteral )? | '{' ( ( '-' )? FloatingPointLiteral ',' )* ( '-' )? FloatingPointLiteral '}' ) )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:8: ( Identifier EQUALS ^)? ( expression ( '-' )? ( '*' )? ( '^' FloatingPointLiteral )? | '{' ( ( '-' )? FloatingPointLiteral ',' )* ( '-' )? FloatingPointLiteral '}' )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(367, 8);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:8: ( Identifier EQUALS ^)?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_1 = input.LA(1);

			if ((LA85_1==Identifier))
			{
				int LA85_2 = input.LA(2);

				if ((LA85_2==EQUALS))
				{
					alt85 = 1;
				}
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:10: Identifier EQUALS ^
				{
				DebugLocation(367, 10);
				Identifier358=(CommonToken)Match(input,Identifier,Follow._Identifier_in_annotationArg3627); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Identifier358_tree = (CommonTree)adaptor.Create(Identifier358);
				adaptor.AddChild(root_0, Identifier358_tree);
				}
				DebugLocation(367, 27);
				EQUALS359=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_annotationArg3629); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EQUALS359_tree = (CommonTree)adaptor.Create(EQUALS359);
				root_0 = (CommonTree)adaptor.BecomeRoot(EQUALS359_tree, root_0);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(85); }

			DebugLocation(367, 33);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:33: ( expression ( '-' )? ( '*' )? ( '^' FloatingPointLiteral )? | '{' ( ( '-' )? FloatingPointLiteral ',' )* ( '-' )? FloatingPointLiteral '}' )
			int alt92=2;
			try { DebugEnterSubRule(92);
			try { DebugEnterDecision(92, false);
			int LA92_1 = input.LA(1);

			if (((LA92_1>=BooleanLiteral && LA92_1<=CASE)||LA92_1==FloatingPointLiteral||LA92_1==Identifier||LA92_1==MINUS||LA92_1==NOT||(LA92_1>=PLUS && LA92_1<=ProbabilityLiteral)||LA92_1==SEL||LA92_1==StringLiteral))
			{
				alt92 = 1;
			}
			else if ((LA92_1==81))
			{
				alt92 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 92, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:35: expression ( '-' )? ( '*' )? ( '^' FloatingPointLiteral )?
				{
				DebugLocation(367, 35);
				PushFollow(Follow._expression_in_annotationArg3638);
				expression360=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression360.Tree);
				DebugLocation(367, 46);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:46: ( '-' )?
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, false);
				int LA86_1 = input.LA(1);

				if ((LA86_1==MINUS))
				{
					alt86 = 1;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:46: '-'
					{
					DebugLocation(367, 46);
					char_literal361=(CommonToken)Match(input,MINUS,Follow._MINUS_in_annotationArg3640); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal361_tree = (CommonTree)adaptor.Create(char_literal361);
					adaptor.AddChild(root_0, char_literal361_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(86); }

				DebugLocation(367, 51);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:51: ( '*' )?
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, false);
				int LA87_1 = input.LA(1);

				if ((LA87_1==MULT))
				{
					alt87 = 1;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:51: '*'
					{
					DebugLocation(367, 51);
					char_literal362=(CommonToken)Match(input,MULT,Follow._MULT_in_annotationArg3643); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal362_tree = (CommonTree)adaptor.Create(char_literal362);
					adaptor.AddChild(root_0, char_literal362_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(87); }

				DebugLocation(367, 57);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:57: ( '^' FloatingPointLiteral )?
				int alt88=2;
				try { DebugEnterSubRule(88);
				try { DebugEnterDecision(88, false);
				int LA88_1 = input.LA(1);

				if ((LA88_1==80))
				{
					alt88 = 1;
				}
				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:59: '^' FloatingPointLiteral
					{
					DebugLocation(367, 59);
					char_literal363=(CommonToken)Match(input,80,Follow._80_in_annotationArg3649); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal363_tree = (CommonTree)adaptor.Create(char_literal363);
					adaptor.AddChild(root_0, char_literal363_tree);
					}
					DebugLocation(367, 63);
					FloatingPointLiteral364=(CommonToken)Match(input,FloatingPointLiteral,Follow._FloatingPointLiteral_in_annotationArg3651); if (state.failed) return retval;
					if (state.backtracking == 0) {
					FloatingPointLiteral364_tree = (CommonTree)adaptor.Create(FloatingPointLiteral364);
					adaptor.AddChild(root_0, FloatingPointLiteral364_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(88); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:92: '{' ( ( '-' )? FloatingPointLiteral ',' )* ( '-' )? FloatingPointLiteral '}'
				{
				DebugLocation(367, 92);
				char_literal365=(CommonToken)Match(input,81,Follow._81_in_annotationArg3661); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal365_tree = (CommonTree)adaptor.Create(char_literal365);
				adaptor.AddChild(root_0, char_literal365_tree);
				}
				DebugLocation(367, 96);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:96: ( ( '-' )? FloatingPointLiteral ',' )*
				try { DebugEnterSubRule(90);
				while (true)
				{
					int alt90=2;
					try { DebugEnterDecision(90, false);
					int LA90_1 = input.LA(1);

					if ((LA90_1==MINUS))
					{
						int LA90_2 = input.LA(2);

						if ((LA90_2==FloatingPointLiteral))
						{
							int LA90_3 = input.LA(3);

							if ((LA90_3==79))
							{
								alt90 = 1;
							}


						}


					}
					else if ((LA90_1==FloatingPointLiteral))
					{
						int LA90_2 = input.LA(2);

						if ((LA90_2==79))
						{
							alt90 = 1;
						}


					}


					} finally { DebugExitDecision(90); }
					switch ( alt90 )
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:98: ( '-' )? FloatingPointLiteral ','
						{
						DebugLocation(367, 98);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:98: ( '-' )?
						int alt89=2;
						try { DebugEnterSubRule(89);
						try { DebugEnterDecision(89, false);
						int LA89_1 = input.LA(1);

						if ((LA89_1==MINUS))
						{
							alt89 = 1;
						}
						} finally { DebugExitDecision(89); }
						switch (alt89)
						{
						case 1:
							DebugEnterAlt(1);
							// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:98: '-'
							{
							DebugLocation(367, 98);
							char_literal366=(CommonToken)Match(input,MINUS,Follow._MINUS_in_annotationArg3665); if (state.failed) return retval;
							if (state.backtracking == 0) {
							char_literal366_tree = (CommonTree)adaptor.Create(char_literal366);
							adaptor.AddChild(root_0, char_literal366_tree);
							}

							}
							break;

						}
						} finally { DebugExitSubRule(89); }

						DebugLocation(367, 103);
						FloatingPointLiteral367=(CommonToken)Match(input,FloatingPointLiteral,Follow._FloatingPointLiteral_in_annotationArg3668); if (state.failed) return retval;
						if (state.backtracking == 0) {
						FloatingPointLiteral367_tree = (CommonTree)adaptor.Create(FloatingPointLiteral367);
						adaptor.AddChild(root_0, FloatingPointLiteral367_tree);
						}
						DebugLocation(367, 124);
						char_literal368=(CommonToken)Match(input,79,Follow._79_in_annotationArg3670); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal368_tree = (CommonTree)adaptor.Create(char_literal368);
						adaptor.AddChild(root_0, char_literal368_tree);
						}

						}
						break;

					default:
						goto loop90;
					}
				}

				loop90:
					;

				} finally { DebugExitSubRule(90); }

				DebugLocation(367, 130);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:130: ( '-' )?
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, false);
				int LA91_1 = input.LA(1);

				if ((LA91_1==MINUS))
				{
					alt91 = 1;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:367:130: '-'
					{
					DebugLocation(367, 130);
					char_literal369=(CommonToken)Match(input,MINUS,Follow._MINUS_in_annotationArg3674); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal369_tree = (CommonTree)adaptor.Create(char_literal369);
					adaptor.AddChild(root_0, char_literal369_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(91); }

				DebugLocation(367, 135);
				FloatingPointLiteral370=(CommonToken)Match(input,FloatingPointLiteral,Follow._FloatingPointLiteral_in_annotationArg3677); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FloatingPointLiteral370_tree = (CommonTree)adaptor.Create(FloatingPointLiteral370);
				adaptor.AddChild(root_0, FloatingPointLiteral370_tree);
				}
				DebugLocation(367, 156);
				char_literal371=(CommonToken)Match(input,82,Follow._82_in_annotationArg3679); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal371_tree = (CommonTree)adaptor.Create(char_literal371);
				adaptor.AddChild(root_0, char_literal371_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(92); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationArg", 61);
			LeaveRule("annotationArg", 61);
			LeaveRule_annotationArg();
			if (state.backtracking > 0) { Memoize(input, 61, annotationArg_StartIndex); }

		}
		DebugLocation(368, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationArg"); }
		return retval;

	}
	// $ANTLR end "annotationArg"

	partial void EnterRule_functionOrVar();
	partial void LeaveRule_functionOrVar();
	// $ANTLR start "functionOrVar"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:370:1: functionOrVar : ( SEL ^ '(' ! stringExpression ')' !| Identifier ^ ( arguments )? );
	[GrammarRule("functionOrVar")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> functionOrVar()
	{
		EnterRule_functionOrVar();
		EnterRule("functionOrVar", 62);
		TraceIn("functionOrVar", 62);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int functionOrVar_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken SEL372 = default(CommonToken);
		CommonToken char_literal373 = default(CommonToken);
		CommonToken char_literal375 = default(CommonToken);
		CommonToken Identifier376 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> stringExpression374 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> arguments377 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SEL372_tree = default(CommonTree);
		CommonTree char_literal373_tree = default(CommonTree);
		CommonTree char_literal375_tree = default(CommonTree);
		CommonTree Identifier376_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "functionOrVar");
		DebugLocation(370, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:371:5: ( SEL ^ '(' ! stringExpression ')' !| Identifier ^ ( arguments )? )
			int alt94=2;
			try { DebugEnterDecision(94, false);
			int LA94_1 = input.LA(1);

			if ((LA94_1==SEL))
			{
				alt94 = 1;
			}
			else if ((LA94_1==Identifier))
			{
				alt94 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 94, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(94); }
			switch (alt94)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:371:9: SEL ^ '(' ! stringExpression ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(371, 12);
				SEL372=(CommonToken)Match(input,SEL,Follow._SEL_in_functionOrVar3700); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SEL372_tree = (CommonTree)adaptor.Create(SEL372);
				root_0 = (CommonTree)adaptor.BecomeRoot(SEL372_tree, root_0);
				}
				DebugLocation(371, 17);
				char_literal373=(CommonToken)Match(input,POPEN,Follow._POPEN_in_functionOrVar3703); if (state.failed) return retval;
				DebugLocation(371, 19);
				PushFollow(Follow._stringExpression_in_functionOrVar3706);
				stringExpression374=stringExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stringExpression374.Tree);
				DebugLocation(371, 39);
				char_literal375=(CommonToken)Match(input,PCLOSE,Follow._PCLOSE_in_functionOrVar3708); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:372:9: Identifier ^ ( arguments )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(372, 19);
				Identifier376=(CommonToken)Match(input,Identifier,Follow._Identifier_in_functionOrVar3719); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Identifier376_tree = (CommonTree)adaptor.Create(Identifier376);
				root_0 = (CommonTree)adaptor.BecomeRoot(Identifier376_tree, root_0);
				}
				DebugLocation(372, 21);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:372:21: ( arguments )?
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, false);
				int LA93_1 = input.LA(1);

				if ((LA93_1==POPEN))
				{
					alt93 = 1;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:372:21: arguments
					{
					DebugLocation(372, 21);
					PushFollow(Follow._arguments_in_functionOrVar3722);
					arguments377=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arguments377.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(93); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionOrVar", 62);
			LeaveRule("functionOrVar", 62);
			LeaveRule_functionOrVar();
			if (state.backtracking > 0) { Memoize(input, 62, functionOrVar_StartIndex); }

		}
		DebugLocation(373, 1);
		} finally { DebugExitRule(GrammarFileName, "functionOrVar"); }
		return retval;

	}
	// $ANTLR end "functionOrVar"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();
	// $ANTLR start "expressionList"
	// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:375:1: expressionList : expression ( ',' ! expression )* ;
	[GrammarRule("expressionList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 63);
		TraceIn("expressionList", 63);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int expressionList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal379 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression378 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression380 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal379_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(375, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:376:5: ( expression ( ',' ! expression )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:376:9: expression ( ',' ! expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(376, 9);
			PushFollow(Follow._expression_in_expressionList3739);
			expression378=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression378.Tree);
			DebugLocation(376, 20);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:376:20: ( ',' ! expression )*
			try { DebugEnterSubRule(95);
			while (true)
			{
				int alt95=2;
				try { DebugEnterDecision(95, false);
				int LA95_1 = input.LA(1);

				if ((LA95_1==79))
				{
					alt95 = 1;
				}


				} finally { DebugExitDecision(95); }
				switch ( alt95 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:376:21: ',' ! expression
					{
					DebugLocation(376, 24);
					char_literal379=(CommonToken)Match(input,79,Follow._79_in_expressionList3742); if (state.failed) return retval;
					DebugLocation(376, 26);
					PushFollow(Follow._expression_in_expressionList3745);
					expression380=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression380.Tree);

					}
					break;

				default:
					goto loop95;
				}
			}

			loop95:
				;

			} finally { DebugExitSubRule(95); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionList", 63);
			LeaveRule("expressionList", 63);
			LeaveRule_expressionList();
			if (state.backtracking > 0) { Memoize(input, 63, expressionList_StartIndex); }

		}
		DebugLocation(377, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return retval;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_synpred5_CGA_fragment();
	partial void LeaveRule_synpred5_CGA_fragment();

	// $ANTLR start synpred5_CGA
	private void synpred5_CGA_fragment()
	{
		EnterRule_synpred5_CGA_fragment();
		EnterRule("synpred5_CGA_fragment", 68);
		TraceIn("synpred5_CGA_fragment", 68);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:27:64: ( functionDefintion )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:27:64: functionDefintion
			{
			DebugLocation(27, 64);
			PushFollow(Follow._functionDefintion_in_synpred5_CGA147);
			functionDefintion();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_CGA_fragment", 68);
			LeaveRule("synpred5_CGA_fragment", 68);
			LeaveRule_synpred5_CGA_fragment();
		}
	}
	// $ANTLR end synpred5_CGA

	partial void EnterRule_synpred17_CGA_fragment();
	partial void LeaveRule_synpred17_CGA_fragment();

	// $ANTLR start synpred17_CGA
	private void synpred17_CGA_fragment()
	{
		EnterRule_synpred17_CGA_fragment();
		EnterRule("synpred17_CGA_fragment", 80);
		TraceIn("synpred17_CGA_fragment", 80);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:17: ( ( annotation )? Identifier ( '(' ( Identifier ( ',' Identifier )* )? ')' )? ':' StringLiteral ( POPEN ( attrOverwrite ( ',' attrOverwrite )* )? PCLOSE )? )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:17: ( annotation )? Identifier ( '(' ( Identifier ( ',' Identifier )* )? ')' )? ':' StringLiteral ( POPEN ( attrOverwrite ( ',' attrOverwrite )* )? PCLOSE )?
			{
			DebugLocation(46, 17);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:17: ( annotation )?
			int alt106=2;
			try { DebugEnterSubRule(106);
			try { DebugEnterDecision(106, false);
			int LA106_1 = input.LA(1);

			if ((LA106_1==Annotation))
			{
				alt106 = 1;
			}
			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:17: annotation
				{
				DebugLocation(46, 17);
				PushFollow(Follow._annotation_in_synpred17_CGA256);
				annotation();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(106); }

			DebugLocation(46, 29);
			Match(input,Identifier,Follow._Identifier_in_synpred17_CGA259); if (state.failed) return;
			DebugLocation(46, 40);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:40: ( '(' ( Identifier ( ',' Identifier )* )? ')' )?
			int alt109=2;
			try { DebugEnterSubRule(109);
			try { DebugEnterDecision(109, false);
			int LA109_1 = input.LA(1);

			if ((LA109_1==POPEN))
			{
				alt109 = 1;
			}
			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:42: '(' ( Identifier ( ',' Identifier )* )? ')'
				{
				DebugLocation(46, 42);
				Match(input,POPEN,Follow._POPEN_in_synpred17_CGA263); if (state.failed) return;
				DebugLocation(46, 47);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:47: ( Identifier ( ',' Identifier )* )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, false);
				int LA108_1 = input.LA(1);

				if ((LA108_1==Identifier))
				{
					alt108 = 1;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:49: Identifier ( ',' Identifier )*
					{
					DebugLocation(46, 49);
					Match(input,Identifier,Follow._Identifier_in_synpred17_CGA268); if (state.failed) return;
					DebugLocation(46, 60);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:60: ( ',' Identifier )*
					try { DebugEnterSubRule(107);
					while (true)
					{
						int alt107=2;
						try { DebugEnterDecision(107, false);
						int LA107_1 = input.LA(1);

						if ((LA107_1==79))
						{
							alt107 = 1;
						}


						} finally { DebugExitDecision(107); }
						switch ( alt107 )
						{
						case 1:
							DebugEnterAlt(1);
							// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:61: ',' Identifier
							{
							DebugLocation(46, 61);
							Match(input,79,Follow._79_in_synpred17_CGA271); if (state.failed) return;
							DebugLocation(46, 66);
							Match(input,Identifier,Follow._Identifier_in_synpred17_CGA274); if (state.failed) return;

							}
							break;

						default:
							goto loop107;
						}
					}

					loop107:
						;

					} finally { DebugExitSubRule(107); }


					}
					break;

				}
				} finally { DebugExitSubRule(108); }

				DebugLocation(46, 82);
				Match(input,PCLOSE,Follow._PCLOSE_in_synpred17_CGA281); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(109); }

			DebugLocation(46, 91);
			Match(input,COLON,Follow._COLON_in_synpred17_CGA288); if (state.failed) return;
			DebugLocation(46, 96);
			Match(input,StringLiteral,Follow._StringLiteral_in_synpred17_CGA291); if (state.failed) return;
			DebugLocation(46, 110);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:110: ( POPEN ( attrOverwrite ( ',' attrOverwrite )* )? PCLOSE )?
			int alt112=2;
			try { DebugEnterSubRule(112);
			try { DebugEnterDecision(112, false);
			int LA112_1 = input.LA(1);

			if ((LA112_1==POPEN))
			{
				alt112 = 1;
			}
			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:112: POPEN ( attrOverwrite ( ',' attrOverwrite )* )? PCLOSE
				{
				DebugLocation(46, 112);
				Match(input,POPEN,Follow._POPEN_in_synpred17_CGA295); if (state.failed) return;
				DebugLocation(46, 118);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:118: ( attrOverwrite ( ',' attrOverwrite )* )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, false);
				int LA111_1 = input.LA(1);

				if ((LA111_1==Identifier))
				{
					alt111 = 1;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:120: attrOverwrite ( ',' attrOverwrite )*
					{
					DebugLocation(46, 120);
					PushFollow(Follow._attrOverwrite_in_synpred17_CGA299);
					attrOverwrite();
					PopFollow();
					if (state.failed) return;
					DebugLocation(46, 134);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:134: ( ',' attrOverwrite )*
					try { DebugEnterSubRule(110);
					while (true)
					{
						int alt110=2;
						try { DebugEnterDecision(110, false);
						int LA110_1 = input.LA(1);

						if ((LA110_1==79))
						{
							alt110 = 1;
						}


						} finally { DebugExitDecision(110); }
						switch ( alt110 )
						{
						case 1:
							DebugEnterAlt(1);
							// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:46:135: ',' attrOverwrite
							{
							DebugLocation(46, 135);
							Match(input,79,Follow._79_in_synpred17_CGA302); if (state.failed) return;
							DebugLocation(46, 140);
							PushFollow(Follow._attrOverwrite_in_synpred17_CGA305);
							attrOverwrite();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop110;
						}
					}

					loop110:
						;

					} finally { DebugExitSubRule(110); }


					}
					break;

				}
				} finally { DebugExitSubRule(111); }

				DebugLocation(46, 159);
				Match(input,PCLOSE,Follow._PCLOSE_in_synpred17_CGA312); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(112); }


			}

		}
		finally
		{
			TraceOut("synpred17_CGA_fragment", 80);
			LeaveRule("synpred17_CGA_fragment", 80);
			LeaveRule_synpred17_CGA_fragment();
		}
	}
	// $ANTLR end synpred17_CGA

	partial void EnterRule_synpred45_CGA_fragment();
	partial void LeaveRule_synpred45_CGA_fragment();

	// $ANTLR start synpred45_CGA
	private void synpred45_CGA_fragment()
	{
		EnterRule_synpred45_CGA_fragment();
		EnterRule("synpred45_CGA_fragment", 108);
		TraceIn("synpred45_CGA_fragment", 108);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:120:9: ( SP_OP '(' numericExpression ',' selOrId ',' scaleRelativeOrFloatingExpression ',' scaleRelativeOrFloatingExpression ( ',' numericExpression )? ')' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:120:9: SP_OP '(' numericExpression ',' selOrId ',' scaleRelativeOrFloatingExpression ',' scaleRelativeOrFloatingExpression ( ',' numericExpression )? ')'
			{
			DebugLocation(120, 9);
			Match(input,SP_OP,Follow._SP_OP_in_synpred45_CGA1405); if (state.failed) return;
			DebugLocation(120, 21);
			Match(input,POPEN,Follow._POPEN_in_synpred45_CGA1413); if (state.failed) return;
			DebugLocation(120, 26);
			PushFollow(Follow._numericExpression_in_synpred45_CGA1416);
			numericExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(120, 50);
			Match(input,79,Follow._79_in_synpred45_CGA1424); if (state.failed) return;
			DebugLocation(120, 55);
			PushFollow(Follow._selOrId_in_synpred45_CGA1427);
			selOrId();
			PopFollow();
			if (state.failed) return;
			DebugLocation(120, 76);
			Match(input,79,Follow._79_in_synpred45_CGA1442); if (state.failed) return;
			DebugLocation(120, 81);
			PushFollow(Follow._scaleRelativeOrFloatingExpression_in_synpred45_CGA1445);
			scaleRelativeOrFloatingExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(120, 115);
			Match(input,79,Follow._79_in_synpred45_CGA1447); if (state.failed) return;
			DebugLocation(120, 120);
			PushFollow(Follow._scaleRelativeOrFloatingExpression_in_synpred45_CGA1450);
			scaleRelativeOrFloatingExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(120, 154);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:120:154: ( ',' numericExpression )?
			int alt120=2;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, false);
			int LA120_1 = input.LA(1);

			if ((LA120_1==79))
			{
				alt120 = 1;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:120:155: ',' numericExpression
				{
				DebugLocation(120, 155);
				Match(input,79,Follow._79_in_synpred45_CGA1453); if (state.failed) return;
				DebugLocation(120, 160);
				PushFollow(Follow._numericExpression_in_synpred45_CGA1456);
				numericExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(120); }

			DebugLocation(120, 180);
			Match(input,PCLOSE,Follow._PCLOSE_in_synpred45_CGA1460); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred45_CGA_fragment", 108);
			LeaveRule("synpred45_CGA_fragment", 108);
			LeaveRule_synpred45_CGA_fragment();
		}
	}
	// $ANTLR end synpred45_CGA

	partial void EnterRule_synpred47_CGA_fragment();
	partial void LeaveRule_synpred47_CGA_fragment();

	// $ANTLR start synpred47_CGA
	private void synpred47_CGA_fragment()
	{
		EnterRule_synpred47_CGA_fragment();
		EnterRule("synpred47_CGA_fragment", 110);
		TraceIn("synpred47_CGA_fragment", 110);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:121:9: ( SP_OP '(' numericExpression ',' selOrId ',' scaleRelativeOrFloatingExpression ',' scaleRelativeOrFloatingExpression ',' scaleRelativeOrFloatingExpression ',' scaleRelativeOrFloatingExpression ( ',' numericExpression )? ')' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:121:9: SP_OP '(' numericExpression ',' selOrId ',' scaleRelativeOrFloatingExpression ',' scaleRelativeOrFloatingExpression ',' scaleRelativeOrFloatingExpression ',' scaleRelativeOrFloatingExpression ( ',' numericExpression )? ')'
			{
			DebugLocation(121, 9);
			Match(input,SP_OP,Follow._SP_OP_in_synpred47_CGA1471); if (state.failed) return;
			DebugLocation(121, 21);
			Match(input,POPEN,Follow._POPEN_in_synpred47_CGA1479); if (state.failed) return;
			DebugLocation(121, 26);
			PushFollow(Follow._numericExpression_in_synpred47_CGA1482);
			numericExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(121, 50);
			Match(input,79,Follow._79_in_synpred47_CGA1490); if (state.failed) return;
			DebugLocation(121, 55);
			PushFollow(Follow._selOrId_in_synpred47_CGA1493);
			selOrId();
			PopFollow();
			if (state.failed) return;
			DebugLocation(121, 76);
			Match(input,79,Follow._79_in_synpred47_CGA1508); if (state.failed) return;
			DebugLocation(121, 81);
			PushFollow(Follow._scaleRelativeOrFloatingExpression_in_synpred47_CGA1511);
			scaleRelativeOrFloatingExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(121, 115);
			Match(input,79,Follow._79_in_synpred47_CGA1513); if (state.failed) return;
			DebugLocation(121, 120);
			PushFollow(Follow._scaleRelativeOrFloatingExpression_in_synpred47_CGA1516);
			scaleRelativeOrFloatingExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(121, 154);
			Match(input,79,Follow._79_in_synpred47_CGA1518); if (state.failed) return;
			DebugLocation(121, 159);
			PushFollow(Follow._scaleRelativeOrFloatingExpression_in_synpred47_CGA1521);
			scaleRelativeOrFloatingExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(121, 193);
			Match(input,79,Follow._79_in_synpred47_CGA1523); if (state.failed) return;
			DebugLocation(121, 198);
			PushFollow(Follow._scaleRelativeOrFloatingExpression_in_synpred47_CGA1526);
			scaleRelativeOrFloatingExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(121, 232);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:121:232: ( ',' numericExpression )?
			int alt121=2;
			try { DebugEnterSubRule(121);
			try { DebugEnterDecision(121, false);
			int LA121_1 = input.LA(1);

			if ((LA121_1==79))
			{
				alt121 = 1;
			}
			} finally { DebugExitDecision(121); }
			switch (alt121)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:121:233: ',' numericExpression
				{
				DebugLocation(121, 233);
				Match(input,79,Follow._79_in_synpred47_CGA1529); if (state.failed) return;
				DebugLocation(121, 238);
				PushFollow(Follow._numericExpression_in_synpred47_CGA1532);
				numericExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(121); }

			DebugLocation(121, 258);
			Match(input,PCLOSE,Follow._PCLOSE_in_synpred47_CGA1536); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred47_CGA_fragment", 110);
			LeaveRule("synpred47_CGA_fragment", 110);
			LeaveRule_synpred47_CGA_fragment();
		}
	}
	// $ANTLR end synpred47_CGA

	partial void EnterRule_synpred54_CGA_fragment();
	partial void LeaveRule_synpred54_CGA_fragment();

	// $ANTLR start synpred54_CGA
	private void synpred54_CGA_fragment()
	{
		EnterRule_synpred54_CGA_fragment();
		EnterRule("synpred54_CGA_fragment", 117);
		TraceIn("synpred54_CGA_fragment", 117);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:138:17: ( BAR splitList )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:138:17: BAR splitList
			{
			DebugLocation(138, 17);
			Match(input,BAR,Follow._BAR_in_synpred54_CGA1691); if (state.failed) return;
			DebugLocation(138, 22);
			PushFollow(Follow._splitList_in_synpred54_CGA1694);
			splitList();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred54_CGA_fragment", 117);
			LeaveRule("synpred54_CGA_fragment", 117);
			LeaveRule_synpred54_CGA_fragment();
		}
	}
	// $ANTLR end synpred54_CGA

	partial void EnterRule_synpred57_CGA_fragment();
	partial void LeaveRule_synpred57_CGA_fragment();

	// $ANTLR start synpred57_CGA
	private void synpred57_CGA_fragment()
	{
		EnterRule_synpred57_CGA_fragment();
		EnterRule("synpred57_CGA_fragment", 120);
		TraceIn("synpred57_CGA_fragment", 120);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:152:28: ( BAR compListOrSetback )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:152:28: BAR compListOrSetback
			{
			DebugLocation(152, 28);
			Match(input,BAR,Follow._BAR_in_synpred57_CGA1829); if (state.failed) return;
			DebugLocation(152, 33);
			PushFollow(Follow._compListOrSetback_in_synpred57_CGA1832);
			compListOrSetback();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred57_CGA_fragment", 120);
			LeaveRule("synpred57_CGA_fragment", 120);
			LeaveRule_synpred57_CGA_fragment();
		}
	}
	// $ANTLR end synpred57_CGA

	partial void EnterRule_synpred58_CGA_fragment();
	partial void LeaveRule_synpred58_CGA_fragment();

	// $ANTLR start synpred58_CGA
	private void synpred58_CGA_fragment()
	{
		EnterRule_synpred58_CGA_fragment();
		EnterRule("synpred58_CGA_fragment", 121);
		TraceIn("synpred58_CGA_fragment", 121);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:156:7: ( numericExpression COLON shapeOpSeq )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:156:7: numericExpression COLON shapeOpSeq
			{
			DebugLocation(156, 7);
			PushFollow(Follow._numericExpression_in_synpred58_CGA1852);
			numericExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(156, 25);
			Match(input,COLON,Follow._COLON_in_synpred58_CGA1854); if (state.failed) return;
			DebugLocation(156, 32);
			PushFollow(Follow._shapeOpSeq_in_synpred58_CGA1857);
			shapeOpSeq();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred58_CGA_fragment", 121);
			LeaveRule("synpred58_CGA_fragment", 121);
			LeaveRule_synpred58_CGA_fragment();
		}
	}
	// $ANTLR end synpred58_CGA

	partial void EnterRule_synpred79_CGA_fragment();
	partial void LeaveRule_synpred79_CGA_fragment();

	// $ANTLR start synpred79_CGA
	private void synpred79_CGA_fragment()
	{
		EnterRule_synpred79_CGA_fragment();
		EnterRule("synpred79_CGA_fragment", 142);
		TraceIn("synpred79_CGA_fragment", 142);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:240:7: ( numericOrStringExpression ( relationalOp numericOrStringExpression )? )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:240:7: numericOrStringExpression ( relationalOp numericOrStringExpression )?
			{
			DebugLocation(240, 7);
			PushFollow(Follow._numericOrStringExpression_in_synpred79_CGA2914);
			numericOrStringExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(240, 33);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:240:33: ( relationalOp numericOrStringExpression )?
			int alt127=2;
			try { DebugEnterSubRule(127);
			try { DebugEnterDecision(127, false);
			int LA127_1 = input.LA(1);

			if (((LA127_1>=GEQUAL && LA127_1<=GT)||(LA127_1>=LEQUAL && LA127_1<=LT)))
			{
				alt127 = 1;
			}
			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:240:35: relationalOp numericOrStringExpression
				{
				DebugLocation(240, 35);
				PushFollow(Follow._relationalOp_in_synpred79_CGA2918);
				relationalOp();
				PopFollow();
				if (state.failed) return;
				DebugLocation(240, 49);
				PushFollow(Follow._numericOrStringExpression_in_synpred79_CGA2921);
				numericOrStringExpression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(127); }


			}

		}
		finally
		{
			TraceOut("synpred79_CGA_fragment", 142);
			LeaveRule("synpred79_CGA_fragment", 142);
			LeaveRule_synpred79_CGA_fragment();
		}
	}
	// $ANTLR end synpred79_CGA

	partial void EnterRule_synpred98_CGA_fragment();
	partial void LeaveRule_synpred98_CGA_fragment();

	// $ANTLR start synpred98_CGA
	private void synpred98_CGA_fragment()
	{
		EnterRule_synpred98_CGA_fragment();
		EnterRule("synpred98_CGA_fragment", 161);
		TraceIn("synpred98_CGA_fragment", 161);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:291:7: ( unaryNumericPrefixExpression ( ( MULT | DIV | MOD ) unaryNumericPrefixExpression )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:291:7: unaryNumericPrefixExpression ( ( MULT | DIV | MOD ) unaryNumericPrefixExpression )*
			{
			DebugLocation(291, 7);
			PushFollow(Follow._unaryNumericPrefixExpression_in_synpred98_CGA3214);
			unaryNumericPrefixExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(291, 36);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:291:36: ( ( MULT | DIV | MOD ) unaryNumericPrefixExpression )*
			try { DebugEnterSubRule(128);
			while (true)
			{
				int alt128=2;
				try { DebugEnterDecision(128, false);
				int LA128_1 = input.LA(1);

				if ((LA128_1==DIV||(LA128_1>=MOD && LA128_1<=MULT)))
				{
					alt128 = 1;
				}


				} finally { DebugExitDecision(128); }
				switch ( alt128 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:291:38: ( MULT | DIV | MOD ) unaryNumericPrefixExpression
					{
					DebugLocation(291, 38);
					if (input.LA(1)==DIV||(input.LA(1)>=MOD && input.LA(1)<=MULT))
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(291, 62);
					PushFollow(Follow._unaryNumericPrefixExpression_in_synpred98_CGA3235);
					unaryNumericPrefixExpression();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop128;
				}
			}

			loop128:
				;

			} finally { DebugExitSubRule(128); }


			}

		}
		finally
		{
			TraceOut("synpred98_CGA_fragment", 161);
			LeaveRule("synpred98_CGA_fragment", 161);
			LeaveRule_synpred98_CGA_fragment();
		}
	}
	// $ANTLR end synpred98_CGA

	partial void EnterRule_synpred99_CGA_fragment();
	partial void LeaveRule_synpred99_CGA_fragment();

	// $ANTLR start synpred99_CGA
	private void synpred99_CGA_fragment()
	{
		EnterRule_synpred99_CGA_fragment();
		EnterRule("synpred99_CGA_fragment", 162);
		TraceIn("synpred99_CGA_fragment", 162);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:292:7: ( unaryStringExpression )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:292:7: unaryStringExpression
			{
			DebugLocation(292, 7);
			PushFollow(Follow._unaryStringExpression_in_synpred99_CGA3246);
			unaryStringExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred99_CGA_fragment", 162);
			LeaveRule("synpred99_CGA_fragment", 162);
			LeaveRule_synpred99_CGA_fragment();
		}
	}
	// $ANTLR end synpred99_CGA

	partial void EnterRule_synpred108_CGA_fragment();
	partial void LeaveRule_synpred108_CGA_fragment();

	// $ANTLR start synpred108_CGA
	private void synpred108_CGA_fragment()
	{
		EnterRule_synpred108_CGA_fragment();
		EnterRule("synpred108_CGA_fragment", 171);
		TraceIn("synpred108_CGA_fragment", 171);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:326:4: ( scaleRelativeExpression )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:326:4: scaleRelativeExpression
			{
			DebugLocation(326, 4);
			PushFollow(Follow._scaleRelativeExpression_in_synpred108_CGA3435);
			scaleRelativeExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred108_CGA_fragment", 171);
			LeaveRule("synpred108_CGA_fragment", 171);
			LeaveRule_synpred108_CGA_fragment();
		}
	}
	// $ANTLR end synpred108_CGA
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA39 dfa39;
	private DFA59 dfa59;
	private DFA71 dfa71;
	private DFA78 dfa78;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa39 = new DFA39( this, SpecialStateTransition39 );
		dfa59 = new DFA59( this, SpecialStateTransition59 );
		dfa71 = new DFA71( this, SpecialStateTransition71 );
		dfa78 = new DFA78( this, SpecialStateTransition78 );
	}

	private class DFA39 : DFA
	{
		private const string DFA39_eotS =
			"\xCB\xFFFF";
		private const string DFA39_eofS =
			"\xCB\xFFFF";
		private const string DFA39_minS =
			"\x2\x19\x1\x9\x1\xC\x1\x30\x1\xC\x1\x19\x1\x9\x1\xC\x1\x30\x2\xC\x1\x8"+
			"\x1\x19\x1\x9\x1\x11\x1\x30\x1\x11\x6\x19\x2\xFFFF\x1\x20\x1\x8\x5\x19"+
			"\x2\xFFFF\x1\x9\x1\xC\x1\x30\x1\xC\xD\x0\x2\xFFFF\x7\x0\x2\xFFFF\x81"+
			"\x0\x2\xFFFF\x7\x0\x2\xFFFF";
		private const string DFA39_maxS =
			"\x3\x34\x1\x2F\x2\x30\x2\x34\x1\x2F\x2\x30\x1\xC\x1\x48\x2\x34\x1\x2F"+
			"\x2\x30\x6\x34\x2\xFFFF\x2\x48\x5\x34\x2\xFFFF\x1\x34\x1\x2F\x2\x30\xD"+
			"\x0\x2\xFFFF\x7\x0\x2\xFFFF\x81\x0\x2\xFFFF\x7\x0\x2\xFFFF";
		private const string DFA39_acceptS =
			"\x18\xFFFF\x1\x1\x1\x2\xB1\xFFFF";
		private const string DFA39_specialS =
			"\x27\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x2\xFFFF\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1"+
			"\x13\x2\xFFFF\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B"+
			"\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25"+
			"\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F"+
			"\x1\x30\x1\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39"+
			"\x1\x3A\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43"+
			"\x1\x44\x1\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D"+
			"\x1\x4E\x1\x4F\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57"+
			"\x1\x58\x1\x59\x1\x5A\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1\x60\x1\x61"+
			"\x1\x62\x1\x63\x1\x64\x1\x65\x1\x66\x1\x67\x1\x68\x1\x69\x1\x6A\x1\x6B"+
			"\x1\x6C\x1\x6D\x1\x6E\x1\x6F\x1\x70\x1\x71\x1\x72\x1\x73\x1\x74\x1\x75"+
			"\x1\x76\x1\x77\x1\x78\x1\x79\x1\x7A\x1\x7B\x1\x7C\x1\x7D\x1\x7E\x1\x7F"+
			"\x1\x80\x1\x81\x1\x82\x1\x83\x1\x84\x1\x85\x1\x86\x1\x87\x1\x88\x1\x89"+
			"\x1\x8A\x1\x8B\x1\x8C\x1\x8D\x1\x8E\x1\x8F\x1\x90\x1\x91\x1\x92\x1\x93"+
			"\x1\x94\x2\xFFFF\x1\x95\x1\x96\x1\x97\x1\x98\x1\x99\x1\x9A\x1\x9B\x2"+
			"\xFFFF}>";
		private static readonly string[] DFA39_transitionS =
			{
				"\x1\x3\x6\xFFFF\x1\x5\x3\xFFFF\x1\x6\xA\xFFFF\x1\x1\x1\x2\x3\xFFFF\x1"+
				"\x4",
				"\x1\x8\x6\xFFFF\x1\xA\xF\xFFFF\x1\x7\x3\xFFFF\x1\x9",
				"\x1\xC\xF\xFFFF\x1\xF\x6\xFFFF\x1\x11\x3\xFFFF\x1\x12\xA\xFFFF\x1\xD"+
				"\x1\xE\x1\xB\x2\xFFFF\x1\x10",
				"\x1\x18\x4\xFFFF\x1\x14\x2\xFFFF\x1\x19\xF\xFFFF\x1\x17\x1\x15\x1\x13"+
				"\x8\xFFFF\x1\x16",
				"\x1\x1A",
				"\x1\x18\x4\xFFFF\x1\x1D\x2\xFFFF\x1\x19\xF\xFFFF\x1\x20\x1\x1E\x1\x1C"+
				"\x8\xFFFF\x1\x1F\x1\x1B",
				"\x1\x24\x6\xFFFF\x1\x26\xF\xFFFF\x1\x23\x3\xFFFF\x1\x25",
				"\x1\x28\xF\xFFFF\x1\x2B\x6\xFFFF\x1\x2D\x3\xFFFF\x1\x2E\xA\xFFFF\x1"+
				"\x29\x1\x2A\x1\x27\x2\xFFFF\x1\x2C",
				"\x1\x18\x4\xFFFF\x1\x30\x2\xFFFF\x1\x19\xF\xFFFF\x1\x33\x1\x31\x1\x2F"+
				"\x8\xFFFF\x1\x32",
				"\x1\x36",
				"\x1\x18\x4\xFFFF\x1\x39\x2\xFFFF\x1\x19\xF\xFFFF\x1\x3C\x1\x3A\x1\x38"+
				"\x8\xFFFF\x1\x3B\x1\x37",
				"\x1\x3F",
				"\x1\x47\x10\xFFFF\x1\x42\x6\xFFFF\x1\x44\x3\xFFFF\x1\x45\x4\xFFFF\x1"+
				"\x48\x5\xFFFF\x1\x40\x1\x41\x3\xFFFF\x1\x43\x13\xFFFF\x1\x46",
				"\x1\x4A\x6\xFFFF\x1\x4C\xF\xFFFF\x1\x49\x3\xFFFF\x1\x4B",
				"\x1\x4E\xF\xFFFF\x1\x51\x6\xFFFF\x1\x53\x3\xFFFF\x1\x54\xA\xFFFF\x1"+
				"\x4F\x1\x50\x1\x4D\x2\xFFFF\x1\x52",
				"\x1\x56\x12\xFFFF\x1\x59\x1\x57\x1\x55\x7\xFFFF\x1\x5A\x1\x58",
				"\x1\x5B",
				"\x1\x5E\x12\xFFFF\x1\x61\x1\x5F\x1\x5D\x7\xFFFF\x1\x62\x1\x60\x1\x5C",
				"\x1\x64\x6\xFFFF\x1\x66\xF\xFFFF\x1\x63\x3\xFFFF\x1\x65",
				"\x1\x69\x6\xFFFF\x1\x6B\x3\xFFFF\x1\x6C\xA\xFFFF\x1\x67\x1\x68\x3\xFFFF"+
				"\x1\x6A",
				"\x1\x6F\x6\xFFFF\x1\x71\x3\xFFFF\x1\x72\xA\xFFFF\x1\x6D\x1\x6E\x3\xFFFF"+
				"\x1\x70",
				"\x1\x75\x6\xFFFF\x1\x77\x3\xFFFF\x1\x78\xA\xFFFF\x1\x73\x1\x74\x3\xFFFF"+
				"\x1\x76",
				"\x1\x7B\x6\xFFFF\x1\x7D\x3\xFFFF\x1\x7E\xA\xFFFF\x1\x79\x1\x7A\x3\xFFFF"+
				"\x1\x7C",
				"\x1\x81\x6\xFFFF\x1\x83\x3\xFFFF\x1\x84\xA\xFFFF\x1\x7F\x1\x80\x3\xFFFF"+
				"\x1\x82",
				"",
				"",
				"\x1\x88\xF\xFFFF\x1\x85\x3\xFFFF\x1\x87\x13\xFFFF\x1\x86",
				"\x1\x92\x1\x8A\xF\xFFFF\x1\x8D\x6\xFFFF\x1\x8F\x3\xFFFF\x1\x90\x4\xFFFF"+
				"\x1\x93\x4\xFFFF\x1\x94\x1\x8B\x1\x8C\x1\x89\x2\xFFFF\x1\x8E\x13\xFFFF"+
				"\x1\x91",
				"\x1\x97\x6\xFFFF\x1\x99\x3\xFFFF\x1\x9A\xA\xFFFF\x1\x95\x1\x96\x3\xFFFF"+
				"\x1\x98",
				"\x1\x9D\x6\xFFFF\x1\x9F\x3\xFFFF\x1\xA0\xA\xFFFF\x1\x9B\x1\x9C\x3\xFFFF"+
				"\x1\x9E",
				"\x1\xA3\x6\xFFFF\x1\xA5\x3\xFFFF\x1\xA6\xA\xFFFF\x1\xA1\x1\xA2\x3\xFFFF"+
				"\x1\xA4",
				"\x1\xA9\x6\xFFFF\x1\xAB\x3\xFFFF\x1\xAC\xA\xFFFF\x1\xA7\x1\xA8\x3\xFFFF"+
				"\x1\xAA",
				"\x1\xAF\x6\xFFFF\x1\xB1\x3\xFFFF\x1\xB2\xA\xFFFF\x1\xAD\x1\xAE\x3\xFFFF"+
				"\x1\xB0",
				"",
				"",
				"\x1\xB4\xF\xFFFF\x1\xB7\x6\xFFFF\x1\xB9\x3\xFFFF\x1\xBA\xA\xFFFF\x1"+
				"\xB5\x1\xB6\x1\xB3\x2\xFFFF\x1\xB8",
				"\x1\x18\x4\xFFFF\x1\xBC\x2\xFFFF\x1\x19\xF\xFFFF\x1\xBF\x1\xBD\x1\xBB"+
				"\x8\xFFFF\x1\xBE",
				"\x1\xC2",
				"\x1\x18\x4\xFFFF\x1\xC5\x2\xFFFF\x1\x19\xF\xFFFF\x1\xC8\x1\xC6\x1\xC4"+
				"\x8\xFFFF\x1\xC7\x1\xC3",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				""
			};

		private static readonly short[] DFA39_eot = DFA.UnpackEncodedString(DFA39_eotS);
		private static readonly short[] DFA39_eof = DFA.UnpackEncodedString(DFA39_eofS);
		private static readonly char[] DFA39_min = DFA.UnpackEncodedStringToUnsignedChars(DFA39_minS);
		private static readonly char[] DFA39_max = DFA.UnpackEncodedStringToUnsignedChars(DFA39_maxS);
		private static readonly short[] DFA39_accept = DFA.UnpackEncodedString(DFA39_acceptS);
		private static readonly short[] DFA39_special = DFA.UnpackEncodedString(DFA39_specialS);
		private static readonly short[][] DFA39_transition;

		static DFA39()
		{
			int numStates = DFA39_transitionS.Length;
			DFA39_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA39_transition[i] = DFA.UnpackEncodedString(DFA39_transitionS[i]);
			}
		}

		public DFA39( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 39;
			this.eot = DFA39_eot;
			this.eof = DFA39_eof;
			this.min = DFA39_min;
			this.max = DFA39_max;
			this.accept = DFA39_accept;
			this.special = DFA39_special;
			this.transition = DFA39_transition;
		}

		public override string Description { get { return "155:1: compSplitOrSetback : ( numericExpression COLON shapeOpSeq -> ^( NOTCOMB numericExpression shapeOpSeq ) | numericExpression EQUALS shapeOpSeq -> ^( COMBINE numericExpression shapeOpSeq ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition39(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA39_1 = input.LA(1);
		int index39_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 65:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 66:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 67:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 68:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 69:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 70:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 71:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 72:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 73:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 74:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 75:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 76:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 77:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 78:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 79:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 80:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 81:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 82:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 83:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 84:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 85:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 86:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 87:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 88:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 89:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 90:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 91:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 92:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 93:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 94:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 95:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 96:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 97:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 98:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 99:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 100:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 101:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 102:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 103:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 104:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 105:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 106:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 107:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 108:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 109:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 110:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 111:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 112:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 113:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 114:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 115:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 116:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 117:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 118:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 119:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 120:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 121:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 122:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 123:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 124:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 125:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 126:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 127:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 128:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 129:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 130:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 131:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 132:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 133:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 134:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 135:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 136:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 137:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 138:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 139:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 140:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 141:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 142:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 143:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 144:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 145:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 146:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 147:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 148:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 149:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 150:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 151:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 152:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 153:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 154:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}
		case 155:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred58_CGA_fragment))) {s = 24;}

				else if ((true)) {s = 25;}

				input.Seek(index39_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 39, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA59 : DFA
	{
		private const string DFA59_eotS =
			"\x89\xFFFF";
		private const string DFA59_eofS =
			"\x89\xFFFF";
		private const string DFA59_minS =
			"\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF\x1\x30\x1\x0\x2\xFFFF\x1\x0\x1\xFFFF\x1"+
			"\xC\x1\x8\x1\x19\x1\x8\x1\x4\x1\x30\x1\x4\x1\x19\x2\x4\x1\x8\x1\x20\x2A"+
			"\xFFFF\x49\x0";
		private const string DFA59_maxS =
			"\x1\x48\x1\xFFFF\x1\x48\x1\xFFFF\x1\x30\x1\x0\x2\xFFFF\x1\x0\x1\xFFFF"+
			"\x1\xC\x1\x48\x1\x34\x1\x48\x1\x2F\x2\x30\x1\x34\x2\x2F\x1\x34\x1\x48"+
			"\x2A\xFFFF\x49\x0";
		private const string DFA59_acceptS =
			"\x1\xFFFF\x1\x1\x7\xFFFF\x1\x2\x22\xFFFF\x1\x3\x5C\xFFFF";
		private const string DFA59_specialS =
			"\x5\xFFFF\x1\x0\x2\xFFFF\x1\x1\x37\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6"+
			"\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11"+
			"\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B"+
			"\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25"+
			"\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F"+
			"\x1\x30\x1\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39"+
			"\x1\x3A\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43"+
			"\x1\x44\x1\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A}>";
		private static readonly string[] DFA59_transitionS =
			{
				"\x1\x8\x10\xFFFF\x1\x1\x6\xFFFF\x1\x5\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9"+
				"\x5\xFFFF\x1\x1\x1\x2\x3\xFFFF\x1\x4\x13\xFFFF\x1\x1",
				"",
				"\x1\x13\x1\xB\xF\xFFFF\x1\xE\x6\xFFFF\x1\x10\x3\xFFFF\x1\x11\x4\xFFFF"+
				"\x1\x14\x5\xFFFF\x1\xC\x1\xD\x1\xA\x2\xFFFF\x1\xF\x13\xFFFF\x1\x12",
				"",
				"\x1\x15",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"",
				"\x1\x40",
				"\x1\x48\x10\xFFFF\x1\x43\x6\xFFFF\x1\x45\x3\xFFFF\x1\x46\x4\xFFFF\x1"+
				"\x49\x5\xFFFF\x1\x41\x1\x42\x3\xFFFF\x1\x44\x13\xFFFF\x1\x47",
				"\x1\x4B\x6\xFFFF\x1\x4D\xF\xFFFF\x1\x4A\x3\xFFFF\x1\x4C",
				"\x1\x57\x1\x4F\xF\xFFFF\x1\x52\x6\xFFFF\x1\x54\x3\xFFFF\x1\x55\x4\xFFFF"+
				"\x1\x58\x5\xFFFF\x1\x50\x1\x51\x1\x4E\x2\xFFFF\x1\x53\x13\xFFFF\x1\x56",
				"\x1\x61\xC\xFFFF\x1\x5A\x1\xFFFF\x1\x60\x6\xFFFF\x2\x5F\x5\xFFFF\x2"+
				"\x5F\x1\xFFFF\x1\x5D\x1\x5B\x1\x59\x1\x60\x4\xFFFF\x1\x62\x1\xFFFF\x1"+
				"\x5E\x1\x5C",
				"\x1\x63",
				"\x1\x6D\xC\xFFFF\x1\x66\x1\xFFFF\x1\x6C\x6\xFFFF\x2\x6B\x5\xFFFF\x2"+
				"\x6B\x1\xFFFF\x1\x69\x1\x67\x1\x65\x1\x6C\x4\xFFFF\x1\x6E\x1\xFFFF\x1"+
				"\x6A\x1\x68\x1\x64",
				"\x1\x70\x6\xFFFF\x1\x72\xF\xFFFF\x1\x6F\x3\xFFFF\x1\x71",
				"\x1\x78\xE\xFFFF\x1\x77\x6\xFFFF\x2\x76\x5\xFFFF\x2\x76\x1\xFFFF\x1"+
				"\x75\x2\xFFFF\x1\x77\x4\xFFFF\x1\x79\x1\xFFFF\x1\x74\x1\x73",
				"\x1\x7E\xE\xFFFF\x1\x7D\x6\xFFFF\x2\x7C\x5\xFFFF\x2\x7C\x1\xFFFF\x1"+
				"\x7B\x2\xFFFF\x1\x7D\x4\xFFFF\x1\x7F\x1\xFFFF\x1\x80\x1\x7A",
				"\x1\x82\x17\xFFFF\x1\x84\xF\xFFFF\x1\x81\x3\xFFFF\x1\x83",
				"\x1\x88\xF\xFFFF\x1\x85\x3\xFFFF\x1\x87\x13\xFFFF\x1\x86",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA59_eot = DFA.UnpackEncodedString(DFA59_eotS);
		private static readonly short[] DFA59_eof = DFA.UnpackEncodedString(DFA59_eofS);
		private static readonly char[] DFA59_min = DFA.UnpackEncodedStringToUnsignedChars(DFA59_minS);
		private static readonly char[] DFA59_max = DFA.UnpackEncodedStringToUnsignedChars(DFA59_maxS);
		private static readonly short[] DFA59_accept = DFA.UnpackEncodedString(DFA59_acceptS);
		private static readonly short[] DFA59_special = DFA.UnpackEncodedString(DFA59_specialS);
		private static readonly short[][] DFA59_transition;

		static DFA59()
		{
			int numStates = DFA59_transitionS.Length;
			DFA59_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA59_transition[i] = DFA.UnpackEncodedString(DFA59_transitionS[i]);
			}
		}

		public DFA59( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 59;
			this.eot = DFA59_eot;
			this.eof = DFA59_eof;
			this.min = DFA59_min;
			this.max = DFA59_max;
			this.accept = DFA59_accept;
			this.special = DFA59_special;
			this.transition = DFA59_transition;
		}

		public override string Description { get { return "239:1: relationalExpression : ( numericOrStringExpression ( relationalOp ^ numericOrStringExpression )? | NOT unaryBooleanExpression -> ^( NOT unaryBooleanExpression ) | unaryBooleanExpression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition59(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA59_1 = input.LA(1);
		int index59_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 65:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 66:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 67:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 68:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 69:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 70:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 71:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 72:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 73:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}
		case 74:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred79_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 44;}

				input.Seek(index59_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 59, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA71 : DFA
	{
		private const string DFA71_eotS =
			"\x69\xFFFF";
		private const string DFA71_eofS =
			"\x69\xFFFF";
		private const string DFA71_minS =
			"\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF\x1\x30\x1\x0\x3\xFFFF\x1\xC\x1\x8\x1\x19"+
			"\x1\x8\x1\x4\x1\x30\x1\x4\x1\x19\x1\x4\x2\xFFFF\x1\x20\x16\xFFFF\x17"+
			"\x0\x2\xFFFF\x6\x0\x4\xFFFF\x8\x0\x4\xFFFF\x6\x0\x5\xFFFF\x4\x0";
		private const string DFA71_maxS =
			"\x1\x48\x1\xFFFF\x1\x48\x1\xFFFF\x1\x30\x1\x0\x3\xFFFF\x1\xC\x1\x48\x1"+
			"\x34\x1\x48\x1\x2F\x2\x30\x1\x34\x1\x2F\x2\xFFFF\x1\x48\x16\xFFFF\x17"+
			"\x0\x2\xFFFF\x6\x0\x4\xFFFF\x8\x0\x4\xFFFF\x6\x0\x5\xFFFF\x4\x0";
		private const string DFA71_acceptS =
			"\x1\xFFFF\x1\x1\x5\xFFFF\x1\x2\x1\x3\x60\xFFFF";
		private const string DFA71_specialS =
			"\x5\xFFFF\x1\x0\x25\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1"+
			"\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1"+
			"\x13\x1\x14\x1\x15\x1\x16\x1\x17\x2\xFFFF\x1\x18\x1\x19\x1\x1A\x1\x1B"+
			"\x1\x1C\x1\x1D\x4\xFFFF\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1"+
			"\x24\x1\x25\x4\xFFFF\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x5\xFFFF"+
			"\x1\x2C\x1\x2D\x1\x2E\x1\x2F}>";
		private static readonly string[] DFA71_transitionS =
			{
				"\x1\x8\x10\xFFFF\x1\x1\x6\xFFFF\x1\x5\x3\xFFFF\x1\x1\xA\xFFFF\x1\x1"+
				"\x1\x2\x3\xFFFF\x1\x4\x13\xFFFF\x1\x7",
				"",
				"\x1\x8\x1\xA\xF\xFFFF\x1\xD\x6\xFFFF\x1\xF\x3\xFFFF\x1\x10\x4\xFFFF"+
				"\x1\x8\x5\xFFFF\x1\xB\x1\xC\x1\x9\x2\xFFFF\x1\xE\x13\xFFFF\x1\x11",
				"",
				"\x1\x14",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\x2B",
				"\x1\x33\x10\xFFFF\x1\x2E\x6\xFFFF\x1\x30\x3\xFFFF\x1\x31\x4\xFFFF\x1"+
				"\x34\x5\xFFFF\x1\x2C\x1\x2D\x3\xFFFF\x1\x2F\x13\xFFFF\x1\x32",
				"\x1\x36\x6\xFFFF\x1\x38\xF\xFFFF\x1\x35\x3\xFFFF\x1\x37",
				"\x1\x8\x1\x3A\xF\xFFFF\x1\x3D\x6\xFFFF\x1\x3F\x3\xFFFF\x1\x40\x4\xFFFF"+
				"\x1\x8\x5\xFFFF\x1\x3B\x1\x3C\x1\x39\x2\xFFFF\x1\x3E\x13\xFFFF\x1\x41",
				"\x1\x8\xC\xFFFF\x1\x45\x1\xFFFF\x1\x8\x6\xFFFF\x2\x8\x5\xFFFF\x2\x8"+
				"\x1\xFFFF\x1\x48\x1\x46\x1\x44\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x49"+
				"\x1\x47",
				"\x1\x4E",
				"\x1\x8\xC\xFFFF\x1\x51\x1\xFFFF\x1\x8\x6\xFFFF\x2\x8\x5\xFFFF\x2\x8"+
				"\x1\xFFFF\x1\x54\x1\x52\x1\x50\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x55"+
				"\x1\x53\x1\x4F",
				"\x1\x5B\x6\xFFFF\x1\x5D\xF\xFFFF\x1\x5A\x3\xFFFF\x1\x5C",
				"\x1\x8\xE\xFFFF\x1\x8\x6\xFFFF\x2\x8\x5\xFFFF\x2\x8\x1\xFFFF\x1\x8"+
				"\x2\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x5F\x1\x5E",
				"",
				"",
				"\x1\x68\xF\xFFFF\x1\x65\x3\xFFFF\x1\x67\x13\xFFFF\x1\x66",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA71_eot = DFA.UnpackEncodedString(DFA71_eotS);
		private static readonly short[] DFA71_eof = DFA.UnpackEncodedString(DFA71_eofS);
		private static readonly char[] DFA71_min = DFA.UnpackEncodedStringToUnsignedChars(DFA71_minS);
		private static readonly char[] DFA71_max = DFA.UnpackEncodedStringToUnsignedChars(DFA71_maxS);
		private static readonly short[] DFA71_accept = DFA.UnpackEncodedString(DFA71_acceptS);
		private static readonly short[] DFA71_special = DFA.UnpackEncodedString(DFA71_specialS);
		private static readonly short[][] DFA71_transition;

		static DFA71()
		{
			int numStates = DFA71_transitionS.Length;
			DFA71_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA71_transition[i] = DFA.UnpackEncodedString(DFA71_transitionS[i]);
			}
		}

		public DFA71( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 71;
			this.eot = DFA71_eot;
			this.eof = DFA71_eof;
			this.min = DFA71_min;
			this.max = DFA71_max;
			this.accept = DFA71_accept;
			this.special = DFA71_special;
			this.transition = DFA71_transition;
		}

		public override string Description { get { return "290:1: numericOrStringMultiplicativeExpression : ( unaryNumericPrefixExpression ( ( MULT ^| DIV ^| MOD ^) unaryNumericPrefixExpression )* | unaryStringExpression | unaryBooleanExpression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition71(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA71_1 = input.LA(1);
		int index71_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred98_CGA_fragment))) {s = 1;}

				else if ((EvaluatePredicate(synpred99_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index71_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 71, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA78 : DFA
	{
		private const string DFA78_eotS =
			"\x85\xFFFF";
		private const string DFA78_eofS =
			"\x85\xFFFF";
		private const string DFA78_minS =
			"\x2\x19\x1\x9\x1\x0\x1\x30\x1\x0\x1\x19\x2\xFFFF\x1\x9\x1\x0\x1\x30\x1"+
			"\x0\x1\xC\x1\x8\x1\x19\x1\x9\x1\x11\x1\x30\x1\x11\x1\x19\x7\xFFFF\x1"+
			"\x20\x8\xFFFF\x1\x9\x1\x0\x1\x30\x9\x0\x7\xFFFF\x1\x0\x8\xFFFF\x34\x0"+
			"\x7\xFFFF\x1\x0\x8\xFFFF";
		private const string DFA78_maxS =
			"\x1\x45\x2\x34\x1\x0\x1\x30\x1\x0\x1\x34\x2\xFFFF\x1\x34\x1\x0\x1\x30"+
			"\x1\x0\x1\xC\x1\x48\x2\x34\x1\x2F\x2\x30\x1\x34\x7\xFFFF\x1\x48\x8\xFFFF"+
			"\x1\x34\x1\x0\x1\x30\x9\x0\x7\xFFFF\x1\x0\x8\xFFFF\x34\x0\x7\xFFFF\x1"+
			"\x0\x8\xFFFF";
		private const string DFA78_acceptS =
			"\x7\xFFFF\x1\x1\x1\x2\x7C\xFFFF";
		private const string DFA78_specialS =
			"\x3\xFFFF\x1\x0\x1\xFFFF\x1\x1\x4\xFFFF\x1\x2\x1\xFFFF\x1\x3\x19\xFFFF"+
			"\x1\x4\x1\xFFFF\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD"+
			"\x7\xFFFF\x1\xE\x8\xFFFF\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14\x1"+
			"\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1"+
			"\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1"+
			"\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32\x1"+
			"\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\x1\x3B\x1\x3C\x1"+
			"\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x7\xFFFF\x1\x43\x8\xFFFF}>";
		private static readonly string[] DFA78_transitionS =
			{
				"\x1\x3\x6\xFFFF\x1\x5\x3\xFFFF\x1\x6\xA\xFFFF\x1\x1\x1\x2\x3\xFFFF\x1"+
				"\x4\xE\xFFFF\x1\x8\x1\xFFFF\x1\x7",
				"\x1\xA\x6\xFFFF\x1\xC\xF\xFFFF\x1\x9\x3\xFFFF\x1\xB",
				"\x1\xE\xF\xFFFF\x1\x11\x6\xFFFF\x1\x13\x3\xFFFF\x1\x14\xA\xFFFF\x1"+
				"\xF\x1\x10\x1\xD\x2\xFFFF\x1\x12",
				"\x1\xFFFF",
				"\x1\x1C",
				"\x1\xFFFF",
				"\x1\x26\x6\xFFFF\x1\x28\xF\xFFFF\x1\x25\x3\xFFFF\x1\x27",
				"",
				"",
				"\x1\x2A\xF\xFFFF\x1\x2D\x6\xFFFF\x1\x2F\x3\xFFFF\x1\x30\xA\xFFFF\x1"+
				"\x2B\x1\x2C\x1\x29\x2\xFFFF\x1\x2E",
				"\x1\xFFFF",
				"\x1\x38",
				"\x1\xFFFF",
				"\x1\x41",
				"\x1\x49\x10\xFFFF\x1\x44\x6\xFFFF\x1\x46\x3\xFFFF\x1\x47\x4\xFFFF\x1"+
				"\x4A\x5\xFFFF\x1\x42\x1\x43\x3\xFFFF\x1\x45\x13\xFFFF\x1\x48",
				"\x1\x4C\x6\xFFFF\x1\x4E\xF\xFFFF\x1\x4B\x3\xFFFF\x1\x4D",
				"\x1\x50\xF\xFFFF\x1\x53\x6\xFFFF\x1\x55\x3\xFFFF\x1\x56\xA\xFFFF\x1"+
				"\x51\x1\x52\x1\x4F\x2\xFFFF\x1\x54",
				"\x1\x58\x12\xFFFF\x1\x5B\x1\x59\x1\x57\x7\xFFFF\x1\x5C\x1\x5A",
				"\x1\x5D",
				"\x1\x60\x12\xFFFF\x1\x63\x1\x61\x1\x5F\x7\xFFFF\x1\x64\x1\x62\x1\x5E",
				"\x1\x66\x6\xFFFF\x1\x68\xF\xFFFF\x1\x65\x3\xFFFF\x1\x67",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x6C\xF\xFFFF\x1\x69\x3\xFFFF\x1\x6B\x13\xFFFF\x1\x6A",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x6E\xF\xFFFF\x1\x71\x6\xFFFF\x1\x73\x3\xFFFF\x1\x74\xA\xFFFF\x1"+
				"\x6F\x1\x70\x1\x6D\x2\xFFFF\x1\x72",
				"\x1\xFFFF",
				"\x1\x7C",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA78_eot = DFA.UnpackEncodedString(DFA78_eotS);
		private static readonly short[] DFA78_eof = DFA.UnpackEncodedString(DFA78_eofS);
		private static readonly char[] DFA78_min = DFA.UnpackEncodedStringToUnsignedChars(DFA78_minS);
		private static readonly char[] DFA78_max = DFA.UnpackEncodedStringToUnsignedChars(DFA78_maxS);
		private static readonly short[] DFA78_accept = DFA.UnpackEncodedString(DFA78_acceptS);
		private static readonly short[] DFA78_special = DFA.UnpackEncodedString(DFA78_specialS);
		private static readonly short[][] DFA78_transition;

		static DFA78()
		{
			int numStates = DFA78_transitionS.Length;
			DFA78_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA78_transition[i] = DFA.UnpackEncodedString(DFA78_transitionS[i]);
			}
		}

		public DFA78( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 78;
			this.eot = DFA78_eot;
			this.eof = DFA78_eof;
			this.min = DFA78_min;
			this.max = DFA78_max;
			this.accept = DFA78_accept;
			this.special = DFA78_special;
			this.transition = DFA78_transition;
		}

		public override string Description { get { return "325:1: scaleRelativeOrFloatingExpression : ( scaleRelativeExpression | scaleFloatingExpression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition78(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA78_1 = input.LA(1);
		int index78_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 65:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 66:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}
		case 67:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred108_CGA_fragment))) {s = 7;}

				else if ((true)) {s = 8;}

				input.Seek(index78_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 78, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _versionStatement_in_cga129 = new BitSet(new ulong[]{0x40000020UL,0x42UL});
		public static readonly BitSet _importStatement_in_cga135 = new BitSet(new ulong[]{0x40000020UL,0x42UL});
		public static readonly BitSet _style_in_cga139 = new BitSet(new ulong[]{0x40000020UL,0x42UL});
		public static readonly BitSet _annotation_in_cga143 = new BitSet(new ulong[]{0x40000020UL,0x42UL});
		public static readonly BitSet _functionDefintion_in_cga147 = new BitSet(new ulong[]{0x40000020UL,0x42UL});
		public static readonly BitSet _ruleDefinition_in_cga151 = new BitSet(new ulong[]{0x40000020UL,0x42UL});
		public static readonly BitSet _EOF_in_cga158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SignatureIdentifier_in_signature171 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _POPEN_in_signature176 = new BitSet(new ulong[]{0x400100000000UL});
		public static readonly BitSet _Identifier_in_signature181 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _79_in_signature184 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _Identifier_in_signature187 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _PCLOSE_in_signature194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_identifier212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VERSION_in_versionStatement231 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _StringLiteral_in_versionStatement234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importStatement251 = new BitSet(new ulong[]{0x100000020UL});
		public static readonly BitSet _annotation_in_importStatement256 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _Identifier_in_importStatement259 = new BitSet(new ulong[]{0x1000000001000UL});
		public static readonly BitSet _POPEN_in_importStatement263 = new BitSet(new ulong[]{0x400100000000UL});
		public static readonly BitSet _Identifier_in_importStatement268 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _79_in_importStatement271 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _Identifier_in_importStatement274 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _PCLOSE_in_importStatement281 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_importStatement288 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _StringLiteral_in_importStatement291 = new BitSet(new ulong[]{0x1000100000022UL});
		public static readonly BitSet _POPEN_in_importStatement295 = new BitSet(new ulong[]{0x400100000000UL});
		public static readonly BitSet _attrOverwrite_in_importStatement299 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _79_in_importStatement302 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _attrOverwrite_in_importStatement305 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _PCLOSE_in_importStatement312 = new BitSet(new ulong[]{0x100000022UL});
		public static readonly BitSet _STYLE_in_style334 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _Identifier_in_style337 = new BitSet(new ulong[]{0x400002UL});
		public static readonly BitSet _EXTENDS_in_style341 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _Identifier_in_style344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Annotation_in_annotation364 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _annotationArguments_in_annotation367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _signature_in_functionDefintion384 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _EQUALS_in_functionDefintion386 = new BitSet(new ulong[]{0x13821102000300UL,0x100UL});
		public static readonly BitSet _functionBody_in_functionDefintion388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_attrOverwrite412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_attrOverwrite448 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _EQUALS_in_attrOverwrite450 = new BitSet(new ulong[]{0x13821102000300UL,0x100UL});
		public static readonly BitSet _functionBody_in_attrOverwrite452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_elseToken477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_functionBody489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _signature_in_ruleDefinition507 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _RULE_DEFINITION_in_ruleDefinition509 = new BitSet(new ulong[]{0xDBEA010180004200UL,0x604UL});
		public static readonly BitSet _ruleBody_in_ruleDefinition511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ProbabilityLiteral_in_ruleCase539 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_ruleCase541 = new BitSet(new ulong[]{0xDBEA010180004200UL,0x604UL});
		public static readonly BitSet _ruleBody_in_ruleCase545 = new BitSet(new ulong[]{0x2000000040000UL});
		public static readonly BitSet _ELSE_in_ruleCase552 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_ruleCase554 = new BitSet(new ulong[]{0xDBEA010180004200UL,0x604UL});
		public static readonly BitSet _ruleBody_in_ruleCase558 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_ruleCase633 = new BitSet(new ulong[]{0x11821102000100UL,0x100UL});
		public static readonly BitSet _booleanExpression_in_ruleCase637 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_ruleCase640 = new BitSet(new ulong[]{0xDBEA010180004200UL,0x604UL});
		public static readonly BitSet _ruleBody_in_ruleCase644 = new BitSet(new ulong[]{0x40200UL});
		public static readonly BitSet _elseToken_in_ruleCase651 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_ruleCase653 = new BitSet(new ulong[]{0xDBEA010180004200UL,0x604UL});
		public static readonly BitSet _ruleBody_in_ruleCase657 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ruleCase_in_ruleBody740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shapeOpSeq_in_ruleBody745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SPUSH_in_stacked761 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _SPOP_in_stacked765 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SPUSH_in_stacked787 = new BitSet(new ulong[]{0xDBEA010180004200UL,0x604UL});
		public static readonly BitSet _ruleBody_in_stacked791 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _SPOP_in_stacked795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shapeOp_in_shapeOpSeq824 = new BitSet(new ulong[]{0xDBE8010180004002UL,0x604UL});
		public static readonly BitSet _NIL_in_shapeOp850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SPLIT_in_shapeOp860 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_shapeOp868 = new BitSet(new ulong[]{0x10000100000000UL});
		public static readonly BitSet _selOrId_in_shapeOp871 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp874 = new BitSet(new ulong[]{0x10000100000000UL});
		public static readonly BitSet _selOrId_in_shapeOp877 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp881 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp884 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_shapeOp892 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _splitExpression_in_shapeOp894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SPLIT_AREA_in_shapeOp904 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_shapeOp907 = new BitSet(new ulong[]{0x10000100000000UL});
		public static readonly BitSet _selOrId_in_shapeOp910 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp913 = new BitSet(new ulong[]{0x10000100000000UL});
		public static readonly BitSet _selOrId_in_shapeOp916 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_shapeOp921 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _splitExpression_in_shapeOp923 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMP_in_shapeOp933 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_shapeOp942 = new BitSet(new ulong[]{0x10000100000000UL});
		public static readonly BitSet _selOrId_in_shapeOp945 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_shapeOp947 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_shapeOp950 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _compListOrSetback_in_shapeOp953 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_shapeOp955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SETB_in_shapeOp966 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_shapeOp975 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp978 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp982 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp985 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_shapeOp990 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_shapeOp992 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _compListOrSetback_in_shapeOp995 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_shapeOp997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SHPL_in_shapeOp1008 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_shapeOp1017 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp1020 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1022 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp1025 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_shapeOp1027 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_shapeOp1089 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _shapeLUOOrIRectList_in_shapeOp1092 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_shapeOp1094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SHPU_in_shapeOp1105 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_shapeOp1114 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp1117 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1119 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp1122 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1124 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp1127 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_shapeOp1129 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_shapeOp1168 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _shapeLUOOrIRectList_in_shapeOp1171 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_shapeOp1173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SHPO_in_shapeOp1184 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_shapeOp1193 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp1196 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1198 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp1201 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1203 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp1206 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1208 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp1211 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_shapeOp1213 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_shapeOp1229 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _shapeLUOOrIRectList_in_shapeOp1232 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_shapeOp1234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IRECT_in_shapeOp1245 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_shapeOp1253 = new BitSet(new ulong[]{0x10000100000000UL});
		public static readonly BitSet _selOrId_in_shapeOp1256 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_shapeOp1258 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_shapeOp1261 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _shapeLUOOrIRectList_in_shapeOp1264 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_shapeOp1266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SCAT_in_shapeOp1277 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_shapeOp1286 = new BitSet(new ulong[]{0x10000100000000UL});
		public static readonly BitSet _selOrId_in_shapeOp1289 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1291 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp1294 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1296 = new BitSet(new ulong[]{0x10000100000000UL});
		public static readonly BitSet _selOrId_in_shapeOp1299 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1303 = new BitSet(new ulong[]{0x10000100000000UL});
		public static readonly BitSet _selOrId_in_shapeOp1306 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1308 = new BitSet(new ulong[]{0x11801102000000UL,0x20UL});
		public static readonly BitSet _scaleRelativeExpression_in_shapeOp1311 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_shapeOp1316 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_shapeOp1319 = new BitSet(new ulong[]{0xDBE8010180004000UL,0x604UL});
		public static readonly BitSet _shapeOpSeq_in_shapeOp1322 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_shapeOp1324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _S_OP_in_shapeOp1335 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_shapeOp1344 = new BitSet(new ulong[]{0x11801102000000UL,0x20UL});
		public static readonly BitSet _scaleRelativeExpression_in_shapeOp1347 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1349 = new BitSet(new ulong[]{0x11801102000000UL,0x20UL});
		public static readonly BitSet _scaleRelativeExpression_in_shapeOp1352 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1354 = new BitSet(new ulong[]{0x11801102000000UL,0x20UL});
		public static readonly BitSet _scaleRelativeExpression_in_shapeOp1357 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_shapeOp1359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _T_OP_in_shapeOp1370 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_shapeOp1379 = new BitSet(new ulong[]{0x11801102000000UL,0x20UL});
		public static readonly BitSet _scaleRelativeExpression_in_shapeOp1382 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1384 = new BitSet(new ulong[]{0x11801102000000UL,0x20UL});
		public static readonly BitSet _scaleRelativeExpression_in_shapeOp1387 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1389 = new BitSet(new ulong[]{0x11801102000000UL,0x20UL});
		public static readonly BitSet _scaleRelativeExpression_in_shapeOp1392 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_shapeOp1394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SP_OP_in_shapeOp1405 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_shapeOp1413 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp1416 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1424 = new BitSet(new ulong[]{0x10000100000000UL});
		public static readonly BitSet _selOrId_in_shapeOp1427 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1442 = new BitSet(new ulong[]{0x11801102000000UL,0x28UL});
		public static readonly BitSet _scaleRelativeOrFloatingExpression_in_shapeOp1445 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1447 = new BitSet(new ulong[]{0x11801102000000UL,0x28UL});
		public static readonly BitSet _scaleRelativeOrFloatingExpression_in_shapeOp1450 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1453 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp1456 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_shapeOp1460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SP_OP_in_shapeOp1471 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_shapeOp1479 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp1482 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1490 = new BitSet(new ulong[]{0x10000100000000UL});
		public static readonly BitSet _selOrId_in_shapeOp1493 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1508 = new BitSet(new ulong[]{0x11801102000000UL,0x28UL});
		public static readonly BitSet _scaleRelativeOrFloatingExpression_in_shapeOp1511 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1513 = new BitSet(new ulong[]{0x11801102000000UL,0x28UL});
		public static readonly BitSet _scaleRelativeOrFloatingExpression_in_shapeOp1516 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1518 = new BitSet(new ulong[]{0x11801102000000UL,0x28UL});
		public static readonly BitSet _scaleRelativeOrFloatingExpression_in_shapeOp1521 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1523 = new BitSet(new ulong[]{0x11801102000000UL,0x28UL});
		public static readonly BitSet _scaleRelativeOrFloatingExpression_in_shapeOp1526 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1529 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp1532 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_shapeOp1536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TILEUV_in_shapeOp1547 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_shapeOp1554 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_shapeOp1557 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1559 = new BitSet(new ulong[]{0x11801102000000UL,0x28UL});
		public static readonly BitSet _scaleRelativeOrFloatingExpression_in_shapeOp1562 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1564 = new BitSet(new ulong[]{0x11801102000000UL,0x28UL});
		public static readonly BitSet _scaleRelativeOrFloatingExpression_in_shapeOp1567 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_shapeOp1569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_OP_in_shapeOp1580 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_shapeOp1587 = new BitSet(new ulong[]{0x10000100000000UL});
		public static readonly BitSet _selOrId_in_shapeOp1590 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_shapeOp1592 = new BitSet(new ulong[]{0x13821102000300UL,0x100UL});
		public static readonly BitSet _expression_in_shapeOp1595 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_shapeOp1597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_shapeOp1608 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _arguments_in_shapeOp1611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stacked_in_shapeOp1622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEL_in_selOrId1636 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_selOrId1639 = new BitSet(new ulong[]{0x11000100000000UL,0x100UL});
		public static readonly BitSet _stringExpression_in_selOrId1642 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_selOrId1644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_selOrId1653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_splitExpression1667 = new BitSet(new ulong[]{0x11801102000000UL,0x20028UL});
		public static readonly BitSet _splitList_in_splitExpression1670 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_splitExpression1672 = new BitSet(new ulong[]{0x4000000002UL});
		public static readonly BitSet _MULT_in_splitExpression1675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shapeSplit_in_splitList1687 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _BAR_in_splitList1691 = new BitSet(new ulong[]{0x11801102000000UL,0x20028UL});
		public static readonly BitSet _splitList_in_splitList1694 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _splitExpression_in_shapeSplit1708 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constraintExpression_in_shapeSplit1775 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_shapeSplit1777 = new BitSet(new ulong[]{0xDBE8010180004000UL,0x20604UL});
		public static readonly BitSet _shapeOpSeqOrSplitExpression_in_shapeSplit1779 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shapeOpSeq_in_shapeOpSeqOrSplitExpression1806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _splitExpression_in_shapeOpSeqOrSplitExpression1811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compSplitOrSetback_in_compListOrSetback1825 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _BAR_in_compListOrSetback1829 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _compListOrSetback_in_compListOrSetback1832 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _numericExpression_in_compSplitOrSetback1852 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_compSplitOrSetback1854 = new BitSet(new ulong[]{0xDBE8010180004000UL,0x604UL});
		public static readonly BitSet _shapeOpSeq_in_compSplitOrSetback1857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericExpression_in_compSplitOrSetback1875 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _EQUALS_in_compSplitOrSetback1877 = new BitSet(new ulong[]{0xDBE8010180004000UL,0x604UL});
		public static readonly BitSet _shapeOpSeq_in_compSplitOrSetback1879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shapeLUOOrIRect_in_shapeLUOOrIRectList1903 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _BAR_in_shapeLUOOrIRectList1907 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _shapeLUOOrIRect_in_shapeLUOOrIRectList1910 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _Identifier_in_shapeLUOOrIRect1924 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_shapeLUOOrIRect1926 = new BitSet(new ulong[]{0xDBE8010180004000UL,0x604UL});
		public static readonly BitSet _shapeOpSeq_in_shapeLUOOrIRect1929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_shapeLUOOrIRect1947 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _EQUALS_in_shapeLUOOrIRect1949 = new BitSet(new ulong[]{0xDBE8010180004000UL,0x604UL});
		public static readonly BitSet _shapeOpSeq_in_shapeLUOOrIRect1951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ProbabilityLiteral_in_caseExpression1980 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseExpression1982 = new BitSet(new ulong[]{0x13821102000300UL,0x100UL});
		public static readonly BitSet _expression_in_caseExpression1986 = new BitSet(new ulong[]{0x2000000040000UL});
		public static readonly BitSet _ELSE_in_caseExpression1993 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseExpression1995 = new BitSet(new ulong[]{0x13821102000300UL,0x100UL});
		public static readonly BitSet _expression_in_caseExpression1999 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseExpression2074 = new BitSet(new ulong[]{0x11821102000100UL,0x100UL});
		public static readonly BitSet _booleanExpression_in_caseExpression2078 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseExpression2081 = new BitSet(new ulong[]{0x13821102000300UL,0x100UL});
		public static readonly BitSet _expression_in_caseExpression2085 = new BitSet(new ulong[]{0x40200UL});
		public static readonly BitSet _elseToken_in_caseExpression2092 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseExpression2094 = new BitSet(new ulong[]{0x13821102000300UL,0x100UL});
		public static readonly BitSet _expression_in_caseExpression2098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ProbabilityLiteral_in_caseBooleanExpression2184 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseBooleanExpression2186 = new BitSet(new ulong[]{0x11821102000100UL,0x100UL});
		public static readonly BitSet _booleanExpression_in_caseBooleanExpression2190 = new BitSet(new ulong[]{0x2000000040000UL});
		public static readonly BitSet _ELSE_in_caseBooleanExpression2197 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseBooleanExpression2199 = new BitSet(new ulong[]{0x11821102000100UL,0x100UL});
		public static readonly BitSet _booleanExpression_in_caseBooleanExpression2203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseBooleanExpression2278 = new BitSet(new ulong[]{0x11821102000100UL,0x100UL});
		public static readonly BitSet _booleanExpression_in_caseBooleanExpression2282 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseBooleanExpression2285 = new BitSet(new ulong[]{0x11821102000100UL,0x100UL});
		public static readonly BitSet _booleanExpression_in_caseBooleanExpression2289 = new BitSet(new ulong[]{0x40200UL});
		public static readonly BitSet _elseToken_in_caseBooleanExpression2296 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseBooleanExpression2298 = new BitSet(new ulong[]{0x11821102000100UL,0x100UL});
		public static readonly BitSet _booleanExpression_in_caseBooleanExpression2302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ProbabilityLiteral_in_caseNumericExpression2388 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseNumericExpression2390 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_caseNumericExpression2394 = new BitSet(new ulong[]{0x2000000040000UL});
		public static readonly BitSet _ELSE_in_caseNumericExpression2401 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseNumericExpression2403 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_caseNumericExpression2407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseNumericExpression2482 = new BitSet(new ulong[]{0x11821102000100UL,0x100UL});
		public static readonly BitSet _booleanExpression_in_caseNumericExpression2486 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseNumericExpression2489 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_caseNumericExpression2493 = new BitSet(new ulong[]{0x40200UL});
		public static readonly BitSet _elseToken_in_caseNumericExpression2500 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseNumericExpression2502 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_caseNumericExpression2506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ProbabilityLiteral_in_caseStringExpression2592 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseStringExpression2594 = new BitSet(new ulong[]{0x11000100000000UL,0x100UL});
		public static readonly BitSet _stringExpression_in_caseStringExpression2598 = new BitSet(new ulong[]{0x2000000040000UL});
		public static readonly BitSet _ELSE_in_caseStringExpression2605 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseStringExpression2607 = new BitSet(new ulong[]{0x11000100000000UL,0x100UL});
		public static readonly BitSet _stringExpression_in_caseStringExpression2611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStringExpression2686 = new BitSet(new ulong[]{0x11821102000100UL,0x100UL});
		public static readonly BitSet _booleanExpression_in_caseStringExpression2690 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseStringExpression2693 = new BitSet(new ulong[]{0x11000100000000UL,0x100UL});
		public static readonly BitSet _stringExpression_in_caseStringExpression2697 = new BitSet(new ulong[]{0x40200UL});
		public static readonly BitSet _elseToken_in_caseStringExpression2704 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_caseStringExpression2706 = new BitSet(new ulong[]{0x11000100000000UL,0x100UL});
		public static readonly BitSet _stringExpression_in_caseStringExpression2710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _caseExpression_in_expression2793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanExpression_in_expression2801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditonalOrExpression_in_booleanExpression2821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalAndExpression_in_conditonalOrExpression2832 = new BitSet(new ulong[]{0x100000000002UL});
		public static readonly BitSet _OR_in_conditonalOrExpression2836 = new BitSet(new ulong[]{0x11821102000100UL,0x100UL});
		public static readonly BitSet _conditionalAndExpression_in_conditonalOrExpression2839 = new BitSet(new ulong[]{0x100000000002UL});
		public static readonly BitSet _equalityExpression_in_conditionalAndExpression2858 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_conditionalAndExpression2862 = new BitSet(new ulong[]{0x11821102000100UL,0x100UL});
		public static readonly BitSet _equalityExpression_in_conditionalAndExpression2865 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression2884 = new BitSet(new ulong[]{0x8000080002UL});
		public static readonly BitSet _set_in_equalityExpression2888 = new BitSet(new ulong[]{0x11821102000100UL,0x100UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression2897 = new BitSet(new ulong[]{0x8000080002UL});
		public static readonly BitSet _numericOrStringExpression_in_relationalExpression2914 = new BitSet(new ulong[]{0x60C000002UL});
		public static readonly BitSet _relationalOp_in_relationalExpression2918 = new BitSet(new ulong[]{0x11801102000100UL,0x100UL});
		public static readonly BitSet _numericOrStringExpression_in_relationalExpression2921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_relationalExpression2932 = new BitSet(new ulong[]{0x11000100000100UL});
		public static readonly BitSet _unaryBooleanExpression_in_relationalExpression2934 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryBooleanExpression_in_relationalExpression2950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanParExpression_in_unaryBooleanExpression2986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BooleanLiteral_in_unaryBooleanExpression2991 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionOrVar_in_unaryBooleanExpression2996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POPEN_in_booleanParExpression3010 = new BitSet(new ulong[]{0x2000000000200UL});
		public static readonly BitSet _caseBooleanExpression_in_booleanParExpression3012 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_booleanParExpression3014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POPEN_in_booleanParExpression3023 = new BitSet(new ulong[]{0x11821102000100UL,0x100UL});
		public static readonly BitSet _booleanExpression_in_booleanParExpression3025 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_booleanParExpression3027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additiveExpression_in_numericExpression3044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression3060 = new BitSet(new ulong[]{0x801000000002UL});
		public static readonly BitSet _PLUS_in_additiveExpression3066 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _MINUS_in_additiveExpression3071 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression3076 = new BitSet(new ulong[]{0x801000000002UL});
		public static readonly BitSet _unaryNumericPrefixExpression_in_multiplicativeExpression3093 = new BitSet(new ulong[]{0x6000020002UL});
		public static readonly BitSet _MULT_in_multiplicativeExpression3099 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _DIV_in_multiplicativeExpression3104 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _MOD_in_multiplicativeExpression3109 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _unaryNumericPrefixExpression_in_multiplicativeExpression3114 = new BitSet(new ulong[]{0x6000020002UL});
		public static readonly BitSet _stringAdditiveExpression_in_stringExpression3128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryStringExpression_in_stringAdditiveExpression3144 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _PLUS_in_stringAdditiveExpression3148 = new BitSet(new ulong[]{0x11000100000000UL,0x100UL});
		public static readonly BitSet _unaryStringExpression_in_stringAdditiveExpression3151 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _numericOrStringAdditiveExpression_in_numericOrStringExpression3165 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericOrStringMultiplicativeExpression_in_numericOrStringAdditiveExpression3181 = new BitSet(new ulong[]{0x801000000002UL});
		public static readonly BitSet _PLUS_in_numericOrStringAdditiveExpression3187 = new BitSet(new ulong[]{0x11801102000100UL,0x100UL});
		public static readonly BitSet _MINUS_in_numericOrStringAdditiveExpression3192 = new BitSet(new ulong[]{0x11801102000100UL,0x100UL});
		public static readonly BitSet _numericOrStringMultiplicativeExpression_in_numericOrStringAdditiveExpression3197 = new BitSet(new ulong[]{0x801000000002UL});
		public static readonly BitSet _unaryNumericPrefixExpression_in_numericOrStringMultiplicativeExpression3214 = new BitSet(new ulong[]{0x6000020002UL});
		public static readonly BitSet _MULT_in_numericOrStringMultiplicativeExpression3220 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _DIV_in_numericOrStringMultiplicativeExpression3225 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _MOD_in_numericOrStringMultiplicativeExpression3230 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _unaryNumericPrefixExpression_in_numericOrStringMultiplicativeExpression3235 = new BitSet(new ulong[]{0x6000020002UL});
		public static readonly BitSet _unaryStringExpression_in_numericOrStringMultiplicativeExpression3246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryBooleanExpression_in_numericOrStringMultiplicativeExpression3254 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_unaryNumericPrefixExpression3285 = new BitSet(new ulong[]{0x11000102000000UL});
		public static readonly BitSet _unaryNumericExpression_in_unaryNumericPrefixExpression3288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_unaryNumericPrefixExpression3297 = new BitSet(new ulong[]{0x11000102000000UL});
		public static readonly BitSet _unaryNumericExpression_in_unaryNumericPrefixExpression3299 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericParExpression_in_unaryNumericExpression3321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FloatingPointLiteral_in_unaryNumericExpression3331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionOrVar_in_unaryNumericExpression3341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constraintPrefix_in_constraintExpression3352 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_constraintExpression3354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericExpression_in_scaleRelativeExpression3368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ScaleRelative_in_scaleRelativeExpression3376 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_scaleRelativeExpression3378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericExpression_in_scaleFloatingExpression3403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ScaleFloat_in_scaleFloatingExpression3411 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_scaleFloatingExpression3413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _scaleRelativeExpression_in_scaleRelativeOrFloatingExpression3435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _scaleFloatingExpression_in_scaleRelativeOrFloatingExpression3440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POPEN_in_numericParExpression3454 = new BitSet(new ulong[]{0x2000000000200UL});
		public static readonly BitSet _caseNumericExpression_in_numericParExpression3456 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_numericParExpression3458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POPEN_in_numericParExpression3467 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_numericParExpression3469 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_numericParExpression3471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POPEN_in_stringParExpression3489 = new BitSet(new ulong[]{0x2000000000200UL});
		public static readonly BitSet _caseStringExpression_in_stringParExpression3491 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_stringParExpression3493 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POPEN_in_stringParExpression3502 = new BitSet(new ulong[]{0x11000100000000UL,0x100UL});
		public static readonly BitSet _stringExpression_in_stringParExpression3504 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_stringParExpression3506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stringParExpression_in_unaryStringExpression3523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_unaryStringExpression3528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionOrVar_in_unaryStringExpression3533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POPEN_in_annotationArguments3551 = new BitSet(new ulong[]{0x13C21102000300UL,0x20100UL});
		public static readonly BitSet _annotationArgList_in_annotationArguments3554 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_annotationArguments3557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POPEN_in_arguments3575 = new BitSet(new ulong[]{0x13C21102000300UL,0x100UL});
		public static readonly BitSet _expressionList_in_arguments3578 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_arguments3581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationArg_in_annotationArgList3599 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _79_in_annotationArgList3602 = new BitSet(new ulong[]{0x13821102000300UL,0x20100UL});
		public static readonly BitSet _annotationArg_in_annotationArgList3605 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _Identifier_in_annotationArg3627 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _EQUALS_in_annotationArg3629 = new BitSet(new ulong[]{0x13821102000300UL,0x20100UL});
		public static readonly BitSet _expression_in_annotationArg3638 = new BitSet(new ulong[]{0x5000000002UL,0x10000UL});
		public static readonly BitSet _MINUS_in_annotationArg3640 = new BitSet(new ulong[]{0x4000000002UL,0x10000UL});
		public static readonly BitSet _MULT_in_annotationArg3643 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_annotationArg3649 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _FloatingPointLiteral_in_annotationArg3651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_annotationArg3661 = new BitSet(new ulong[]{0x1002000000UL});
		public static readonly BitSet _MINUS_in_annotationArg3665 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _FloatingPointLiteral_in_annotationArg3668 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_annotationArg3670 = new BitSet(new ulong[]{0x1002000000UL});
		public static readonly BitSet _MINUS_in_annotationArg3674 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _FloatingPointLiteral_in_annotationArg3677 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_annotationArg3679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEL_in_functionOrVar3700 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_functionOrVar3703 = new BitSet(new ulong[]{0x11000100000000UL,0x100UL});
		public static readonly BitSet _stringExpression_in_functionOrVar3706 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_functionOrVar3708 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_functionOrVar3719 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _arguments_in_functionOrVar3722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList3739 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _79_in_expressionList3742 = new BitSet(new ulong[]{0x13821102000300UL,0x100UL});
		public static readonly BitSet _expression_in_expressionList3745 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _functionDefintion_in_synpred5_CGA147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_synpred17_CGA256 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _Identifier_in_synpred17_CGA259 = new BitSet(new ulong[]{0x1000000001000UL});
		public static readonly BitSet _POPEN_in_synpred17_CGA263 = new BitSet(new ulong[]{0x400100000000UL});
		public static readonly BitSet _Identifier_in_synpred17_CGA268 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _79_in_synpred17_CGA271 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _Identifier_in_synpred17_CGA274 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _PCLOSE_in_synpred17_CGA281 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_synpred17_CGA288 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _StringLiteral_in_synpred17_CGA291 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _POPEN_in_synpred17_CGA295 = new BitSet(new ulong[]{0x400100000000UL});
		public static readonly BitSet _attrOverwrite_in_synpred17_CGA299 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _79_in_synpred17_CGA302 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _attrOverwrite_in_synpred17_CGA305 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _PCLOSE_in_synpred17_CGA312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SP_OP_in_synpred45_CGA1405 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_synpred45_CGA1413 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_synpred45_CGA1416 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_synpred45_CGA1424 = new BitSet(new ulong[]{0x10000100000000UL});
		public static readonly BitSet _selOrId_in_synpred45_CGA1427 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_synpred45_CGA1442 = new BitSet(new ulong[]{0x11801102000000UL,0x28UL});
		public static readonly BitSet _scaleRelativeOrFloatingExpression_in_synpred45_CGA1445 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_synpred45_CGA1447 = new BitSet(new ulong[]{0x11801102000000UL,0x28UL});
		public static readonly BitSet _scaleRelativeOrFloatingExpression_in_synpred45_CGA1450 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _79_in_synpred45_CGA1453 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_synpred45_CGA1456 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_synpred45_CGA1460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SP_OP_in_synpred47_CGA1471 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _POPEN_in_synpred47_CGA1479 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_synpred47_CGA1482 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_synpred47_CGA1490 = new BitSet(new ulong[]{0x10000100000000UL});
		public static readonly BitSet _selOrId_in_synpred47_CGA1493 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_synpred47_CGA1508 = new BitSet(new ulong[]{0x11801102000000UL,0x28UL});
		public static readonly BitSet _scaleRelativeOrFloatingExpression_in_synpred47_CGA1511 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_synpred47_CGA1513 = new BitSet(new ulong[]{0x11801102000000UL,0x28UL});
		public static readonly BitSet _scaleRelativeOrFloatingExpression_in_synpred47_CGA1516 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_synpred47_CGA1518 = new BitSet(new ulong[]{0x11801102000000UL,0x28UL});
		public static readonly BitSet _scaleRelativeOrFloatingExpression_in_synpred47_CGA1521 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_synpred47_CGA1523 = new BitSet(new ulong[]{0x11801102000000UL,0x28UL});
		public static readonly BitSet _scaleRelativeOrFloatingExpression_in_synpred47_CGA1526 = new BitSet(new ulong[]{0x400000000000UL,0x8000UL});
		public static readonly BitSet _79_in_synpred47_CGA1529 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _numericExpression_in_synpred47_CGA1532 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _PCLOSE_in_synpred47_CGA1536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BAR_in_synpred54_CGA1691 = new BitSet(new ulong[]{0x11801102000000UL,0x20028UL});
		public static readonly BitSet _splitList_in_synpred54_CGA1694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BAR_in_synpred57_CGA1829 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _compListOrSetback_in_synpred57_CGA1832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericExpression_in_synpred58_CGA1852 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _COLON_in_synpred58_CGA1854 = new BitSet(new ulong[]{0xDBE8010180004000UL,0x604UL});
		public static readonly BitSet _shapeOpSeq_in_synpred58_CGA1857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericOrStringExpression_in_synpred79_CGA2914 = new BitSet(new ulong[]{0x60C000002UL});
		public static readonly BitSet _relationalOp_in_synpred79_CGA2918 = new BitSet(new ulong[]{0x11801102000100UL,0x100UL});
		public static readonly BitSet _numericOrStringExpression_in_synpred79_CGA2921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryNumericPrefixExpression_in_synpred98_CGA3214 = new BitSet(new ulong[]{0x6000020002UL});
		public static readonly BitSet _set_in_synpred98_CGA3218 = new BitSet(new ulong[]{0x11801102000000UL});
		public static readonly BitSet _unaryNumericPrefixExpression_in_synpred98_CGA3235 = new BitSet(new ulong[]{0x6000020002UL});
		public static readonly BitSet _unaryStringExpression_in_synpred99_CGA3246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _scaleRelativeExpression_in_synpred108_CGA3435 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace CGATranslator
