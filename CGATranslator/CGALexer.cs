//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3 2017-03-19 13:27:16

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace CGATranslator
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class CGALexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int AND=4;
	public const int Annotation=5;
	public const int Attr=6;
	public const int BAR=7;
	public const int BooleanLiteral=8;
	public const int CASE=9;
	public const int CBODY=10;
	public const int CEXPR=11;
	public const int COLON=12;
	public const int COMBINE=13;
	public const int COMP=14;
	public const int CPROB=15;
	public const int DEFR=16;
	public const int DIV=17;
	public const int ELSE=18;
	public const int EQUAL=19;
	public const int EQUALS=20;
	public const int ERROR=21;
	public const int EXTENDS=22;
	public const int EscapeSequence=23;
	public const int Exponent=24;
	public const int FloatingPointLiteral=25;
	public const int GEQUAL=26;
	public const int GT=27;
	public const int HexDigit=28;
	public const int IDDigit=29;
	public const int IMPORT=30;
	public const int IRECT=31;
	public const int Identifier=32;
	public const int LEQUAL=33;
	public const int LT=34;
	public const int Letter=35;
	public const int MINUS=36;
	public const int MOD=37;
	public const int MULT=38;
	public const int NEQUAL=39;
	public const int NIL=40;
	public const int NOT=41;
	public const int NOTCOMB=42;
	public const int OPSEQ=43;
	public const int OR=44;
	public const int OctalEscape=45;
	public const int PCLOSE=46;
	public const int PLUS=47;
	public const int POPEN=48;
	public const int ProbabilityLiteral=49;
	public const int RULE_DEFINITION=50;
	public const int SCAT=51;
	public const int SEL=52;
	public const int SETB=53;
	public const int SET_OP=54;
	public const int SHPL=55;
	public const int SHPO=56;
	public const int SHPU=57;
	public const int SNAP_SPLIT=58;
	public const int SPLIT=59;
	public const int SPLIT_AREA=60;
	public const int SPOP=61;
	public const int SPUSH=62;
	public const int SP_OP=63;
	public const int STACKED=64;
	public const int STYLE=65;
	public const int S_OP=66;
	public const int ScaleFloat=67;
	public const int ScaleRatio=68;
	public const int ScaleRelative=69;
	public const int SignatureIdentifier=70;
	public const int SignatureIdentifierWS=71;
	public const int StringLiteral=72;
	public const int TILEUV=73;
	public const int T_OP=74;
	public const int UMINUS=75;
	public const int UnicodeEscape=76;
	public const int VERSION=77;
	public const int WS=78;

	// delegates
	// delegators

	public CGALexer()
	{
		OnCreated();
	}

	public CGALexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public CGALexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "/Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__79();
	partial void LeaveRule_T__79();

	// $ANTLR start "T__79"
	[GrammarRule("T__79")]
	private void mT__79()
	{
		EnterRule_T__79();
		EnterRule("T__79", 1);
		TraceIn("T__79", 1);
		try
		{
			int _type = T__79;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:10:7: ( ',' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:10:9: ','
			{
			DebugLocation(10, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__79", 1);
			LeaveRule("T__79", 1);
			LeaveRule_T__79();
		}
	}
	// $ANTLR end "T__79"

	partial void EnterRule_T__80();
	partial void LeaveRule_T__80();

	// $ANTLR start "T__80"
	[GrammarRule("T__80")]
	private void mT__80()
	{
		EnterRule_T__80();
		EnterRule("T__80", 2);
		TraceIn("T__80", 2);
		try
		{
			int _type = T__80;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:11:7: ( '^' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:11:9: '^'
			{
			DebugLocation(11, 9);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__80", 2);
			LeaveRule("T__80", 2);
			LeaveRule_T__80();
		}
	}
	// $ANTLR end "T__80"

	partial void EnterRule_T__81();
	partial void LeaveRule_T__81();

	// $ANTLR start "T__81"
	[GrammarRule("T__81")]
	private void mT__81()
	{
		EnterRule_T__81();
		EnterRule("T__81", 3);
		TraceIn("T__81", 3);
		try
		{
			int _type = T__81;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:12:7: ( '{' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:12:9: '{'
			{
			DebugLocation(12, 9);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__81", 3);
			LeaveRule("T__81", 3);
			LeaveRule_T__81();
		}
	}
	// $ANTLR end "T__81"

	partial void EnterRule_T__82();
	partial void LeaveRule_T__82();

	// $ANTLR start "T__82"
	[GrammarRule("T__82")]
	private void mT__82()
	{
		EnterRule_T__82();
		EnterRule("T__82", 4);
		TraceIn("T__82", 4);
		try
		{
			int _type = T__82;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:13:7: ( '}' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:13:9: '}'
			{
			DebugLocation(13, 9);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__82", 4);
			LeaveRule("T__82", 4);
			LeaveRule_T__82();
		}
	}
	// $ANTLR end "T__82"

	partial void EnterRule_EQUALS();
	partial void LeaveRule_EQUALS();

	// $ANTLR start "EQUALS"
	[GrammarRule("EQUALS")]
	private void mEQUALS()
	{
		EnterRule_EQUALS();
		EnterRule("EQUALS", 5);
		TraceIn("EQUALS", 5);
		try
		{
			int _type = EQUALS;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:381:12: ( '=' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:381:14: '='
			{
			DebugLocation(381, 14);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUALS", 5);
			LeaveRule("EQUALS", 5);
			LeaveRule_EQUALS();
		}
	}
	// $ANTLR end "EQUALS"

	partial void EnterRule_RULE_DEFINITION();
	partial void LeaveRule_RULE_DEFINITION();

	// $ANTLR start "RULE_DEFINITION"
	[GrammarRule("RULE_DEFINITION")]
	private void mRULE_DEFINITION()
	{
		EnterRule_RULE_DEFINITION();
		EnterRule("RULE_DEFINITION", 6);
		TraceIn("RULE_DEFINITION", 6);
		try
		{
			int _type = RULE_DEFINITION;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:382:21: ( '-->' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:382:23: '-->'
			{
			DebugLocation(382, 23);
			Match("-->"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RULE_DEFINITION", 6);
			LeaveRule("RULE_DEFINITION", 6);
			LeaveRule_RULE_DEFINITION();
		}
	}
	// $ANTLR end "RULE_DEFINITION"

	partial void EnterRule_POPEN();
	partial void LeaveRule_POPEN();

	// $ANTLR start "POPEN"
	[GrammarRule("POPEN")]
	private void mPOPEN()
	{
		EnterRule_POPEN();
		EnterRule("POPEN", 7);
		TraceIn("POPEN", 7);
		try
		{
			int _type = POPEN;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:383:12: ( '(' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:383:14: '('
			{
			DebugLocation(383, 14);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("POPEN", 7);
			LeaveRule("POPEN", 7);
			LeaveRule_POPEN();
		}
	}
	// $ANTLR end "POPEN"

	partial void EnterRule_PCLOSE();
	partial void LeaveRule_PCLOSE();

	// $ANTLR start "PCLOSE"
	[GrammarRule("PCLOSE")]
	private void mPCLOSE()
	{
		EnterRule_PCLOSE();
		EnterRule("PCLOSE", 8);
		TraceIn("PCLOSE", 8);
		try
		{
			int _type = PCLOSE;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:384:12: ( ')' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:384:14: ')'
			{
			DebugLocation(384, 14);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PCLOSE", 8);
			LeaveRule("PCLOSE", 8);
			LeaveRule_PCLOSE();
		}
	}
	// $ANTLR end "PCLOSE"

	partial void EnterRule_SPUSH();
	partial void LeaveRule_SPUSH();

	// $ANTLR start "SPUSH"
	[GrammarRule("SPUSH")]
	private void mSPUSH()
	{
		EnterRule_SPUSH();
		EnterRule("SPUSH", 9);
		TraceIn("SPUSH", 9);
		try
		{
			int _type = SPUSH;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:385:12: ( '[' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:385:14: '['
			{
			DebugLocation(385, 14);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SPUSH", 9);
			LeaveRule("SPUSH", 9);
			LeaveRule_SPUSH();
		}
	}
	// $ANTLR end "SPUSH"

	partial void EnterRule_SPOP();
	partial void LeaveRule_SPOP();

	// $ANTLR start "SPOP"
	[GrammarRule("SPOP")]
	private void mSPOP()
	{
		EnterRule_SPOP();
		EnterRule("SPOP", 10);
		TraceIn("SPOP", 10);
		try
		{
			int _type = SPOP;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:386:12: ( ']' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:386:14: ']'
			{
			DebugLocation(386, 14);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SPOP", 10);
			LeaveRule("SPOP", 10);
			LeaveRule_SPOP();
		}
	}
	// $ANTLR end "SPOP"

	partial void EnterRule_MULT();
	partial void LeaveRule_MULT();

	// $ANTLR start "MULT"
	[GrammarRule("MULT")]
	private void mMULT()
	{
		EnterRule_MULT();
		EnterRule("MULT", 11);
		TraceIn("MULT", 11);
		try
		{
			int _type = MULT;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:387:12: ( '*' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:387:14: '*'
			{
			DebugLocation(387, 14);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULT", 11);
			LeaveRule("MULT", 11);
			LeaveRule_MULT();
		}
	}
	// $ANTLR end "MULT"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 12);
		TraceIn("DIV", 12);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:388:12: ( '/' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:388:14: '/'
			{
			DebugLocation(388, 14);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 12);
			LeaveRule("DIV", 12);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_MOD();
	partial void LeaveRule_MOD();

	// $ANTLR start "MOD"
	[GrammarRule("MOD")]
	private void mMOD()
	{
		EnterRule_MOD();
		EnterRule("MOD", 13);
		TraceIn("MOD", 13);
		try
		{
			int _type = MOD;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:389:12: ( '%' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:389:14: '%'
			{
			DebugLocation(389, 14);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOD", 13);
			LeaveRule("MOD", 13);
			LeaveRule_MOD();
		}
	}
	// $ANTLR end "MOD"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 14);
		TraceIn("MINUS", 14);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:390:12: ( '-' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:390:14: '-'
			{
			DebugLocation(390, 14);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 14);
			LeaveRule("MINUS", 14);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_UMINUS();
	partial void LeaveRule_UMINUS();

	// $ANTLR start "UMINUS"
	[GrammarRule("UMINUS")]
	private void mUMINUS()
	{
		EnterRule_UMINUS();
		EnterRule("UMINUS", 15);
		TraceIn("UMINUS", 15);
		try
		{
			int _type = UMINUS;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:391:12: ( '\\u0000-\\u0000' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:391:14: '\\u0000-\\u0000'
			{
			DebugLocation(391, 14);
			Match("\u0000-\u0000"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("UMINUS", 15);
			LeaveRule("UMINUS", 15);
			LeaveRule_UMINUS();
		}
	}
	// $ANTLR end "UMINUS"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 16);
		TraceIn("PLUS", 16);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:392:12: ( '+' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:392:14: '+'
			{
			DebugLocation(392, 14);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 16);
			LeaveRule("PLUS", 16);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 17);
		TraceIn("NOT", 17);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:393:12: ( '!' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:393:14: '!'
			{
			DebugLocation(393, 14);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 17);
			LeaveRule("NOT", 17);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 18);
		TraceIn("AND", 18);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:394:12: ( '&&' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:394:14: '&&'
			{
			DebugLocation(394, 14);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 18);
			LeaveRule("AND", 18);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 19);
		TraceIn("OR", 19);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:395:12: ( '||' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:395:14: '||'
			{
			DebugLocation(395, 14);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 19);
			LeaveRule("OR", 19);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_EQUAL();
	partial void LeaveRule_EQUAL();

	// $ANTLR start "EQUAL"
	[GrammarRule("EQUAL")]
	private void mEQUAL()
	{
		EnterRule_EQUAL();
		EnterRule("EQUAL", 20);
		TraceIn("EQUAL", 20);
		try
		{
			int _type = EQUAL;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:396:12: ( '==' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:396:14: '=='
			{
			DebugLocation(396, 14);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUAL", 20);
			LeaveRule("EQUAL", 20);
			LeaveRule_EQUAL();
		}
	}
	// $ANTLR end "EQUAL"

	partial void EnterRule_NEQUAL();
	partial void LeaveRule_NEQUAL();

	// $ANTLR start "NEQUAL"
	[GrammarRule("NEQUAL")]
	private void mNEQUAL()
	{
		EnterRule_NEQUAL();
		EnterRule("NEQUAL", 21);
		TraceIn("NEQUAL", 21);
		try
		{
			int _type = NEQUAL;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:397:12: ( '!=' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:397:14: '!='
			{
			DebugLocation(397, 14);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEQUAL", 21);
			LeaveRule("NEQUAL", 21);
			LeaveRule_NEQUAL();
		}
	}
	// $ANTLR end "NEQUAL"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 22);
		TraceIn("GT", 22);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:398:12: ( '>' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:398:14: '>'
			{
			DebugLocation(398, 14);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 22);
			LeaveRule("GT", 22);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_GEQUAL();
	partial void LeaveRule_GEQUAL();

	// $ANTLR start "GEQUAL"
	[GrammarRule("GEQUAL")]
	private void mGEQUAL()
	{
		EnterRule_GEQUAL();
		EnterRule("GEQUAL", 23);
		TraceIn("GEQUAL", 23);
		try
		{
			int _type = GEQUAL;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:399:12: ( '>=' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:399:14: '>='
			{
			DebugLocation(399, 14);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GEQUAL", 23);
			LeaveRule("GEQUAL", 23);
			LeaveRule_GEQUAL();
		}
	}
	// $ANTLR end "GEQUAL"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 24);
		TraceIn("LT", 24);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:400:12: ( '<' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:400:14: '<'
			{
			DebugLocation(400, 14);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 24);
			LeaveRule("LT", 24);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_LEQUAL();
	partial void LeaveRule_LEQUAL();

	// $ANTLR start "LEQUAL"
	[GrammarRule("LEQUAL")]
	private void mLEQUAL()
	{
		EnterRule_LEQUAL();
		EnterRule("LEQUAL", 25);
		TraceIn("LEQUAL", 25);
		try
		{
			int _type = LEQUAL;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:401:12: ( '<=' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:401:14: '<='
			{
			DebugLocation(401, 14);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LEQUAL", 25);
			LeaveRule("LEQUAL", 25);
			LeaveRule_LEQUAL();
		}
	}
	// $ANTLR end "LEQUAL"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 26);
		TraceIn("COLON", 26);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:402:13: ( ':' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:402:15: ':'
			{
			DebugLocation(402, 15);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 26);
			LeaveRule("COLON", 26);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_CPROB();
	partial void LeaveRule_CPROB();

	// $ANTLR start "CPROB"
	[GrammarRule("CPROB")]
	private void mCPROB()
	{
		EnterRule_CPROB();
		EnterRule("CPROB", 27);
		TraceIn("CPROB", 27);
		try
		{
			int _type = CPROB;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:403:12: ( '\\u0000CPROB\\u0000' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:403:14: '\\u0000CPROB\\u0000'
			{
			DebugLocation(403, 14);
			Match("\u0000CPROB\u0000"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CPROB", 27);
			LeaveRule("CPROB", 27);
			LeaveRule_CPROB();
		}
	}
	// $ANTLR end "CPROB"

	partial void EnterRule_CEXPR();
	partial void LeaveRule_CEXPR();

	// $ANTLR start "CEXPR"
	[GrammarRule("CEXPR")]
	private void mCEXPR()
	{
		EnterRule_CEXPR();
		EnterRule("CEXPR", 28);
		TraceIn("CEXPR", 28);
		try
		{
			int _type = CEXPR;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:404:12: ( '\\u0000CEXPR\\u0000' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:404:14: '\\u0000CEXPR\\u0000'
			{
			DebugLocation(404, 14);
			Match("\u0000CEXPR\u0000"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CEXPR", 28);
			LeaveRule("CEXPR", 28);
			LeaveRule_CEXPR();
		}
	}
	// $ANTLR end "CEXPR"

	partial void EnterRule_CBODY();
	partial void LeaveRule_CBODY();

	// $ANTLR start "CBODY"
	[GrammarRule("CBODY")]
	private void mCBODY()
	{
		EnterRule_CBODY();
		EnterRule("CBODY", 29);
		TraceIn("CBODY", 29);
		try
		{
			int _type = CBODY;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:405:12: ( '\\u0000CBODY\\u0000' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:405:14: '\\u0000CBODY\\u0000'
			{
			DebugLocation(405, 14);
			Match("\u0000CBODY\u0000"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CBODY", 29);
			LeaveRule("CBODY", 29);
			LeaveRule_CBODY();
		}
	}
	// $ANTLR end "CBODY"

	partial void EnterRule_OPSEQ();
	partial void LeaveRule_OPSEQ();

	// $ANTLR start "OPSEQ"
	[GrammarRule("OPSEQ")]
	private void mOPSEQ()
	{
		EnterRule_OPSEQ();
		EnterRule("OPSEQ", 30);
		TraceIn("OPSEQ", 30);
		try
		{
			int _type = OPSEQ;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:406:12: ( '\\u0000OPSEQ\\u0000' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:406:14: '\\u0000OPSEQ\\u0000'
			{
			DebugLocation(406, 14);
			Match("\u0000OPSEQ\u0000"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPSEQ", 30);
			LeaveRule("OPSEQ", 30);
			LeaveRule_OPSEQ();
		}
	}
	// $ANTLR end "OPSEQ"

	partial void EnterRule_DEFR();
	partial void LeaveRule_DEFR();

	// $ANTLR start "DEFR"
	[GrammarRule("DEFR")]
	private void mDEFR()
	{
		EnterRule_DEFR();
		EnterRule("DEFR", 31);
		TraceIn("DEFR", 31);
		try
		{
			int _type = DEFR;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:407:12: ( '\\u0000DEFR\\u0000' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:407:14: '\\u0000DEFR\\u0000'
			{
			DebugLocation(407, 14);
			Match("\u0000DEFR\u0000"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DEFR", 31);
			LeaveRule("DEFR", 31);
			LeaveRule_DEFR();
		}
	}
	// $ANTLR end "DEFR"

	partial void EnterRule_ERROR();
	partial void LeaveRule_ERROR();

	// $ANTLR start "ERROR"
	[GrammarRule("ERROR")]
	private void mERROR()
	{
		EnterRule_ERROR();
		EnterRule("ERROR", 32);
		TraceIn("ERROR", 32);
		try
		{
			int _type = ERROR;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:408:12: ( '\\u0000ERROR\\u0000' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:408:14: '\\u0000ERROR\\u0000'
			{
			DebugLocation(408, 14);
			Match("\u0000ERROR\u0000"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ERROR", 32);
			LeaveRule("ERROR", 32);
			LeaveRule_ERROR();
		}
	}
	// $ANTLR end "ERROR"

	partial void EnterRule_NOTCOMB();
	partial void LeaveRule_NOTCOMB();

	// $ANTLR start "NOTCOMB"
	[GrammarRule("NOTCOMB")]
	private void mNOTCOMB()
	{
		EnterRule_NOTCOMB();
		EnterRule("NOTCOMB", 33);
		TraceIn("NOTCOMB", 33);
		try
		{
			int _type = NOTCOMB;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:409:12: ( '\\u0000COLON\\u0000' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:409:14: '\\u0000COLON\\u0000'
			{
			DebugLocation(409, 14);
			Match("\u0000COLON\u0000"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOTCOMB", 33);
			LeaveRule("NOTCOMB", 33);
			LeaveRule_NOTCOMB();
		}
	}
	// $ANTLR end "NOTCOMB"

	partial void EnterRule_COMBINE();
	partial void LeaveRule_COMBINE();

	// $ANTLR start "COMBINE"
	[GrammarRule("COMBINE")]
	private void mCOMBINE()
	{
		EnterRule_COMBINE();
		EnterRule("COMBINE", 34);
		TraceIn("COMBINE", 34);
		try
		{
			int _type = COMBINE;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:410:12: ( '\\u0000EQUALS\\u0000' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:410:14: '\\u0000EQUALS\\u0000'
			{
			DebugLocation(410, 14);
			Match("\u0000EQUALS\u0000"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMBINE", 34);
			LeaveRule("COMBINE", 34);
			LeaveRule_COMBINE();
		}
	}
	// $ANTLR end "COMBINE"

	partial void EnterRule_STACKED();
	partial void LeaveRule_STACKED();

	// $ANTLR start "STACKED"
	[GrammarRule("STACKED")]
	private void mSTACKED()
	{
		EnterRule_STACKED();
		EnterRule("STACKED", 35);
		TraceIn("STACKED", 35);
		try
		{
			int _type = STACKED;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:411:12: ( '\\u0000STACKED\\u0000' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:411:14: '\\u0000STACKED\\u0000'
			{
			DebugLocation(411, 14);
			Match("\u0000STACKED\u0000"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STACKED", 35);
			LeaveRule("STACKED", 35);
			LeaveRule_STACKED();
		}
	}
	// $ANTLR end "STACKED"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 36);
		TraceIn("ELSE", 36);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:412:12: ( 'else' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:412:14: 'else'
			{
			DebugLocation(412, 14);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 36);
			LeaveRule("ELSE", 36);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_CASE();
	partial void LeaveRule_CASE();

	// $ANTLR start "CASE"
	[GrammarRule("CASE")]
	private void mCASE()
	{
		EnterRule_CASE();
		EnterRule("CASE", 37);
		TraceIn("CASE", 37);
		try
		{
			int _type = CASE;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:413:12: ( 'case' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:413:14: 'case'
			{
			DebugLocation(413, 14);
			Match("case"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CASE", 37);
			LeaveRule("CASE", 37);
			LeaveRule_CASE();
		}
	}
	// $ANTLR end "CASE"

	partial void EnterRule_SPLIT();
	partial void LeaveRule_SPLIT();

	// $ANTLR start "SPLIT"
	[GrammarRule("SPLIT")]
	private void mSPLIT()
	{
		EnterRule_SPLIT();
		EnterRule("SPLIT", 38);
		TraceIn("SPLIT", 38);
		try
		{
			int _type = SPLIT;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:414:12: ( 'split' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:414:14: 'split'
			{
			DebugLocation(414, 14);
			Match("split"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SPLIT", 38);
			LeaveRule("SPLIT", 38);
			LeaveRule_SPLIT();
		}
	}
	// $ANTLR end "SPLIT"

	partial void EnterRule_SNAP_SPLIT();
	partial void LeaveRule_SNAP_SPLIT();

	// $ANTLR start "SNAP_SPLIT"
	[GrammarRule("SNAP_SPLIT")]
	private void mSNAP_SPLIT()
	{
		EnterRule_SNAP_SPLIT();
		EnterRule("SNAP_SPLIT", 39);
		TraceIn("SNAP_SPLIT", 39);
		try
		{
			int _type = SNAP_SPLIT;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:415:12: ( 'snapSplit' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:415:14: 'snapSplit'
			{
			DebugLocation(415, 14);
			Match("snapSplit"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SNAP_SPLIT", 39);
			LeaveRule("SNAP_SPLIT", 39);
			LeaveRule_SNAP_SPLIT();
		}
	}
	// $ANTLR end "SNAP_SPLIT"

	partial void EnterRule_SPLIT_AREA();
	partial void LeaveRule_SPLIT_AREA();

	// $ANTLR start "SPLIT_AREA"
	[GrammarRule("SPLIT_AREA")]
	private void mSPLIT_AREA()
	{
		EnterRule_SPLIT_AREA();
		EnterRule("SPLIT_AREA", 40);
		TraceIn("SPLIT_AREA", 40);
		try
		{
			int _type = SPLIT_AREA;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:416:12: ( 'splitArea' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:416:14: 'splitArea'
			{
			DebugLocation(416, 14);
			Match("splitArea"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SPLIT_AREA", 40);
			LeaveRule("SPLIT_AREA", 40);
			LeaveRule_SPLIT_AREA();
		}
	}
	// $ANTLR end "SPLIT_AREA"

	partial void EnterRule_S_OP();
	partial void LeaveRule_S_OP();

	// $ANTLR start "S_OP"
	[GrammarRule("S_OP")]
	private void mS_OP()
	{
		EnterRule_S_OP();
		EnterRule("S_OP", 41);
		TraceIn("S_OP", 41);
		try
		{
			int _type = S_OP;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:417:12: ( 's' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:417:14: 's'
			{
			DebugLocation(417, 14);
			Match('s'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("S_OP", 41);
			LeaveRule("S_OP", 41);
			LeaveRule_S_OP();
		}
	}
	// $ANTLR end "S_OP"

	partial void EnterRule_SET_OP();
	partial void LeaveRule_SET_OP();

	// $ANTLR start "SET_OP"
	[GrammarRule("SET_OP")]
	private void mSET_OP()
	{
		EnterRule_SET_OP();
		EnterRule("SET_OP", 42);
		TraceIn("SET_OP", 42);
		try
		{
			int _type = SET_OP;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:418:12: ( 'set' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:418:14: 'set'
			{
			DebugLocation(418, 14);
			Match("set"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SET_OP", 42);
			LeaveRule("SET_OP", 42);
			LeaveRule_SET_OP();
		}
	}
	// $ANTLR end "SET_OP"

	partial void EnterRule_T_OP();
	partial void LeaveRule_T_OP();

	// $ANTLR start "T_OP"
	[GrammarRule("T_OP")]
	private void mT_OP()
	{
		EnterRule_T_OP();
		EnterRule("T_OP", 43);
		TraceIn("T_OP", 43);
		try
		{
			int _type = T_OP;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:419:12: ( 't' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:419:14: 't'
			{
			DebugLocation(419, 14);
			Match('t'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T_OP", 43);
			LeaveRule("T_OP", 43);
			LeaveRule_T_OP();
		}
	}
	// $ANTLR end "T_OP"

	partial void EnterRule_SP_OP();
	partial void LeaveRule_SP_OP();

	// $ANTLR start "SP_OP"
	[GrammarRule("SP_OP")]
	private void mSP_OP()
	{
		EnterRule_SP_OP();
		EnterRule("SP_OP", 44);
		TraceIn("SP_OP", 44);
		try
		{
			int _type = SP_OP;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:420:12: ( 'setupProjection' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:420:14: 'setupProjection'
			{
			DebugLocation(420, 14);
			Match("setupProjection"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SP_OP", 44);
			LeaveRule("SP_OP", 44);
			LeaveRule_SP_OP();
		}
	}
	// $ANTLR end "SP_OP"

	partial void EnterRule_SEL();
	partial void LeaveRule_SEL();

	// $ANTLR start "SEL"
	[GrammarRule("SEL")]
	private void mSEL()
	{
		EnterRule_SEL();
		EnterRule("SEL", 45);
		TraceIn("SEL", 45);
		try
		{
			int _type = SEL;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:421:12: ( 'sel' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:421:14: 'sel'
			{
			DebugLocation(421, 14);
			Match("sel"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEL", 45);
			LeaveRule("SEL", 45);
			LeaveRule_SEL();
		}
	}
	// $ANTLR end "SEL"

	partial void EnterRule_COMP();
	partial void LeaveRule_COMP();

	// $ANTLR start "COMP"
	[GrammarRule("COMP")]
	private void mCOMP()
	{
		EnterRule_COMP();
		EnterRule("COMP", 46);
		TraceIn("COMP", 46);
		try
		{
			int _type = COMP;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:422:12: ( 'comp' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:422:14: 'comp'
			{
			DebugLocation(422, 14);
			Match("comp"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMP", 46);
			LeaveRule("COMP", 46);
			LeaveRule_COMP();
		}
	}
	// $ANTLR end "COMP"

	partial void EnterRule_SCAT();
	partial void LeaveRule_SCAT();

	// $ANTLR start "SCAT"
	[GrammarRule("SCAT")]
	private void mSCAT()
	{
		EnterRule_SCAT();
		EnterRule("SCAT", 47);
		TraceIn("SCAT", 47);
		try
		{
			int _type = SCAT;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:423:12: ( 'scatter' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:423:14: 'scatter'
			{
			DebugLocation(423, 14);
			Match("scatter"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SCAT", 47);
			LeaveRule("SCAT", 47);
			LeaveRule_SCAT();
		}
	}
	// $ANTLR end "SCAT"

	partial void EnterRule_SETB();
	partial void LeaveRule_SETB();

	// $ANTLR start "SETB"
	[GrammarRule("SETB")]
	private void mSETB()
	{
		EnterRule_SETB();
		EnterRule("SETB", 48);
		TraceIn("SETB", 48);
		try
		{
			int _type = SETB;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:424:12: ( 'setback' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:424:14: 'setback'
			{
			DebugLocation(424, 14);
			Match("setback"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SETB", 48);
			LeaveRule("SETB", 48);
			LeaveRule_SETB();
		}
	}
	// $ANTLR end "SETB"

	partial void EnterRule_SHPL();
	partial void LeaveRule_SHPL();

	// $ANTLR start "SHPL"
	[GrammarRule("SHPL")]
	private void mSHPL()
	{
		EnterRule_SHPL();
		EnterRule("SHPL", 49);
		TraceIn("SHPL", 49);
		try
		{
			int _type = SHPL;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:425:12: ( 'shapeL' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:425:14: 'shapeL'
			{
			DebugLocation(425, 14);
			Match("shapeL"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SHPL", 49);
			LeaveRule("SHPL", 49);
			LeaveRule_SHPL();
		}
	}
	// $ANTLR end "SHPL"

	partial void EnterRule_SHPU();
	partial void LeaveRule_SHPU();

	// $ANTLR start "SHPU"
	[GrammarRule("SHPU")]
	private void mSHPU()
	{
		EnterRule_SHPU();
		EnterRule("SHPU", 50);
		TraceIn("SHPU", 50);
		try
		{
			int _type = SHPU;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:426:12: ( 'shapeU' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:426:14: 'shapeU'
			{
			DebugLocation(426, 14);
			Match("shapeU"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SHPU", 50);
			LeaveRule("SHPU", 50);
			LeaveRule_SHPU();
		}
	}
	// $ANTLR end "SHPU"

	partial void EnterRule_SHPO();
	partial void LeaveRule_SHPO();

	// $ANTLR start "SHPO"
	[GrammarRule("SHPO")]
	private void mSHPO()
	{
		EnterRule_SHPO();
		EnterRule("SHPO", 51);
		TraceIn("SHPO", 51);
		try
		{
			int _type = SHPO;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:427:12: ( 'shapeO' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:427:14: 'shapeO'
			{
			DebugLocation(427, 14);
			Match("shapeO"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SHPO", 51);
			LeaveRule("SHPO", 51);
			LeaveRule_SHPO();
		}
	}
	// $ANTLR end "SHPO"

	partial void EnterRule_IRECT();
	partial void LeaveRule_IRECT();

	// $ANTLR start "IRECT"
	[GrammarRule("IRECT")]
	private void mIRECT()
	{
		EnterRule_IRECT();
		EnterRule("IRECT", 52);
		TraceIn("IRECT", 52);
		try
		{
			int _type = IRECT;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:428:12: ( 'innerRectangle' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:428:14: 'innerRectangle'
			{
			DebugLocation(428, 14);
			Match("innerRectangle"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IRECT", 52);
			LeaveRule("IRECT", 52);
			LeaveRule_IRECT();
		}
	}
	// $ANTLR end "IRECT"

	partial void EnterRule_TILEUV();
	partial void LeaveRule_TILEUV();

	// $ANTLR start "TILEUV"
	[GrammarRule("TILEUV")]
	private void mTILEUV()
	{
		EnterRule_TILEUV();
		EnterRule("TILEUV", 53);
		TraceIn("TILEUV", 53);
		try
		{
			int _type = TILEUV;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:429:12: ( 'tileUV' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:429:14: 'tileUV'
			{
			DebugLocation(429, 14);
			Match("tileUV"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TILEUV", 53);
			LeaveRule("TILEUV", 53);
			LeaveRule_TILEUV();
		}
	}
	// $ANTLR end "TILEUV"

	partial void EnterRule_NIL();
	partial void LeaveRule_NIL();

	// $ANTLR start "NIL"
	[GrammarRule("NIL")]
	private void mNIL()
	{
		EnterRule_NIL();
		EnterRule("NIL", 54);
		TraceIn("NIL", 54);
		try
		{
			int _type = NIL;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:430:12: ( 'NIL' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:430:14: 'NIL'
			{
			DebugLocation(430, 14);
			Match("NIL"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NIL", 54);
			LeaveRule("NIL", 54);
			LeaveRule_NIL();
		}
	}
	// $ANTLR end "NIL"

	partial void EnterRule_BAR();
	partial void LeaveRule_BAR();

	// $ANTLR start "BAR"
	[GrammarRule("BAR")]
	private void mBAR()
	{
		EnterRule_BAR();
		EnterRule("BAR", 55);
		TraceIn("BAR", 55);
		try
		{
			int _type = BAR;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:431:12: ( '|' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:431:14: '|'
			{
			DebugLocation(431, 14);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BAR", 55);
			LeaveRule("BAR", 55);
			LeaveRule_BAR();
		}
	}
	// $ANTLR end "BAR"

	partial void EnterRule_IMPORT();
	partial void LeaveRule_IMPORT();

	// $ANTLR start "IMPORT"
	[GrammarRule("IMPORT")]
	private void mIMPORT()
	{
		EnterRule_IMPORT();
		EnterRule("IMPORT", 56);
		TraceIn("IMPORT", 56);
		try
		{
			int _type = IMPORT;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:432:12: ( 'import' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:432:14: 'import'
			{
			DebugLocation(432, 14);
			Match("import"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IMPORT", 56);
			LeaveRule("IMPORT", 56);
			LeaveRule_IMPORT();
		}
	}
	// $ANTLR end "IMPORT"

	partial void EnterRule_STYLE();
	partial void LeaveRule_STYLE();

	// $ANTLR start "STYLE"
	[GrammarRule("STYLE")]
	private void mSTYLE()
	{
		EnterRule_STYLE();
		EnterRule("STYLE", 57);
		TraceIn("STYLE", 57);
		try
		{
			int _type = STYLE;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:433:12: ( 'style' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:433:14: 'style'
			{
			DebugLocation(433, 14);
			Match("style"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STYLE", 57);
			LeaveRule("STYLE", 57);
			LeaveRule_STYLE();
		}
	}
	// $ANTLR end "STYLE"

	partial void EnterRule_EXTENDS();
	partial void LeaveRule_EXTENDS();

	// $ANTLR start "EXTENDS"
	[GrammarRule("EXTENDS")]
	private void mEXTENDS()
	{
		EnterRule_EXTENDS();
		EnterRule("EXTENDS", 58);
		TraceIn("EXTENDS", 58);
		try
		{
			int _type = EXTENDS;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:434:12: ( 'extends' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:434:14: 'extends'
			{
			DebugLocation(434, 14);
			Match("extends"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EXTENDS", 58);
			LeaveRule("EXTENDS", 58);
			LeaveRule_EXTENDS();
		}
	}
	// $ANTLR end "EXTENDS"

	partial void EnterRule_VERSION();
	partial void LeaveRule_VERSION();

	// $ANTLR start "VERSION"
	[GrammarRule("VERSION")]
	private void mVERSION()
	{
		EnterRule_VERSION();
		EnterRule("VERSION", 59);
		TraceIn("VERSION", 59);
		try
		{
			int _type = VERSION;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:435:12: ( 'version' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:435:14: 'version'
			{
			DebugLocation(435, 14);
			Match("version"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VERSION", 59);
			LeaveRule("VERSION", 59);
			LeaveRule_VERSION();
		}
	}
	// $ANTLR end "VERSION"

	partial void EnterRule_HexDigit();
	partial void LeaveRule_HexDigit();

	// $ANTLR start "HexDigit"
	[GrammarRule("HexDigit")]
	private void mHexDigit()
	{
		EnterRule_HexDigit();
		EnterRule("HexDigit", 60);
		TraceIn("HexDigit", 60);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:439:10: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
			{
			DebugLocation(439, 10);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HexDigit", 60);
			LeaveRule("HexDigit", 60);
			LeaveRule_HexDigit();
		}
	}
	// $ANTLR end "HexDigit"

	partial void EnterRule_ScaleFloat();
	partial void LeaveRule_ScaleFloat();

	// $ANTLR start "ScaleFloat"
	[GrammarRule("ScaleFloat")]
	private void mScaleFloat()
	{
		EnterRule_ScaleFloat();
		EnterRule("ScaleFloat", 61);
		TraceIn("ScaleFloat", 61);
		try
		{
			int _type = ScaleFloat;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:440:15: ( '~' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:440:17: '~'
			{
			DebugLocation(440, 17);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ScaleFloat", 61);
			LeaveRule("ScaleFloat", 61);
			LeaveRule_ScaleFloat();
		}
	}
	// $ANTLR end "ScaleFloat"

	partial void EnterRule_ScaleRelative();
	partial void LeaveRule_ScaleRelative();

	// $ANTLR start "ScaleRelative"
	[GrammarRule("ScaleRelative")]
	private void mScaleRelative()
	{
		EnterRule_ScaleRelative();
		EnterRule("ScaleRelative", 62);
		TraceIn("ScaleRelative", 62);
		try
		{
			int _type = ScaleRelative;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:441:15: ( '\\'' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:441:17: '\\''
			{
			DebugLocation(441, 17);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ScaleRelative", 62);
			LeaveRule("ScaleRelative", 62);
			LeaveRule_ScaleRelative();
		}
	}
	// $ANTLR end "ScaleRelative"

	partial void EnterRule_ScaleRatio();
	partial void LeaveRule_ScaleRatio();

	// $ANTLR start "ScaleRatio"
	[GrammarRule("ScaleRatio")]
	private void mScaleRatio()
	{
		EnterRule_ScaleRatio();
		EnterRule("ScaleRatio", 63);
		TraceIn("ScaleRatio", 63);
		try
		{
			int _type = ScaleRatio;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:442:15: ( '\\\\' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:442:17: '\\\\'
			{
			DebugLocation(442, 17);
			Match('\\'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ScaleRatio", 63);
			LeaveRule("ScaleRatio", 63);
			LeaveRule_ScaleRatio();
		}
	}
	// $ANTLR end "ScaleRatio"

	partial void EnterRule_BooleanLiteral();
	partial void LeaveRule_BooleanLiteral();

	// $ANTLR start "BooleanLiteral"
	[GrammarRule("BooleanLiteral")]
	private void mBooleanLiteral()
	{
		EnterRule_BooleanLiteral();
		EnterRule("BooleanLiteral", 64);
		TraceIn("BooleanLiteral", 64);
		try
		{
			int _type = BooleanLiteral;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:445:2: ( 'true' | 'false' )
			int alt1=2;
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1=='t'))
			{
				alt1 = 1;
			}
			else if ((LA1_1=='f'))
			{
				alt1 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:445:4: 'true'
				{
				DebugLocation(445, 4);
				Match("true"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:446:4: 'false'
				{
				DebugLocation(446, 4);
				Match("false"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BooleanLiteral", 64);
			LeaveRule("BooleanLiteral", 64);
			LeaveRule_BooleanLiteral();
		}
	}
	// $ANTLR end "BooleanLiteral"

	partial void EnterRule_FloatingPointLiteral();
	partial void LeaveRule_FloatingPointLiteral();

	// $ANTLR start "FloatingPointLiteral"
	[GrammarRule("FloatingPointLiteral")]
	private void mFloatingPointLiteral()
	{
		EnterRule_FloatingPointLiteral();
		EnterRule("FloatingPointLiteral", 65);
		TraceIn("FloatingPointLiteral", 65);
		try
		{
			int _type = FloatingPointLiteral;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:450:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( Exponent )? | '.' ( '0' .. '9' )+ ( Exponent )? | ( '0' .. '9' )+ ( Exponent )? )
			int alt9=3;
			try { DebugEnterDecision(9, false);
			try
			{
				alt9 = dfa9.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:450:9: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( Exponent )?
				{
				DebugLocation(450, 9);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:450:9: ( '0' .. '9' )+
				int cnt2=0;
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_1 = input.LA(1);

					if (((LA2_1>='0' && LA2_1<='9')))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch (alt2)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
						{
						DebugLocation(450, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt2 >= 1)
							goto loop2;

						EarlyExitException eee2 = new EarlyExitException( 2, input );
						DebugRecognitionException(eee2);
						throw eee2;
					}
					cnt2++;
				}
				loop2:
					;

				} finally { DebugExitSubRule(2); }

				DebugLocation(450, 21);
				Match('.'); 
				DebugLocation(450, 25);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:450:25: ( '0' .. '9' )*
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_1 = input.LA(1);

					if (((LA3_1>='0' && LA3_1<='9')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch ( alt3 )
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
						{
						DebugLocation(450, 25);
						input.Consume();


						}
						break;

					default:
						goto loop3;
					}
				}

				loop3:
					;

				} finally { DebugExitSubRule(3); }

				DebugLocation(450, 37);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:450:37: ( Exponent )?
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1=='E'||LA4_1=='e'))
				{
					alt4 = 1;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:450:37: Exponent
					{
					DebugLocation(450, 37);
					mExponent(); 

					}
					break;

				}
				} finally { DebugExitSubRule(4); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:451:9: '.' ( '0' .. '9' )+ ( Exponent )?
				{
				DebugLocation(451, 9);
				Match('.'); 
				DebugLocation(451, 13);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:451:13: ( '0' .. '9' )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if (((LA5_1>='0' && LA5_1<='9')))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
						{
						DebugLocation(451, 13);
						input.Consume();


						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(451, 25);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:451:25: ( Exponent )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1=='E'||LA6_1=='e'))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:451:25: Exponent
					{
					DebugLocation(451, 25);
					mExponent(); 

					}
					break;

				}
				} finally { DebugExitSubRule(6); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:452:9: ( '0' .. '9' )+ ( Exponent )?
				{
				DebugLocation(452, 9);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:452:9: ( '0' .. '9' )+
				int cnt7=0;
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if (((LA7_1>='0' && LA7_1<='9')))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
						{
						DebugLocation(452, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt7 >= 1)
							goto loop7;

						EarlyExitException eee7 = new EarlyExitException( 7, input );
						DebugRecognitionException(eee7);
						throw eee7;
					}
					cnt7++;
				}
				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(452, 21);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:452:21: ( Exponent )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1=='E'||LA8_1=='e'))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:452:21: Exponent
					{
					DebugLocation(452, 21);
					mExponent(); 

					}
					break;

				}
				} finally { DebugExitSubRule(8); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FloatingPointLiteral", 65);
			LeaveRule("FloatingPointLiteral", 65);
			LeaveRule_FloatingPointLiteral();
		}
	}
	// $ANTLR end "FloatingPointLiteral"

	partial void EnterRule_ProbabilityLiteral();
	partial void LeaveRule_ProbabilityLiteral();

	// $ANTLR start "ProbabilityLiteral"
	[GrammarRule("ProbabilityLiteral")]
	private void mProbabilityLiteral()
	{
		EnterRule_ProbabilityLiteral();
		EnterRule("ProbabilityLiteral", 66);
		TraceIn("ProbabilityLiteral", 66);
		try
		{
			int _type = ProbabilityLiteral;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:455:20: ( FloatingPointLiteral '%' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:455:22: FloatingPointLiteral '%'
			{
			DebugLocation(455, 22);
			mFloatingPointLiteral(); 
			DebugLocation(455, 43);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ProbabilityLiteral", 66);
			LeaveRule("ProbabilityLiteral", 66);
			LeaveRule_ProbabilityLiteral();
		}
	}
	// $ANTLR end "ProbabilityLiteral"

	partial void EnterRule_Exponent();
	partial void LeaveRule_Exponent();

	// $ANTLR start "Exponent"
	[GrammarRule("Exponent")]
	private void mExponent()
	{
		EnterRule_Exponent();
		EnterRule("Exponent", 67);
		TraceIn("Exponent", 67);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:459:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:459:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(459, 12);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(459, 22);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:459:22: ( '+' | '-' )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1=='+'||LA10_1=='-'))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
				{
				DebugLocation(459, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(459, 33);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:459:33: ( '0' .. '9' )+
			int cnt11=0;
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if (((LA11_1>='0' && LA11_1<='9')))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
					{
					DebugLocation(459, 33);
					input.Consume();


					}
					break;

				default:
					if (cnt11 >= 1)
						goto loop11;

					EarlyExitException eee11 = new EarlyExitException( 11, input );
					DebugRecognitionException(eee11);
					throw eee11;
				}
				cnt11++;
			}
			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

		}
		finally
		{
			TraceOut("Exponent", 67);
			LeaveRule("Exponent", 67);
			LeaveRule_Exponent();
		}
	}
	// $ANTLR end "Exponent"

	partial void EnterRule_StringLiteral();
	partial void LeaveRule_StringLiteral();

	// $ANTLR start "StringLiteral"
	[GrammarRule("StringLiteral")]
	private void mStringLiteral()
	{
		EnterRule_StringLiteral();
		EnterRule("StringLiteral", 68);
		TraceIn("StringLiteral", 68);
		try
		{
			int _type = StringLiteral;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:461:5: ( '\"' ( EscapeSequence |~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:461:8: '\"' ( EscapeSequence |~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(461, 8);
			Match('\"'); 
			DebugLocation(461, 12);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:461:12: ( EscapeSequence |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=3;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1=='\\'))
				{
					alt12 = 1;
				}
				else if (((LA12_1>='\u0000' && LA12_1<='!')||(LA12_1>='#' && LA12_1<='[')||(LA12_1>=']' && LA12_1<='\uFFFF')))
				{
					alt12 = 2;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:461:14: EscapeSequence
					{
					DebugLocation(461, 14);
					mEscapeSequence(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:461:31: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(461, 31);
					input.Consume();


					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(461, 46);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("StringLiteral", 68);
			LeaveRule("StringLiteral", 68);
			LeaveRule_StringLiteral();
		}
	}
	// $ANTLR end "StringLiteral"

	partial void EnterRule_EscapeSequence();
	partial void LeaveRule_EscapeSequence();

	// $ANTLR start "EscapeSequence"
	[GrammarRule("EscapeSequence")]
	private void mEscapeSequence()
	{
		EnterRule_EscapeSequence();
		EnterRule("EscapeSequence", 69);
		TraceIn("EscapeSequence", 69);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:467:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UnicodeEscape | OctalEscape )
			int alt13=3;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1=='\\'))
			{
				switch (input.LA(2))
				{
				case '\"':
				case '\'':
				case '\\':
				case 'b':
				case 'f':
				case 'n':
				case 'r':
				case 't':
					{
					alt13 = 1;
					}
					break;
				case 'u':
					{
					alt13 = 2;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
					{
					alt13 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 13, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:467:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(467, 9);
				Match('\\'); 
				DebugLocation(467, 14);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:468:9: UnicodeEscape
				{
				DebugLocation(468, 9);
				mUnicodeEscape(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:469:9: OctalEscape
				{
				DebugLocation(469, 9);
				mOctalEscape(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("EscapeSequence", 69);
			LeaveRule("EscapeSequence", 69);
			LeaveRule_EscapeSequence();
		}
	}
	// $ANTLR end "EscapeSequence"

	partial void EnterRule_OctalEscape();
	partial void LeaveRule_OctalEscape();

	// $ANTLR start "OctalEscape"
	[GrammarRule("OctalEscape")]
	private void mOctalEscape()
	{
		EnterRule_OctalEscape();
		EnterRule("OctalEscape", 70);
		TraceIn("OctalEscape", 70);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:474:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
			int alt14=3;
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1=='\\'))
			{
				int LA14_2 = input.LA(2);

				if (((LA14_2>='0' && LA14_2<='3')))
				{
					int LA14_3 = input.LA(3);

					if (((LA14_3>='0' && LA14_3<='7')))
					{
						int LA14_4 = input.LA(4);

						if (((LA14_4>='0' && LA14_4<='7')))
						{
							alt14 = 1;
						}
						else
						{
							alt14 = 2;
						}
					}
					else
					{
						alt14 = 3;
					}
				}
				else if (((LA14_2>='4' && LA14_2<='7')))
				{
					int LA14_3 = input.LA(3);

					if (((LA14_3>='0' && LA14_3<='7')))
					{
						alt14 = 2;
					}
					else
					{
						alt14 = 3;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:474:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(474, 9);
				Match('\\'); 
				DebugLocation(474, 14);
				input.Consume();

				DebugLocation(474, 25);
				input.Consume();

				DebugLocation(474, 36);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:475:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(475, 9);
				Match('\\'); 
				DebugLocation(475, 14);
				input.Consume();

				DebugLocation(475, 25);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:476:9: '\\\\' ( '0' .. '7' )
				{
				DebugLocation(476, 9);
				Match('\\'); 
				DebugLocation(476, 14);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("OctalEscape", 70);
			LeaveRule("OctalEscape", 70);
			LeaveRule_OctalEscape();
		}
	}
	// $ANTLR end "OctalEscape"

	partial void EnterRule_UnicodeEscape();
	partial void LeaveRule_UnicodeEscape();

	// $ANTLR start "UnicodeEscape"
	[GrammarRule("UnicodeEscape")]
	private void mUnicodeEscape()
	{
		EnterRule_UnicodeEscape();
		EnterRule("UnicodeEscape", 71);
		TraceIn("UnicodeEscape", 71);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:481:5: ( '\\\\' 'u' HexDigit HexDigit HexDigit HexDigit )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:481:9: '\\\\' 'u' HexDigit HexDigit HexDigit HexDigit
			{
			DebugLocation(481, 9);
			Match('\\'); 
			DebugLocation(481, 14);
			Match('u'); 
			DebugLocation(481, 18);
			mHexDigit(); 
			DebugLocation(481, 27);
			mHexDigit(); 
			DebugLocation(481, 36);
			mHexDigit(); 
			DebugLocation(481, 45);
			mHexDigit(); 

			}

		}
		finally
		{
			TraceOut("UnicodeEscape", 71);
			LeaveRule("UnicodeEscape", 71);
			LeaveRule_UnicodeEscape();
		}
	}
	// $ANTLR end "UnicodeEscape"

	partial void EnterRule_Identifier();
	partial void LeaveRule_Identifier();

	// $ANTLR start "Identifier"
	[GrammarRule("Identifier")]
	private void mIdentifier()
	{
		EnterRule_Identifier();
		EnterRule("Identifier", 72);
		TraceIn("Identifier", 72);
		try
		{
			int _type = Identifier;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:484:5: ( ( Letter ( Letter | IDDigit )* '$' )? Letter ( Letter | IDDigit | '.' )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:484:7: ( Letter ( Letter | IDDigit )* '$' )? Letter ( Letter | IDDigit | '.' )*
			{
			DebugLocation(484, 7);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:484:7: ( Letter ( Letter | IDDigit )* '$' )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			try
			{
				alt16 = dfa16.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:484:8: Letter ( Letter | IDDigit )* '$'
				{
				DebugLocation(484, 8);
				mLetter(); 
				DebugLocation(484, 15);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:484:15: ( Letter | IDDigit )*
				try { DebugEnterSubRule(15);
				while (true)
				{
					int alt15=2;
					try { DebugEnterDecision(15, false);
					int LA15_1 = input.LA(1);

					if (((LA15_1>='0' && LA15_1<='9')||(LA15_1>='A' && LA15_1<='Z')||LA15_1=='_'||(LA15_1>='a' && LA15_1<='z')))
					{
						alt15 = 1;
					}


					} finally { DebugExitDecision(15); }
					switch ( alt15 )
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
						{
						DebugLocation(484, 15);
						input.Consume();


						}
						break;

					default:
						goto loop15;
					}
				}

				loop15:
					;

				} finally { DebugExitSubRule(15); }

				DebugLocation(484, 36);
				Match('$'); 

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(484, 43);
			mLetter(); 
			DebugLocation(484, 50);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:484:50: ( Letter | IDDigit | '.' )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1=='.'||(LA17_1>='0' && LA17_1<='9')||(LA17_1>='A' && LA17_1<='Z')||LA17_1=='_'||(LA17_1>='a' && LA17_1<='z')))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
					{
					DebugLocation(484, 50);
					input.Consume();


					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Identifier", 72);
			LeaveRule("Identifier", 72);
			LeaveRule_Identifier();
		}
	}
	// $ANTLR end "Identifier"

	partial void EnterRule_Annotation();
	partial void LeaveRule_Annotation();

	// $ANTLR start "Annotation"
	[GrammarRule("Annotation")]
	private void mAnnotation()
	{
		EnterRule_Annotation();
		EnterRule("Annotation", 73);
		TraceIn("Annotation", 73);
		try
		{
			int _type = Annotation;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:488:5: ( '@' Letter ( Letter | IDDigit )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:488:9: '@' Letter ( Letter | IDDigit )*
			{
			DebugLocation(488, 9);
			Match('@'); 
			DebugLocation(488, 13);
			mLetter(); 
			DebugLocation(488, 20);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:488:20: ( Letter | IDDigit )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if (((LA18_1>='0' && LA18_1<='9')||(LA18_1>='A' && LA18_1<='Z')||LA18_1=='_'||(LA18_1>='a' && LA18_1<='z')))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
					{
					DebugLocation(488, 20);
					input.Consume();


					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Annotation", 73);
			LeaveRule("Annotation", 73);
			LeaveRule_Annotation();
		}
	}
	// $ANTLR end "Annotation"

	partial void EnterRule_Letter();
	partial void LeaveRule_Letter();

	// $ANTLR start "Letter"
	[GrammarRule("Letter")]
	private void mLetter()
	{
		EnterRule_Letter();
		EnterRule("Letter", 74);
		TraceIn("Letter", 74);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:493:8: ( 'a' .. 'z' | 'A' .. 'Z' | '_' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
			{
			DebugLocation(493, 8);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("Letter", 74);
			LeaveRule("Letter", 74);
			LeaveRule_Letter();
		}
	}
	// $ANTLR end "Letter"

	partial void EnterRule_IDDigit();
	partial void LeaveRule_IDDigit();

	// $ANTLR start "IDDigit"
	[GrammarRule("IDDigit")]
	private void mIDDigit()
	{
		EnterRule_IDDigit();
		EnterRule("IDDigit", 75);
		TraceIn("IDDigit", 75);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:496:9: ( '0' .. '9' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
			{
			DebugLocation(496, 9);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("IDDigit", 75);
			LeaveRule("IDDigit", 75);
			LeaveRule_IDDigit();
		}
	}
	// $ANTLR end "IDDigit"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 76);
		TraceIn("WS", 76);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:497:5: ( ( ' ' | '\\t' | '\\u000C' | '\\n' ) )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:497:8: ( ' ' | '\\t' | '\\u000C' | '\\n' )
			{
			DebugLocation(497, 8);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\f'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(497, 40);
			Skip();

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 76);
			LeaveRule("WS", 76);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_SignatureIdentifier();
	partial void LeaveRule_SignatureIdentifier();

	// $ANTLR start "SignatureIdentifier"
	[GrammarRule("SignatureIdentifier")]
	private void mSignatureIdentifier()
	{
		EnterRule_SignatureIdentifier();
		EnterRule("SignatureIdentifier", 77);
		TraceIn("SignatureIdentifier", 77);
		try
		{
			int _type = SignatureIdentifier;
			int _channel = DefaultTokenChannel;
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:501:5: ( '\\r' '\\n' ( SignatureIdentifierWS )* ( Attr ( SignatureIdentifierWS )+ )? ( Letter ( Letter | IDDigit )* '$' )? Letter ( Letter | IDDigit | '.' )* )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:501:7: '\\r' '\\n' ( SignatureIdentifierWS )* ( Attr ( SignatureIdentifierWS )+ )? ( Letter ( Letter | IDDigit )* '$' )? Letter ( Letter | IDDigit | '.' )*
			{
			DebugLocation(501, 7);
			Match('\r'); 
			DebugLocation(501, 12);
			Match('\n'); 
			DebugLocation(501, 17);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:501:17: ( SignatureIdentifierWS )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1=='\t'||LA19_1==' '))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
					{
					DebugLocation(501, 17);
					input.Consume();


					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }

			DebugLocation(501, 40);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:501:40: ( Attr ( SignatureIdentifierWS )+ )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1=='a'))
			{
				int LA21_2 = input.LA(2);

				if ((LA21_2=='t'))
				{
					int LA21_3 = input.LA(3);

					if ((LA21_3=='t'))
					{
						int LA21_4 = input.LA(4);

						if ((LA21_4=='r'))
						{
							int LA21_5 = input.LA(5);

							if ((LA21_5=='\t'||LA21_5==' '))
							{
								alt21 = 1;
							}
						}
					}
				}
			}
			else if ((LA21_1=='c'))
			{
				int LA21_2 = input.LA(2);

				if ((LA21_2=='o'))
				{
					int LA21_3 = input.LA(3);

					if ((LA21_3=='n'))
					{
						int LA21_4 = input.LA(4);

						if ((LA21_4=='s'))
						{
							int LA21_5 = input.LA(5);

							if ((LA21_5=='t'))
							{
								int LA21_6 = input.LA(6);

								if ((LA21_6=='\t'||LA21_6==' '))
								{
									alt21 = 1;
								}
							}
						}
					}
				}
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:501:41: Attr ( SignatureIdentifierWS )+
				{
				DebugLocation(501, 41);
				mAttr(); 
				DebugLocation(501, 46);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:501:46: ( SignatureIdentifierWS )+
				int cnt20=0;
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_1 = input.LA(1);

					if ((LA20_1=='\t'||LA20_1==' '))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
						{
						DebugLocation(501, 46);
						input.Consume();


						}
						break;

					default:
						if (cnt20 >= 1)
							goto loop20;

						EarlyExitException eee20 = new EarlyExitException( 20, input );
						DebugRecognitionException(eee20);
						throw eee20;
					}
					cnt20++;
				}
				loop20:
					;

				} finally { DebugExitSubRule(20); }


				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(501, 71);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:501:71: ( Letter ( Letter | IDDigit )* '$' )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			try
			{
				alt23 = dfa23.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:501:72: Letter ( Letter | IDDigit )* '$'
				{
				DebugLocation(501, 72);
				mLetter(); 
				DebugLocation(501, 79);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:501:79: ( Letter | IDDigit )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_1 = input.LA(1);

					if (((LA22_1>='0' && LA22_1<='9')||(LA22_1>='A' && LA22_1<='Z')||LA22_1=='_'||(LA22_1>='a' && LA22_1<='z')))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
						{
						DebugLocation(501, 79);
						input.Consume();


						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(501, 100);
				Match('$'); 

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(501, 107);
			mLetter(); 
			DebugLocation(501, 114);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:501:114: ( Letter | IDDigit | '.' )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_1 = input.LA(1);

				if ((LA24_1=='.'||(LA24_1>='0' && LA24_1<='9')||(LA24_1>='A' && LA24_1<='Z')||LA24_1=='_'||(LA24_1>='a' && LA24_1<='z')))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
					{
					DebugLocation(501, 114);
					input.Consume();


					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SignatureIdentifier", 77);
			LeaveRule("SignatureIdentifier", 77);
			LeaveRule_SignatureIdentifier();
		}
	}
	// $ANTLR end "SignatureIdentifier"

	partial void EnterRule_SignatureIdentifierWS();
	partial void LeaveRule_SignatureIdentifierWS();

	// $ANTLR start "SignatureIdentifierWS"
	[GrammarRule("SignatureIdentifierWS")]
	private void mSignatureIdentifierWS()
	{
		EnterRule_SignatureIdentifierWS();
		EnterRule("SignatureIdentifierWS", 78);
		TraceIn("SignatureIdentifierWS", 78);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:506:23: ( ' ' | '\\t' )
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:
			{
			DebugLocation(506, 23);
			if (input.LA(1)=='\t'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("SignatureIdentifierWS", 78);
			LeaveRule("SignatureIdentifierWS", 78);
			LeaveRule_SignatureIdentifierWS();
		}
	}
	// $ANTLR end "SignatureIdentifierWS"

	partial void EnterRule_Attr();
	partial void LeaveRule_Attr();

	// $ANTLR start "Attr"
	[GrammarRule("Attr")]
	private void mAttr()
	{
		EnterRule_Attr();
		EnterRule("Attr", 79);
		TraceIn("Attr", 79);
		try
		{
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:509:6: ( 'attr' | 'const' )
			int alt25=2;
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1=='a'))
			{
				alt25 = 1;
			}
			else if ((LA25_1=='c'))
			{
				alt25 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:509:8: 'attr'
				{
				DebugLocation(509, 8);
				Match("attr"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:509:17: 'const'
				{
				DebugLocation(509, 17);
				Match("const"); 


				}
				break;

			}
		}
		finally
		{
			TraceOut("Attr", 79);
			LeaveRule("Attr", 79);
			LeaveRule_Attr();
		}
	}
	// $ANTLR end "Attr"

	public override void mTokens()
	{
		// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:8: ( T__79 | T__80 | T__81 | T__82 | EQUALS | RULE_DEFINITION | POPEN | PCLOSE | SPUSH | SPOP | MULT | DIV | MOD | MINUS | UMINUS | PLUS | NOT | AND | OR | EQUAL | NEQUAL | GT | GEQUAL | LT | LEQUAL | COLON | CPROB | CEXPR | CBODY | OPSEQ | DEFR | ERROR | NOTCOMB | COMBINE | STACKED | ELSE | CASE | SPLIT | SNAP_SPLIT | SPLIT_AREA | S_OP | SET_OP | T_OP | SP_OP | SEL | COMP | SCAT | SETB | SHPL | SHPU | SHPO | IRECT | TILEUV | NIL | BAR | IMPORT | STYLE | EXTENDS | VERSION | ScaleFloat | ScaleRelative | ScaleRatio | BooleanLiteral | FloatingPointLiteral | ProbabilityLiteral | StringLiteral | Identifier | Annotation | WS | SignatureIdentifier )
		int alt26=70;
		try { DebugEnterDecision(26, false);
		try
		{
			alt26 = dfa26.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(26); }
		switch (alt26)
		{
		case 1:
			DebugEnterAlt(1);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:10: T__79
			{
			DebugLocation(1, 10);
			mT__79(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:16: T__80
			{
			DebugLocation(1, 16);
			mT__80(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:22: T__81
			{
			DebugLocation(1, 22);
			mT__81(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:28: T__82
			{
			DebugLocation(1, 28);
			mT__82(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:34: EQUALS
			{
			DebugLocation(1, 34);
			mEQUALS(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:41: RULE_DEFINITION
			{
			DebugLocation(1, 41);
			mRULE_DEFINITION(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:57: POPEN
			{
			DebugLocation(1, 57);
			mPOPEN(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:63: PCLOSE
			{
			DebugLocation(1, 63);
			mPCLOSE(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:70: SPUSH
			{
			DebugLocation(1, 70);
			mSPUSH(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:76: SPOP
			{
			DebugLocation(1, 76);
			mSPOP(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:81: MULT
			{
			DebugLocation(1, 81);
			mMULT(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:86: DIV
			{
			DebugLocation(1, 86);
			mDIV(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:90: MOD
			{
			DebugLocation(1, 90);
			mMOD(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:94: MINUS
			{
			DebugLocation(1, 94);
			mMINUS(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:100: UMINUS
			{
			DebugLocation(1, 100);
			mUMINUS(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:107: PLUS
			{
			DebugLocation(1, 107);
			mPLUS(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:112: NOT
			{
			DebugLocation(1, 112);
			mNOT(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:116: AND
			{
			DebugLocation(1, 116);
			mAND(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:120: OR
			{
			DebugLocation(1, 120);
			mOR(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:123: EQUAL
			{
			DebugLocation(1, 123);
			mEQUAL(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:129: NEQUAL
			{
			DebugLocation(1, 129);
			mNEQUAL(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:136: GT
			{
			DebugLocation(1, 136);
			mGT(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:139: GEQUAL
			{
			DebugLocation(1, 139);
			mGEQUAL(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:146: LT
			{
			DebugLocation(1, 146);
			mLT(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:149: LEQUAL
			{
			DebugLocation(1, 149);
			mLEQUAL(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:156: COLON
			{
			DebugLocation(1, 156);
			mCOLON(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:162: CPROB
			{
			DebugLocation(1, 162);
			mCPROB(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:168: CEXPR
			{
			DebugLocation(1, 168);
			mCEXPR(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:174: CBODY
			{
			DebugLocation(1, 174);
			mCBODY(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:180: OPSEQ
			{
			DebugLocation(1, 180);
			mOPSEQ(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:186: DEFR
			{
			DebugLocation(1, 186);
			mDEFR(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:191: ERROR
			{
			DebugLocation(1, 191);
			mERROR(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:197: NOTCOMB
			{
			DebugLocation(1, 197);
			mNOTCOMB(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:205: COMBINE
			{
			DebugLocation(1, 205);
			mCOMBINE(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:213: STACKED
			{
			DebugLocation(1, 213);
			mSTACKED(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:221: ELSE
			{
			DebugLocation(1, 221);
			mELSE(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:226: CASE
			{
			DebugLocation(1, 226);
			mCASE(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:231: SPLIT
			{
			DebugLocation(1, 231);
			mSPLIT(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:237: SNAP_SPLIT
			{
			DebugLocation(1, 237);
			mSNAP_SPLIT(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:248: SPLIT_AREA
			{
			DebugLocation(1, 248);
			mSPLIT_AREA(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:259: S_OP
			{
			DebugLocation(1, 259);
			mS_OP(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:264: SET_OP
			{
			DebugLocation(1, 264);
			mSET_OP(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:271: T_OP
			{
			DebugLocation(1, 271);
			mT_OP(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:276: SP_OP
			{
			DebugLocation(1, 276);
			mSP_OP(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:282: SEL
			{
			DebugLocation(1, 282);
			mSEL(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:286: COMP
			{
			DebugLocation(1, 286);
			mCOMP(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:291: SCAT
			{
			DebugLocation(1, 291);
			mSCAT(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:296: SETB
			{
			DebugLocation(1, 296);
			mSETB(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:301: SHPL
			{
			DebugLocation(1, 301);
			mSHPL(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:306: SHPU
			{
			DebugLocation(1, 306);
			mSHPU(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:311: SHPO
			{
			DebugLocation(1, 311);
			mSHPO(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:316: IRECT
			{
			DebugLocation(1, 316);
			mIRECT(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:322: TILEUV
			{
			DebugLocation(1, 322);
			mTILEUV(); 

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:329: NIL
			{
			DebugLocation(1, 329);
			mNIL(); 

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:333: BAR
			{
			DebugLocation(1, 333);
			mBAR(); 

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:337: IMPORT
			{
			DebugLocation(1, 337);
			mIMPORT(); 

			}
			break;
		case 57:
			DebugEnterAlt(57);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:344: STYLE
			{
			DebugLocation(1, 344);
			mSTYLE(); 

			}
			break;
		case 58:
			DebugEnterAlt(58);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:350: EXTENDS
			{
			DebugLocation(1, 350);
			mEXTENDS(); 

			}
			break;
		case 59:
			DebugEnterAlt(59);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:358: VERSION
			{
			DebugLocation(1, 358);
			mVERSION(); 

			}
			break;
		case 60:
			DebugEnterAlt(60);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:366: ScaleFloat
			{
			DebugLocation(1, 366);
			mScaleFloat(); 

			}
			break;
		case 61:
			DebugEnterAlt(61);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:377: ScaleRelative
			{
			DebugLocation(1, 377);
			mScaleRelative(); 

			}
			break;
		case 62:
			DebugEnterAlt(62);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:391: ScaleRatio
			{
			DebugLocation(1, 391);
			mScaleRatio(); 

			}
			break;
		case 63:
			DebugEnterAlt(63);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:402: BooleanLiteral
			{
			DebugLocation(1, 402);
			mBooleanLiteral(); 

			}
			break;
		case 64:
			DebugEnterAlt(64);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:417: FloatingPointLiteral
			{
			DebugLocation(1, 417);
			mFloatingPointLiteral(); 

			}
			break;
		case 65:
			DebugEnterAlt(65);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:438: ProbabilityLiteral
			{
			DebugLocation(1, 438);
			mProbabilityLiteral(); 

			}
			break;
		case 66:
			DebugEnterAlt(66);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:457: StringLiteral
			{
			DebugLocation(1, 457);
			mStringLiteral(); 

			}
			break;
		case 67:
			DebugEnterAlt(67);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:471: Identifier
			{
			DebugLocation(1, 471);
			mIdentifier(); 

			}
			break;
		case 68:
			DebugEnterAlt(68);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:482: Annotation
			{
			DebugLocation(1, 482);
			mAnnotation(); 

			}
			break;
		case 69:
			DebugEnterAlt(69);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:493: WS
			{
			DebugLocation(1, 493);
			mWS(); 

			}
			break;
		case 70:
			DebugEnterAlt(70);
			// /Users/caglaraydin/OneDrive/VS Projects/CGATranslator/CGATranslator/CGA.g3:1:496: SignatureIdentifier
			{
			DebugLocation(1, 496);
			mSignatureIdentifier(); 

			}
			break;

		}

	}


	#region DFA
	DFA9 dfa9;
	DFA16 dfa16;
	DFA23 dfa23;
	DFA26 dfa26;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa9 = new DFA9(this);
		dfa16 = new DFA16(this);
		dfa23 = new DFA23(this);
		dfa26 = new DFA26(this);
	}

	private class DFA9 : DFA
	{
		private const string DFA9_eotS =
			"\x1\xFFFF\x1\x4\x3\xFFFF";
		private const string DFA9_eofS =
			"\x5\xFFFF";
		private const string DFA9_minS =
			"\x2\x2E\x3\xFFFF";
		private const string DFA9_maxS =
			"\x2\x39\x3\xFFFF";
		private const string DFA9_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA9_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA9_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1",
				"",
				"",
				""
			};

		private static readonly short[] DFA9_eot = DFA.UnpackEncodedString(DFA9_eotS);
		private static readonly short[] DFA9_eof = DFA.UnpackEncodedString(DFA9_eofS);
		private static readonly char[] DFA9_min = DFA.UnpackEncodedStringToUnsignedChars(DFA9_minS);
		private static readonly char[] DFA9_max = DFA.UnpackEncodedStringToUnsignedChars(DFA9_maxS);
		private static readonly short[] DFA9_accept = DFA.UnpackEncodedString(DFA9_acceptS);
		private static readonly short[] DFA9_special = DFA.UnpackEncodedString(DFA9_specialS);
		private static readonly short[][] DFA9_transition;

		static DFA9()
		{
			int numStates = DFA9_transitionS.Length;
			DFA9_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA9_transition[i] = DFA.UnpackEncodedString(DFA9_transitionS[i]);
			}
		}

		public DFA9( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 9;
			this.eot = DFA9_eot;
			this.eof = DFA9_eof;
			this.min = DFA9_min;
			this.max = DFA9_max;
			this.accept = DFA9_accept;
			this.special = DFA9_special;
			this.transition = DFA9_transition;
		}

		public override string Description { get { return "449:1: FloatingPointLiteral : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( Exponent )? | '.' ( '0' .. '9' )+ ( Exponent )? | ( '0' .. '9' )+ ( Exponent )? );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA16 : DFA
	{
		private const string DFA16_eotS =
			"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF";
		private const string DFA16_eofS =
			"\x5\xFFFF";
		private const string DFA16_minS =
			"\x1\x41\x1\x24\x1\xFFFF\x1\x24\x1\xFFFF";
		private const string DFA16_maxS =
			"\x2\x7A\x1\xFFFF\x1\x7A\x1\xFFFF";
		private const string DFA16_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1";
		private const string DFA16_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA16_transitionS =
			{
				"\x1A\x1\x4\xFFFF\x1\x1\x1\xFFFF\x1A\x1",
				"\x1\x4\xB\xFFFF\xA\x3\x7\xFFFF\x1A\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1A\x3",
				"",
				"\x1\x4\xB\xFFFF\xA\x3\x7\xFFFF\x1A\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1A\x3",
				""
			};

		private static readonly short[] DFA16_eot = DFA.UnpackEncodedString(DFA16_eotS);
		private static readonly short[] DFA16_eof = DFA.UnpackEncodedString(DFA16_eofS);
		private static readonly char[] DFA16_min = DFA.UnpackEncodedStringToUnsignedChars(DFA16_minS);
		private static readonly char[] DFA16_max = DFA.UnpackEncodedStringToUnsignedChars(DFA16_maxS);
		private static readonly short[] DFA16_accept = DFA.UnpackEncodedString(DFA16_acceptS);
		private static readonly short[] DFA16_special = DFA.UnpackEncodedString(DFA16_specialS);
		private static readonly short[][] DFA16_transition;

		static DFA16()
		{
			int numStates = DFA16_transitionS.Length;
			DFA16_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA16_transition[i] = DFA.UnpackEncodedString(DFA16_transitionS[i]);
			}
		}

		public DFA16( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 16;
			this.eot = DFA16_eot;
			this.eof = DFA16_eof;
			this.min = DFA16_min;
			this.max = DFA16_max;
			this.accept = DFA16_accept;
			this.special = DFA16_special;
			this.transition = DFA16_transition;
		}

		public override string Description { get { return "484:7: ( Letter ( Letter | IDDigit )* '$' )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA23 : DFA
	{
		private const string DFA23_eotS =
			"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF";
		private const string DFA23_eofS =
			"\x5\xFFFF";
		private const string DFA23_minS =
			"\x1\x41\x1\x24\x1\xFFFF\x1\x24\x1\xFFFF";
		private const string DFA23_maxS =
			"\x2\x7A\x1\xFFFF\x1\x7A\x1\xFFFF";
		private const string DFA23_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1";
		private const string DFA23_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA23_transitionS =
			{
				"\x1A\x1\x4\xFFFF\x1\x1\x1\xFFFF\x1A\x1",
				"\x1\x4\xB\xFFFF\xA\x3\x7\xFFFF\x1A\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1A\x3",
				"",
				"\x1\x4\xB\xFFFF\xA\x3\x7\xFFFF\x1A\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1A\x3",
				""
			};

		private static readonly short[] DFA23_eot = DFA.UnpackEncodedString(DFA23_eotS);
		private static readonly short[] DFA23_eof = DFA.UnpackEncodedString(DFA23_eofS);
		private static readonly char[] DFA23_min = DFA.UnpackEncodedStringToUnsignedChars(DFA23_minS);
		private static readonly char[] DFA23_max = DFA.UnpackEncodedStringToUnsignedChars(DFA23_maxS);
		private static readonly short[] DFA23_accept = DFA.UnpackEncodedString(DFA23_acceptS);
		private static readonly short[] DFA23_special = DFA.UnpackEncodedString(DFA23_specialS);
		private static readonly short[][] DFA23_transition;

		static DFA23()
		{
			int numStates = DFA23_transitionS.Length;
			DFA23_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA23_transition[i] = DFA.UnpackEncodedString(DFA23_transitionS[i]);
			}
		}

		public DFA23( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 23;
			this.eot = DFA23_eot;
			this.eof = DFA23_eof;
			this.min = DFA23_min;
			this.max = DFA23_max;
			this.accept = DFA23_accept;
			this.special = DFA23_special;
			this.transition = DFA23_transition;
		}

		public override string Description { get { return "501:71: ( Letter ( Letter | IDDigit )* '$' )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA26 : DFA
	{
		private const string DFA26_eotS =
			"\x5\xFFFF\x1\x29\x1\x2B\x9\xFFFF\x1\x33\x1\xFFFF\x1\x35\x1\x37\x1\x39"+
			"\x1\xFFFF\x2\x24\x1\x44\x1\x47\x3\x24\x3\xFFFF\x1\x24\x1\x4F\x18\xFFFF"+
			"\xA\x24\x1\xFFFF\x2\x24\x1\xFFFF\x5\x24\x1\x4F\x3\xFFFF\x1\x4F\x6\xFFFF"+
			"\x6\x24\x1\x77\x1\x78\x7\x24\x1\x80\x2\x24\x1\x4F\x2\xFFFF\x1\x4F\x1"+
			"\xFFFF\x1\x87\x1\x24\x1\x89\x1\x8A\x4\x24\x2\xFFFF\x4\x24\x1\x93\x2\x24"+
			"\x1\xFFFF\x2\x24\x1\xFFFF\x1\x4F\x1\xFFFF\x1\x4F\x1\xFFFF\x1\x24\x2\xFFFF"+
			"\x1\x9A\x5\x24\x1\xA2\x1\x24\x1\xFFFF\x3\x24\x1\x93\x2\x24\x1\xFFFF\x4"+
			"\x24\x1\xAD\x1\xAE\x1\xAF\x1\xFFFF\x1\xB0\x1\x24\x1\xB2\x1\x24\x1\xB4"+
			"\x3\x24\x1\xB8\x1\xB9\x4\xFFFF\x1\x24\x1\xFFFF\x1\xBB\x1\xFFFF\x3\x24"+
			"\x2\xFFFF\x1\x24\x1\xFFFF\x1\xC0\x1\xC1\x2\x24\x2\xFFFF\x9\x24\x1\xCD"+
			"\x1\xCE\x2\xFFFF";
		private const string DFA26_eofS =
			"\xCF\xFFFF";
		private const string DFA26_minS =
			"\x1\x0\x4\xFFFF\x1\x3D\x1\x2D\x7\xFFFF\x1\x2D\x1\xFFFF\x1\x3D\x1\xFFFF"+
			"\x1\x7C\x2\x3D\x1\xFFFF\x1\x6C\x1\x61\x2\x24\x1\x6D\x1\x49\x1\x65\x3"+
			"\xFFFF\x1\x61\x1\x25\x1\x30\xA\xFFFF\x1\x42\x2\xFFFF\x1\x51\x9\xFFFF"+
			"\x1\x73\x1\x74\x1\x73\x1\x6D\x1\x6C\x1\x61\x1\x6C\x2\x61\x1\x79\x1\xFFFF"+
			"\x1\x6C\x1\x75\x1\xFFFF\x1\x6E\x1\x70\x1\x4C\x1\x72\x1\x6C\x1\x25\x1"+
			"\x2B\x2\xFFFF\x1\x25\x6\xFFFF\x3\x65\x1\x70\x1\x69\x1\x70\x2\x24\x1\x74"+
			"\x1\x70\x1\x6C\x3\x65\x1\x6F\x1\x24\x2\x73\x1\x25\x1\x2B\x1\x30\x1\x25"+
			"\x1\x2B\x1\x24\x1\x6E\x2\x24\x1\x74\x1\x53\x1\x70\x1\x61\x2\xFFFF\x1"+
			"\x74\x2\x65\x1\x55\x1\x24\x2\x72\x1\xFFFF\x1\x69\x1\x65\x1\x30\x1\x25"+
			"\x1\x30\x1\x25\x1\xFFFF\x1\x64\x2\xFFFF\x1\x24\x1\x70\x1\x50\x1\x63\x1"+
			"\x65\x1\x4C\x1\x24\x1\x56\x1\xFFFF\x1\x52\x1\x74\x1\x6F\x1\x24\x1\x73"+
			"\x1\x72\x1\xFFFF\x1\x6C\x1\x72\x1\x6B\x1\x72\x3\x24\x1\xFFFF\x1\x24\x1"+
			"\x65\x1\x24\x1\x6E\x1\x24\x1\x65\x1\x69\x1\x6F\x2\x24\x4\xFFFF\x1\x63"+
			"\x1\xFFFF\x1\x24\x1\xFFFF\x1\x61\x1\x74\x1\x6A\x2\xFFFF\x1\x74\x1\xFFFF"+
			"\x2\x24\x1\x65\x1\x61\x2\xFFFF\x1\x63\x1\x6E\x1\x74\x1\x67\x1\x69\x1"+
			"\x6C\x1\x6F\x1\x65\x1\x6E\x2\x24\x2\xFFFF";
		private const string DFA26_maxS =
			"\x1\x7E\x4\xFFFF\x1\x3D\x1\x2D\x7\xFFFF\x1\x53\x1\xFFFF\x1\x3D\x1\xFFFF"+
			"\x1\x7C\x2\x3D\x1\xFFFF\x1\x78\x1\x6F\x2\x7A\x1\x6E\x1\x49\x1\x65\x3"+
			"\xFFFF\x1\x61\x1\x65\x1\x39\xA\xFFFF\x1\x50\x2\xFFFF\x1\x52\x9\xFFFF"+
			"\x1\x73\x1\x74\x1\x73\x1\x6D\x1\x6C\x1\x61\x1\x74\x2\x61\x1\x79\x1\xFFFF"+
			"\x1\x6C\x1\x75\x1\xFFFF\x1\x6E\x1\x70\x1\x4C\x1\x72\x1\x6C\x1\x65\x1"+
			"\x39\x2\xFFFF\x1\x65\x6\xFFFF\x3\x65\x1\x70\x1\x69\x1\x70\x2\x7A\x1\x74"+
			"\x1\x70\x1\x6C\x3\x65\x1\x6F\x1\x7A\x2\x73\x1\x65\x4\x39\x1\x7A\x1\x6E"+
			"\x2\x7A\x1\x74\x1\x53\x1\x70\x1\x61\x2\xFFFF\x1\x74\x2\x65\x1\x55\x1"+
			"\x7A\x2\x72\x1\xFFFF\x1\x69\x1\x65\x4\x39\x1\xFFFF\x1\x64\x2\xFFFF\x1"+
			"\x7A\x1\x70\x1\x50\x1\x63\x1\x65\x1\x55\x1\x7A\x1\x56\x1\xFFFF\x1\x52"+
			"\x1\x74\x1\x6F\x1\x7A\x1\x73\x1\x72\x1\xFFFF\x1\x6C\x1\x72\x1\x6B\x1"+
			"\x72\x3\x7A\x1\xFFFF\x1\x7A\x1\x65\x1\x7A\x1\x6E\x1\x7A\x1\x65\x1\x69"+
			"\x1\x6F\x2\x7A\x4\xFFFF\x1\x63\x1\xFFFF\x1\x7A\x1\xFFFF\x1\x61\x1\x74"+
			"\x1\x6A\x2\xFFFF\x1\x74\x1\xFFFF\x2\x7A\x1\x65\x1\x61\x2\xFFFF\x1\x63"+
			"\x1\x6E\x1\x74\x1\x67\x1\x69\x1\x6C\x1\x6F\x1\x65\x1\x6E\x2\x7A\x2\xFFFF";
		private const string DFA26_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x2\xFFFF\x1\x7\x1\x8\x1\x9\x1\xA\x1"+
			"\xB\x1\xC\x1\xD\x1\xFFFF\x1\x10\x1\xFFFF\x1\x12\x3\xFFFF\x1\x1A\x7\xFFFF"+
			"\x1\x3C\x1\x3D\x1\x3E\x3\xFFFF\x1\x42\x1\x43\x1\x44\x1\x45\x1\x46\x1"+
			"\x14\x1\x5\x1\x6\x1\xE\x1\xF\x1\xFFFF\x1\x1E\x1\x1F\x1\xFFFF\x1\x23\x1"+
			"\x15\x1\x11\x1\x13\x1\x37\x1\x17\x1\x16\x1\x19\x1\x18\xA\xFFFF\x1\x29"+
			"\x2\xFFFF\x1\x2B\x7\xFFFF\x1\x40\x1\x41\x1\xFFFF\x1\x1B\x1\x1C\x1\x1D"+
			"\x1\x21\x1\x20\x1\x22\x1F\xFFFF\x1\x2A\x1\x2D\x7\xFFFF\x1\x36\x6\xFFFF"+
			"\x1\x24\x1\xFFFF\x1\x25\x1\x2E\x8\xFFFF\x1\x3F\x6\xFFFF\x1\x26\x7\xFFFF"+
			"\x1\x39\xA\xFFFF\x1\x31\x1\x32\x1\x33\x1\x35\x1\xFFFF\x1\x38\x1\xFFFF"+
			"\x1\x3A\x3\xFFFF\x1\x30\x1\x2F\x1\xFFFF\x1\x3B\x4\xFFFF\x1\x28\x1\x27"+
			"\xB\xFFFF\x1\x34\x1\x2C";
		private const string DFA26_specialS =
			"\xCF\xFFFF}>";
		private static readonly string[] DFA26_transitionS =
			{
				"\x1\xE\x8\xFFFF\x2\x26\x1\xFFFF\x1\x26\x1\x27\x12\xFFFF\x1\x26\x1\x10"+
				"\x1\x23\x2\xFFFF\x1\xD\x1\x11\x1\x1E\x1\x7\x1\x8\x1\xB\x1\xF\x1\x1\x1"+
				"\x6\x1\x22\x1\xC\xA\x21\x1\x15\x1\xFFFF\x1\x14\x1\x5\x1\x13\x1\xFFFF"+
				"\x1\x25\xD\x24\x1\x1B\xC\x24\x1\x9\x1\x1F\x1\xA\x1\x2\x1\x24\x1\xFFFF"+
				"\x2\x24\x1\x17\x1\x24\x1\x16\x1\x20\x2\x24\x1\x1A\x9\x24\x1\x18\x1\x19"+
				"\x1\x24\x1\x1C\x4\x24\x1\x3\x1\x12\x1\x4\x1\x1D",
				"",
				"",
				"",
				"",
				"\x1\x28",
				"\x1\x2A",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2C\x15\xFFFF\x1\x2D\x1\x2F\x1\x30\x9\xFFFF\x1\x2E\x3\xFFFF\x1"+
				"\x31",
				"",
				"\x1\x32",
				"",
				"\x1\x34",
				"\x1\x36",
				"\x1\x38",
				"",
				"\x1\x3A\xB\xFFFF\x1\x3B",
				"\x1\x3C\xD\xFFFF\x1\x3D",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x2\x24\x1\x41\x1\x24\x1\x40\x2\x24\x1\x42\x5\x24\x1\x3F"+
				"\x1\x24\x1\x3E\x3\x24\x1\x43\x6\x24",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x8\x24\x1\x45\x8\x24\x1\x46\x8\x24",
				"\x1\x49\x1\x48",
				"\x1\x4A",
				"\x1\x4B",
				"",
				"",
				"",
				"\x1\x4C",
				"\x1\x50\x8\xFFFF\x1\x4D\x1\xFFFF\xA\x21\xB\xFFFF\x1\x4E\x1F\xFFFF\x1"+
				"\x4E",
				"\xA\x51",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x54\x2\xFFFF\x1\x53\x9\xFFFF\x1\x55\x1\x52",
				"",
				"",
				"\x1\x57\x1\x56",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x58",
				"\x1\x59",
				"\x1\x5A",
				"\x1\x5B",
				"\x1\x5C",
				"\x1\x5D",
				"\x1\x5F\x7\xFFFF\x1\x5E",
				"\x1\x60",
				"\x1\x61",
				"\x1\x62",
				"",
				"\x1\x63",
				"\x1\x64",
				"",
				"\x1\x65",
				"\x1\x66",
				"\x1\x67",
				"\x1\x68",
				"\x1\x69",
				"\x1\x50\xA\xFFFF\xA\x6A\xB\xFFFF\x1\x6B\x1F\xFFFF\x1\x6B",
				"\x1\x6C\x1\xFFFF\x1\x6C\x2\xFFFF\xA\x6D",
				"",
				"",
				"\x1\x50\xA\xFFFF\xA\x51\xB\xFFFF\x1\x6E\x1F\xFFFF\x1\x6E",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x6F",
				"\x1\x70",
				"\x1\x71",
				"\x1\x72",
				"\x1\x73",
				"\x1\x74",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1\x24\x1\x76\x12\x24\x1\x75\x5\x24",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\x79",
				"\x1\x7A",
				"\x1\x7B",
				"\x1\x7C",
				"\x1\x7D",
				"\x1\x7E",
				"\x1\x7F",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\x81",
				"\x1\x82",
				"\x1\x50\xA\xFFFF\xA\x6A\xB\xFFFF\x1\x6B\x1F\xFFFF\x1\x6B",
				"\x1\x83\x1\xFFFF\x1\x83\x2\xFFFF\xA\x84",
				"\xA\x6D",
				"\x1\x50\xA\xFFFF\xA\x6D",
				"\x1\x85\x1\xFFFF\x1\x85\x2\xFFFF\xA\x86",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\x88",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\x8B",
				"\x1\x8C",
				"\x1\x8D",
				"\x1\x8E",
				"",
				"",
				"\x1\x8F",
				"\x1\x90",
				"\x1\x91",
				"\x1\x92",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\x94",
				"\x1\x95",
				"",
				"\x1\x96",
				"\x1\x97",
				"\xA\x84",
				"\x1\x50\xA\xFFFF\xA\x84",
				"\xA\x86",
				"\x1\x50\xA\xFFFF\xA\x86",
				"",
				"\x1\x98",
				"",
				"",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1\x99\x19\x24\x4"+
				"\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x9B",
				"\x1\x9C",
				"\x1\x9D",
				"\x1\x9E",
				"\x1\x9F\x2\xFFFF\x1\xA1\x5\xFFFF\x1\xA0",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\xA3",
				"",
				"\x1\xA4",
				"\x1\xA5",
				"\x1\xA6",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\xA7",
				"\x1\xA8",
				"",
				"\x1\xA9",
				"\x1\xAA",
				"\x1\xAB",
				"\x1\xAC",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\xB1",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\xB3",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\xB5",
				"\x1\xB6",
				"\x1\xB7",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"",
				"",
				"",
				"",
				"\x1\xBA",
				"",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"",
				"\x1\xBC",
				"\x1\xBD",
				"\x1\xBE",
				"",
				"",
				"\x1\xBF",
				"",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\xC2",
				"\x1\xC3",
				"",
				"",
				"\x1\xC4",
				"\x1\xC5",
				"\x1\xC6",
				"\x1\xC7",
				"\x1\xC8",
				"\x1\xC9",
				"\x1\xCA",
				"\x1\xCB",
				"\x1\xCC",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"\x1\x24\x9\xFFFF\x1\x24\x1\xFFFF\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1"+
				"\x24\x1\xFFFF\x1A\x24",
				"",
				""
			};

		private static readonly short[] DFA26_eot = DFA.UnpackEncodedString(DFA26_eotS);
		private static readonly short[] DFA26_eof = DFA.UnpackEncodedString(DFA26_eofS);
		private static readonly char[] DFA26_min = DFA.UnpackEncodedStringToUnsignedChars(DFA26_minS);
		private static readonly char[] DFA26_max = DFA.UnpackEncodedStringToUnsignedChars(DFA26_maxS);
		private static readonly short[] DFA26_accept = DFA.UnpackEncodedString(DFA26_acceptS);
		private static readonly short[] DFA26_special = DFA.UnpackEncodedString(DFA26_specialS);
		private static readonly short[][] DFA26_transition;

		static DFA26()
		{
			int numStates = DFA26_transitionS.Length;
			DFA26_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA26_transition[i] = DFA.UnpackEncodedString(DFA26_transitionS[i]);
			}
		}

		public DFA26( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 26;
			this.eot = DFA26_eot;
			this.eof = DFA26_eof;
			this.min = DFA26_min;
			this.max = DFA26_max;
			this.accept = DFA26_accept;
			this.special = DFA26_special;
			this.transition = DFA26_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__79 | T__80 | T__81 | T__82 | EQUALS | RULE_DEFINITION | POPEN | PCLOSE | SPUSH | SPOP | MULT | DIV | MOD | MINUS | UMINUS | PLUS | NOT | AND | OR | EQUAL | NEQUAL | GT | GEQUAL | LT | LEQUAL | COLON | CPROB | CEXPR | CBODY | OPSEQ | DEFR | ERROR | NOTCOMB | COMBINE | STACKED | ELSE | CASE | SPLIT | SNAP_SPLIT | SPLIT_AREA | S_OP | SET_OP | T_OP | SP_OP | SEL | COMP | SCAT | SETB | SHPL | SHPU | SHPO | IRECT | TILEUV | NIL | BAR | IMPORT | STYLE | EXTENDS | VERSION | ScaleFloat | ScaleRelative | ScaleRatio | BooleanLiteral | FloatingPointLiteral | ProbabilityLiteral | StringLiteral | Identifier | Annotation | WS | SignatureIdentifier );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion

}

} // namespace CGATranslator
